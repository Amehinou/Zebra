ca65 V2.18 - Ubuntu 2.18-1
Main file   : msbasic.s
Current file: msbasic.s

000000r 1               ; Microsoft BASIC for 6502
000000r 1               ;
000000r 1               ; (first revision of this distribution, 20 Oct 2008, Michael Steil www.pagetable.com)
000000r 1               ;
000000r 1               ; This is a single integrated assembly source tree that can generate seven different versions of
000000r 1               ; Microsoft BASIC for 6502.
000000r 1               ;
000000r 1               ; By running ./make.sh, this will generate all versions and compare them to the original files
000000r 1               ; byte by byte. The CC65 compiler suite is need to build this project.
000000r 1               ;
000000r 1               ; These are the first eight (known) versions of Microsoft BASIC for 6502:
000000r 1               ;
000000r 1               ; Name                 Release   MS Version    ROM   9digit  INPUTBUFFER   extensions   .define
000000r 1               ;---------------------------------------------------------------------------------------------------
000000r 1               ; Commodore BASIC 1     1977                    Y      Y          ZP          CBM
000000r 1               ; OSI BASIC             1977     1.0 REV 3.2    Y      N          ZP            -        CONFIG_10A
000000r 1               ; AppleSoft I           1977     1.1            N      Y        $0200         Apple      CONFIG_11
000000r 1               ; KIM BASIC             1977     1.1            N      Y          ZP            -        CONFIG_11A
000000r 1               ; AppleSoft II          1978                    Y      Y        $0200         Apple      CONFIG_2
000000r 1               ; Commodore BASIC 2     1979                    Y      Y        $0200          CBM       CONFIG_2A
000000r 1               ; KBD BASIC             1982                    Y      N        $0700          KBD       CONFIG_2B
000000r 1               ; MicroTAN              1980                    Y      Y          ZP            -        CONFIG_2C
000000r 1               ;
000000r 1               ; (Note that this assembly source cannot (yet) build AppleSoft II.)
000000r 1               ;
000000r 1               ; This lists the versions in the order in which they were forked from the Microsoft source base.
000000r 1               ; Commodore BASIC 1, as used on the original PET is the oldest known version of Microsoft BASIC
000000r 1               ; for 6502. It contains some additions to Microsoft's version, like Commodore-style file I/O.
000000r 1               ;
000000r 1               ; The CONFIG_n defines specify what Microsoft-version the OEM version is based on. If CONFIG_2B
000000r 1               ; is defined, for example, CONFIG_2A, CONFIG_2, CONFIG_11A, CONFIG_11 and CONFIG_10A will be
000000r 1               ; defined as well, and all bugfixes up to version 2B will be enabled.
000000r 1               ;
000000r 1               ; The following symbols can be defined in addition:
000000r 1               ;
000000r 1               ; CONFIG_CBM1_PATCHES				jump out into CBM1's binary patches instead of doing the right thing inline
000000r 1               ; CONFIG_CBM_ALL					add all Commodore-specific additions except file I/O
000000r 1               ; CONFIG_DATAFLG					?
000000r 1               ; CONFIG_EASTER_EGG					include the CBM2 "WAIT 6502" easter egg
000000r 1               ; CONFIG_FILE						support Commodore PRINT#, INPUT#, GET#, CMD
000000r 1               ; CONFIG_IO_MSB						all I/O has bit #7 set
000000r 1               ; CONFIG_MONCOUT_DESTROYS_Y			Y needs to be preserved when calling MONCOUT
000000r 1               ; CONFIG_NO_CR						terminal doesn't need explicit CRs on line ends
000000r 1               ; CONFIG_NO_LINE_EDITING			disable support for Microsoft-style "@", "_", BEL etc.
000000r 1               ; CONFIG_NO_POKE					don't support PEEK, POKE and WAIT
000000r 1               ; CONFIG_NO_READ_Y_IS_ZERO_HACK		don't do a very volatile trick that saves one byte
000000r 1               ; CONFIG_NULL						support for the NULL statement
000000r 1               ; CONFIG_PEEK_SAVE_LINNUM			preserve LINNUM on a PEEK
000000r 1               ; CONFIG_PRINTNULLS					whether PRINTNULLS does anything
000000r 1               ; CONFIG_PRINT_CR					print CR when line end reached
000000r 1               ; CONFIG_RAM						optimizations for RAM version of BASIC, only use on 1.x
000000r 1               ; CONFIG_ROR_WORKAROUND				use workaround for buggy 6502s from 1975/1976; not safe for CONFIG_SMALL!
000000r 1               ; CONFIG_SAFE_NAMENOTFOUND			check both bytes of the caller's address in NAMENOTFOUND
000000r 1               ; CONFIG_SCRTCH_ORDER				where in the init code to call SCRTCH
000000r 1               ; CONFIG_SMALL						use 6 digit FP instead of 9 digit, use 2 character error messages, don't have GET
000000r 1               ;
000000r 1               ; Changing symbol definitions can alter an existing base configuration, but it not guaranteed to assemble
000000r 1               ; or work correctly.
000000r 1               ;
000000r 1               ; Credits:
000000r 1               ; * main work by Michael Steil
000000r 1               ; * function names and all uppercase comments taken from Bob Sander-Cederlof's excellent AppleSoft II disassembly:
000000r 1               ;   http://www.txbobsc.com/scsc/scdocumentor/
000000r 1               ; * Applesoft lite by Tom Greene http://cowgod.org/replica1/applesoft/ helped a lot, too.
000000r 1               ; * Thanks to Joe Zbicak for help with Intellision Keyboard BASIC
000000r 1               ; * This work is dedicated to the memory of my dear hacking pal Michael "acidity" Kollmann.
000000r 1               
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               .include "defines.s"
000000r 2               .if .def(cbmbasic1)
000000r 2               CBM1 := 1
000000r 2               .include "defines_cbm1.s"
000000r 2               .elseif .def(osi)
000000r 2               OSI := 1
000000r 2               .include "defines_osi.s"
000000r 3               ; configuration
000000r 3               CONFIG_11A := 1
000000r 3               
000000r 3               CONFIG_DATAFLG := 1
000000r 3               CONFIG_NULL := 1
000000r 3               CONFIG_PRINT_CR := 1 ; print CR when line end reached
000000r 3               CONFIG_SCRTCH_ORDER := 3
000000r 3               ;CONFIG_SMALL := 1
000000r 3               
000000r 3               
000000r 3               CRLF_1 := CR
000000r 3               CRLF_2 := LF
000000r 3               
000000r 3               ; zero page
000000r 3               ZP_START1 = $00
000000r 3               ZP_START2 = $0D
000000r 3               ZP_START3 = $5B
000000r 3               ZP_START4 = $65
000000r 3               
000000r 3               ; inputbuffer
000000r 3               ;INPUTBUFFER     := $0200
000000r 3               
000000r 3               ;extra ZP variables
000000r 3               USR             := $000A
000000r 3               
000000r 3               ; constants
000000r 3               STACK_TOP		:= $FC
000000r 3               SPACE_FOR_GOSUB := $33
000000r 3               NULL_MAX		:= $0A
000000r 3               WIDTH			:= 72
000000r 3               WIDTH2			:= 56
000000r 3               
000000r 3               ; memory layout
000000r 3               RAMSTART2		:= $0300
000000r 3               
000000r 3               ; magic memory locations
000000r 3               ;L0200           := $0200
000000r 3               
000000r 3               ; monitor functions
000000r 3               ;MONRDKEY        := $FFEB
000000r 3               ;MONCOUT         := $8002
000000r 3               ;MONISCNTC       := $FFF1
000000r 3               ;LOAD            := $FFF4
000000r 3               ;SAVE            := $FFF7
000000r 3               
000000r 2               .elseif .def(applesoft)
000000r 2               APPLE := 1
000000r 2               .include "defines_apple.s"
000000r 2               .elseif .def(kb9)
000000r 2               KIM := 1
000000r 2               .include "defines_kim.s"
000000r 2               .elseif .def(cbmbasic2)
000000r 2               CBM2 := 1
000000r 2               .include "defines_cbm2.s"
000000r 2               .elseif .def(kbdbasic)
000000r 2               KBD := 1
000000r 2               .include "defines_kbd.s"
000000r 2               .elseif .def(microtan)
000000r 2               MICROTAN := 1
000000r 2               .include "defines_microtan.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_2C
000000r 2               CONFIG_2B := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2B
000000r 2               CONFIG_2A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2A
000000r 2               CONFIG_2 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2
000000r 2               CONFIG_11A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11A
000000r 2               CONFIG_11 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11
000000r 2               CONFIG_10A := 1
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2               BYTES_FP		:= 4
000000r 2               .else
000000r 2               BYTES_FP		:= 5
000000r 2               .endif
000000r 2               
000000r 2               .ifndef BYTES_PER_ELEMENT
000000r 2               BYTES_PER_ELEMENT := BYTES_FP
000000r 2               .endif
000000r 2               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 2               MANTISSA_BYTES	:= BYTES_FP-1
000000r 2               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 2               FOR_STACK1		:= 2*BYTES_FP+5
000000r 2               FOR_STACK2		:= BYTES_FP+4
000000r 2               
000000r 2               .ifndef MAX_EXPON
000000r 2               MAX_EXPON = 10
000000r 2               .endif
000000r 2               
000000r 2               STACK           := $0100
000000r 2               
000000r 2               .ifdef INPUTBUFFER
000000r 2                 .if INPUTBUFFER >= $0100
000000r 2               CONFIG_NO_INPUTBUFFER_ZP := 1
000000r 2                 .endif
000000r 2                 .if INPUTBUFFER = $0200
000000r 2               CONFIG_INPUTBUFFER_0200 := 1
000000r 2                 .endif
000000r 2               .endif
000000r 2               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 2               
000000r 2               CR=13
000000r 2               LF=10
000000r 2               
000000r 2               .ifndef CRLF_1
000000r 2               CRLF_1 := CR
000000r 2               CRLF_2 := LF
000000r 2               .endif
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 1               .include "macros.s"
000000r 2               ; htasc - set the hi bit on the last byte of a string for termination
000000r 2               ; (by Tom Greene)
000000r 2               .macro htasc str
000000r 2               	.repeat	.strlen(str)-1,I
000000r 2               		.byte	.strat(str,I)
000000r 2               	.endrep
000000r 2               	.byte	.strat(str,.strlen(str)-1) | $80
000000r 2               .endmacro
000000r 2               
000000r 2               ; For every token, a byte gets put into segment "DUMMY".
000000r 2               ; This way, we count up with every token. The DUMMY segment
000000r 2               ; doesn't get linked into the binary.
000000r 2               .macro init_token_tables
000000r 2                       .segment "VECTORS"
000000r 2               TOKEN_ADDRESS_TABLE:
000000r 2                       .segment "KEYWORDS"
000000r 2               TOKEN_NAME_TABLE:
000000r 2               		.segment "DUMMY"
000000r 2               DUMMY_START:
000000r 2               .endmacro
000000r 2               
000000r 2               ; optionally define token symbol
000000r 2               ; count up token number
000000r 2               .macro define_token token
000000r 2                       .segment "DUMMY"
000000r 2               		.ifnblank token
000000r 2               			token := <(*-DUMMY_START)+$80
000000r 2               		.endif
000000r 2               		.res 1; count up in any case
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword, optionally define a token symbol
000000r 2               .macro keyword key, token
000000r 2               		.segment "KEYWORDS"
000000r 2               		htasc	key
000000r 2               		define_token token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address (RTS style),
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_rts key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.word	vec-1
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address,
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_addr key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.addr	vec
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               .macro count_tokens
000000r 2                       .segment "DUMMY"
000000r 2               		NUM_TOKENS := <(*-DUMMY_START)
000000r 2               .endmacro
000000r 2               
000000r 2               .macro init_error_table
000000r 2                       .segment "ERROR"
000000r 2               ERROR_MESSAGES:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro define_error error, msg
000000r 2                       .segment "ERROR"
000000r 2               		error := <(*-ERROR_MESSAGES)
000000r 2               		htasc msg
000000r 2               .endmacro
000000r 2               
000000r 2               ;---------------------------------------------
000000r 2               ; set the MSB of every byte of a string
000000r 2               .macro asc80 str
000000r 2               	.repeat	.strlen(str),I
000000r 2               		.byte	.strat(str,I)+$80
000000r 2               	.endrep
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 1               .include "zeropage.s"
000000r 2               
000000r 2               .feature org_per_seg
000000r 2               .zeropage
000000r 2               
000000r 2               .org ZP_START1
000000  2               
000000  2               GORESTART:
000000  2  xx xx xx     	.res 3
000003  2               GOSTROUT:
000003  2  xx xx xx     	.res 3
000006  2               GOAYINT:
000006  2  xx xx        	.res 2
000008  2               GOGIVEAYF:
000008  2  xx xx        	.res 2
00000A  2               
00000A  2               .org ZP_START2
00000D  2               Z15:
00000D  2  xx           	.res 1
00000E  2               .ifndef POSX; allow override
00000E  2               POSX:
00000E  2               .endif
00000E  2  xx           	.res 1
00000F  2               .ifndef Z17; allow override
00000F  2               Z17:
00000F  2               .endif
00000F  2  xx           	.res 1
000010  2               .ifndef Z18; allow override
000010  2               Z18:
000010  2               .endif
000010  2  xx           	.res 1
000011  2               LINNUM:
000011  2               .ifndef TXPSV; allow override
000011  2               TXPSV:
000011  2               .endif
000011  2  xx xx        	.res 2
000013  2               .ifndef INPUTBUFFER; allow override
000013  2               INPUTBUFFER:
000013  2               .endif
000013  2               
000013  2               .org ZP_START3
00005B  2               
00005B  2               CHARAC:
00005B  2  xx           	.res 1
00005C  2               ENDCHR:
00005C  2  xx           	.res 1
00005D  2               EOLPNTR:
00005D  2  xx           	.res 1
00005E  2               DIMFLG:
00005E  2  xx           	.res 1
00005F  2               VALTYP:
00005F  2               .ifdef CONFIG_SMALL
00005F  2               	.res 1
00005F  2               .else
00005F  2  xx xx        	.res 2
000061  2               .endif
000061  2               DATAFLG:
000061  2  xx           	.res 1
000062  2               SUBFLG:
000062  2  xx           	.res 1
000063  2               INPUTFLG:
000063  2  xx           	.res 1
000064  2               CPRMASK:
000064  2  xx           	.res 1
000065  2               Z14:
000065  2  xx           	.res 1
000066  2               
000066  2               .org ZP_START4
000065  2               
000065  2               TEMPPT:
000065  2  xx           	.res 1
000066  2               LASTPT:
000066  2  xx xx        	.res 2
000068  2               TEMPST:
000068  2  xx xx xx xx  	.res 9
00006C  2  xx xx xx xx  
000070  2  xx           
000071  2               INDEX:
000071  2  xx xx        	.res 2
000073  2               DEST:
000073  2  xx xx        	.res 2
000075  2               RESULT:
000075  2  xx xx xx xx  	.res BYTES_FP
000079  2  xx           
00007A  2               RESULT_LAST = RESULT + BYTES_FP-1
00007A  2               TXTTAB:
00007A  2  xx xx        	.res 2
00007C  2               VARTAB:
00007C  2  xx xx        	.res 2
00007E  2               ARYTAB:
00007E  2  xx xx        	.res 2
000080  2               STREND:
000080  2  xx xx        	.res 2
000082  2               FRETOP:
000082  2  xx xx        	.res 2
000084  2               FRESPC:
000084  2  xx xx        	.res 2
000086  2               MEMSIZ:
000086  2  xx xx        	.res 2
000088  2               CURLIN:
000088  2  xx xx        	.res 2
00008A  2               OLDLIN:
00008A  2  xx xx        	.res 2
00008C  2               OLDTEXT:
00008C  2  xx xx        	.res 2
00008E  2               Z8C:
00008E  2  xx xx        	.res 2
000090  2               DATPTR:
000090  2  xx xx        	.res 2
000092  2               INPTR:
000092  2  xx xx        	.res 2
000094  2               VARNAM:
000094  2  xx xx        	.res 2
000096  2               VARPNT:
000096  2  xx xx        	.res 2
000098  2               FORPNT:
000098  2  xx xx        	.res 2
00009A  2               LASTOP:
00009A  2  xx xx        	.res 2
00009C  2               CPRTYP:
00009C  2  xx           	.res 1
00009D  2               FNCNAM:
00009D  2               TEMP3:
00009D  2  xx xx        	.res 2
00009F  2               DSCPTR:
00009F  2               .ifdef CONFIG_SMALL
00009F  2               		.res 2
00009F  2               .else
00009F  2  xx xx xx     		.res 3
0000A2  2               .endif
0000A2  2               DSCLEN:
0000A2  2  xx xx        	.res 2
0000A4  2               .ifndef JMPADRS ; allow override
0000A4  2               JMPADRS			:= DSCLEN + 1
0000A4  2               .endif
0000A4  2               Z52:
0000A4  2  xx           	.res 1
0000A5  2               ARGEXTENSION:
0000A5  2               .ifndef CONFIG_SMALL
0000A5  2  xx           	.res 1
0000A6  2               .endif
0000A6  2               TEMP1:
0000A6  2  xx           	.res 1
0000A7  2               HIGHDS:
0000A7  2  xx xx        	.res 2
0000A9  2               HIGHTR:
0000A9  2  xx xx        	.res 2
0000AB  2               .ifndef CONFIG_SMALL
0000AB  2               TEMP2:
0000AB  2  xx           	.res 1
0000AC  2               .endif
0000AC  2               INDX:
0000AC  2               TMPEXP:
0000AC  2               .ifdef CONFIG_SMALL
0000AC  2               TEMP2:
0000AC  2               .endif
0000AC  2  xx           	.res 1
0000AD  2               EXPON:
0000AD  2  xx           	.res 1
0000AE  2               LOWTR:
0000AE  2               .ifndef LOWTRX ; allow override
0000AE  2               LOWTRX:
0000AE  2               .endif
0000AE  2  xx           	.res 1
0000AF  2               EXPSGN:
0000AF  2  xx           	.res 1
0000B0  2               FAC:
0000B0  2  xx xx xx xx  	.res BYTES_FP
0000B4  2  xx           
0000B5  2               FAC_LAST = FAC + BYTES_FP-1
0000B5  2               FACSIGN:
0000B5  2  xx           	.res 1
0000B6  2               SERLEN:
0000B6  2  xx           	.res 1
0000B7  2               SHIFTSIGNEXT:
0000B7  2  xx           	.res 1
0000B8  2               ARG:
0000B8  2  xx xx xx xx  	.res BYTES_FP
0000BC  2  xx           
0000BD  2               ARG_LAST = ARG + BYTES_FP-1
0000BD  2               ARGSIGN:
0000BD  2  xx           	.res 1
0000BE  2               STRNG1:
0000BE  2  xx xx        	.res 2
0000C0  2               SGNCPR = STRNG1
0000C0  2               FACEXTENSION = STRNG1+1
0000C0  2               STRNG2:
0000C0  2  xx xx        	.res 2
0000C2  2               CHRGET:
0000C2  2               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
0000C2  2               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
0000C2  2               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
0000C2  2               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
0000C2  2               
0000C2  2               
0000C2  2               
0000C2  1               
0000C2  1               .include "header.s"
0000C2  2               		.segment "HEADER"
000000r 2               .ifdef KBD
000000r 2                       jmp     LE68C
000000r 2                       .byte   $00,$13,$56
000000r 2               .endif
000000r 2               
000000r 1               .include "token.s"
000000r 2               		init_token_tables
000000r 2               
000000r 2  rr rr 45 4E  		keyword_rts "END", END
000004r 2  C4 xx        
000001r 2  rr rr 46 4F  		keyword_rts "FOR", FOR
000005r 2  D2 xx        
000002r 2  rr rr 4E 45  		keyword_rts "NEXT", NEXT
000006r 2  58 D4 xx     
000003r 2  rr rr 44 41  		keyword_rts "DATA", DATA
000007r 2  54 C1 xx     
000004r 2               .ifdef CONFIG_FILE
000004r 2               		keyword_rts "INPUT#", INPUTH
000004r 2               .endif
000004r 2  rr rr 49 4E  		keyword_rts "INPUT", INPUT
000008r 2  50 55 D4 xx  
000005r 2  rr rr 44 49  		keyword_rts "DIM", DIM
000009r 2  CD xx        
000006r 2  rr rr 52 45  		keyword_rts "READ", READ
00000Ar 2  41 C4 xx     
000007r 2               .ifdef APPLE
000007r 2               		keyword_rts "PLT", PLT
000007r 2               .else
000007r 2  rr rr 4C 45  		keyword_rts "LET", LET
00000Br 2  D4 xx        
000008r 2               .endif
000008r 2  rr rr 47 4F  		keyword_rts "GOTO", GOTO, TOKEN_GOTO
00000Cr 2  54 CF xx     
000009r 2  rr rr 52 55  		keyword_rts "RUN", RUN
00000Dr 2  CE xx        
00000Ar 2  rr rr 49 C6  		keyword_rts "IF", IF
00000Er 2  xx           
00000Br 2  rr rr 52 45  		keyword_rts "RESTORE", RESTORE
00000Fr 2  53 54 4F 52  
000013r 2  C5 xx        
00000Cr 2  rr rr 47 4F  		keyword_rts "GOSUB", GOSUB, TOKEN_GOSUB
000010r 2  53 55 C2 xx  
00000Dr 2  rr rr 52 45  		keyword_rts "RETURN", POP
000011r 2  54 55 52 CE  
000015r 2  xx           
00000Er 2               .ifdef APPLE
00000Er 2               		keyword_rts "TEX", TEX, TOKEN_REM
00000Er 2               .else
00000Er 2  rr rr 52 45  		keyword_rts "REM", REM, TOKEN_REM
000012r 2  CD xx        
00000Fr 2               .endif
00000Fr 2  rr rr 53 54  		keyword_rts "STOP", STOP
000013r 2  4F D0 xx     
000010r 2  rr rr 4F CE  		keyword_rts "ON", ON
000014r 2  xx           
000011r 2               .ifdef CONFIG_NULL
000011r 2  rr rr 4E 55  		keyword_rts "NULL", NULL
000015r 2  4C CC xx     
000012r 2               .endif
000012r 2               .ifdef KBD
000012r 2               		keyword_rts "PLOD", PLOD
000012r 2               		keyword_rts "PSAV", PSAV
000012r 2               		keyword_rts "VLOD", VLOD
000012r 2               		keyword_rts "VSAV", VSAV
000012r 2               .endif
000012r 2               .ifndef CONFIG_NO_POKE
000012r 2  rr rr 57 41  		keyword_rts "WAIT", WAIT
000016r 2  49 D4 xx     
000013r 2               .endif
000013r 2               .ifndef KBD
000013r 2  rr rr 4C 4F  		keyword_rts "LOAD", LOAD
000017r 2  41 C4 xx     
000014r 2  rr rr 53 41  		keyword_rts "SAVE", SAVE
000018r 2  56 C5 xx     
000015r 2               .endif
000015r 2               .ifdef CONFIG_CBM_ALL
000015r 2               		keyword_rts "VERIFY", VERIFY
000015r 2               .endif
000015r 2  rr rr 44 45  		keyword_rts "DEF", DEF
000019r 2  C6 xx        
000016r 2               .ifdef KBD
000016r 2               		keyword_rts "SLOD", SLOD
000016r 2               .endif
000016r 2               .ifndef CONFIG_NO_POKE
000016r 2  rr rr 50 4F  		keyword_rts "POKE", POKE
00001Ar 2  4B C5 xx     
000017r 2               .endif
000017r 2               .ifdef CONFIG_FILE
000017r 2               		keyword_rts "PRINT#", PRINTH
000017r 2               .endif
000017r 2  rr rr 50 52  		keyword_rts "PRINT", PRINT, TOKEN_PRINT
00001Br 2  49 4E D4 xx  
000018r 2  rr rr 43 4F  		keyword_rts "CONT", CONT
00001Cr 2  4E D4 xx     
000019r 2  rr rr 4C 49  		keyword_rts "LIST", LIST
00001Dr 2  53 D4 xx     
00001Ar 2               .ifdef CONFIG_CBM_ALL
00001Ar 2               		keyword_rts "CLR", CLEAR
00001Ar 2               .else
00001Ar 2  rr rr 43 4C  		keyword_rts "CLEAR", CLEAR
00001Er 2  45 41 D2 xx  
00001Br 2               .endif
00001Br 2               .ifdef CONFIG_FILE
00001Br 2               		keyword_rts "CMD", CMD
00001Br 2               		keyword_rts "SYS", SYS
00001Br 2               		keyword_rts "OPEN", OPEN
00001Br 2               		keyword_rts "CLOSE", CLOSE
00001Br 2               .endif
00001Br 2               .ifndef CONFIG_SMALL
00001Br 2  rr rr 47 45  		keyword_rts "GET", GET
00001Fr 2  D4 xx        
00001Cr 2               .endif
00001Cr 2               .ifdef KBD
00001Cr 2               		keyword_rts "PRT", PRT
00001Cr 2               .endif
00001Cr 2  rr rr 4E 45  		keyword_rts "NEW", NEW
000020r 2  D7 xx        
00001Dr 2               
00001Dr 2               		count_tokens
00001Dr 2               
00001Dr 2  54 41 42 A8  		keyword	"TAB(", TOKEN_TAB
000021r 2  xx           
00001Er 2  54 CF xx     		keyword	"TO", TOKEN_TO
00001Fr 2  46 CE xx     		keyword	"FN", TOKEN_FN
000020r 2  53 50 43 A8  		keyword	"SPC(", TOKEN_SPC
000024r 2  xx           
000021r 2  54 48 45 CE  		keyword	"THEN", TOKEN_THEN
000025r 2  xx           
000022r 2  4E 4F D4 xx  		keyword	"NOT", TOKEN_NOT
000023r 2  53 54 45 D0  		keyword	"STEP", TOKEN_STEP
000027r 2  xx           
000024r 2  AB xx        		keyword	"+", TOKEN_PLUS
000025r 2  AD xx        		keyword	"-", TOKEN_MINUS
000026r 2  AA xx        		keyword	"*"
000027r 2  AF xx        		keyword	"/"
000028r 2               .ifdef KBD
000028r 2               		keyword	"#"
000028r 2               .else
000028r 2  DE xx        		keyword	"^"
000029r 2               .endif
000029r 2  41 4E C4 xx  		keyword	"AND"
00002Ar 2  4F D2 xx     		keyword	"OR"
00002Br 2  BE xx        		keyword	">", TOKEN_GREATER
00002Cr 2  BD xx        		keyword	"=", TOKEN_EQUAL
00002Dr 2  BC xx        		keyword	"<"
00002Er 2               
00002Er 2                       .segment "VECTORS"
00003Ar 2               UNFNC:
00003Ar 2               
00003Ar 2  rr rr 53 47  		keyword_addr "SGN", SGN, TOKEN_SGN
00003Er 2  CE xx        
00002Fr 2  rr rr 49 4E  		keyword_addr "INT", INT
000033r 2  D4 xx        
000030r 2  rr rr 41 42  		keyword_addr "ABS", ABS
000034r 2  D3 xx        
000031r 2               .ifdef KBD
000031r 2               		keyword_addr "VER", VER
000031r 2               .endif
000031r 2               .ifndef CONFIG_NO_POKE
000031r 2                 .ifdef CONFIG_RAM
000031r 2               		keyword_addr "USR", IQERR
000031r 2                 .else
000031r 2  0A 00 55 53  		keyword_addr "USR", USR
000035r 2  D2 xx        
000032r 2                 .endif
000032r 2               .endif
000032r 2  rr rr 46 52  		keyword_addr "FRE", FRE
000036r 2  C5 xx        
000033r 2  rr rr 50 4F  		keyword_addr "POS", POS
000037r 2  D3 xx        
000034r 2  rr rr 53 51  		keyword_addr "SQR", SQR
000038r 2  D2 xx        
000035r 2  rr rr 52 4E  		keyword_addr "RND", RND
000039r 2  C4 xx        
000036r 2  rr rr 4C 4F  		keyword_addr "LOG", LOG
00003Ar 2  C7 xx        
000037r 2  rr rr 45 58  		keyword_addr "EXP", EXP
00003Br 2  D0 xx        
000038r 2               .segment "VECTORS"
00004Er 2               UNFNC_COS:
00004Er 2  rr rr 43 4F  		keyword_addr "COS", COS
000052r 2  D3 xx        
000039r 2               .segment "VECTORS"
000050r 2               UNFNC_SIN:
000050r 2  rr rr 53 49  		keyword_addr "SIN", SIN
000054r 2  CE xx        
00003Ar 2               .segment "VECTORS"
000052r 2               UNFNC_TAN:
000052r 2  rr rr 54 41  		keyword_addr "TAN", TAN
000056r 2  CE xx        
00003Br 2               .segment "VECTORS"
000054r 2               UNFNC_ATN:
000054r 2  rr rr 41 54  		keyword_addr "ATN", ATN
000058r 2  CE xx        
00003Cr 2               .ifdef KBD
00003Cr 2               		keyword_addr "GETC", GETC
00003Cr 2               .endif
00003Cr 2               .ifndef CONFIG_NO_POKE
00003Cr 2  rr rr 50 45  		keyword_addr "PEEK", PEEK
000040r 2  45 CB xx     
00003Dr 2               .endif
00003Dr 2  rr rr 4C 45  		keyword_addr "LEN", LEN
000041r 2  CE xx        
00003Er 2  rr rr 53 54  		keyword_addr "STR$", STR
000042r 2  52 A4 xx     
00003Fr 2  rr rr 56 41  		keyword_addr "VAL", VAL
000043r 2  CC xx        
000040r 2  rr rr 41 53  		keyword_addr "ASC", ASC
000044r 2  C3 xx        
000041r 2  rr rr 43 48  		keyword_addr "CHR$", CHRSTR
000045r 2  52 A4 xx     
000042r 2  rr rr 4C 45  		keyword_addr "LEFT$", LEFTSTR, TOKEN_LEFTSTR
000046r 2  46 54 A4 xx  
000043r 2  rr rr 52 49  		keyword_addr "RIGHT$", RIGHTSTR
000047r 2  47 48 54 A4  
00004Br 2  xx           
000044r 2  rr rr 4D 49  		keyword_addr "MID$", MIDSTR
000048r 2  44 A4 xx     
000045r 2               .ifdef CONFIG_2
000045r 2               		keyword	"GO", TOKEN_GO
000045r 2               .endif
000045r 2                       .segment "KEYWORDS"
0000E2r 2  00           		.byte   0
0000E3r 2               
0000E3r 2                       .segment "VECTORS"
000068r 2               MATHTBL:
000068r 2  79                   .byte   $79
000069r 2  rr rr                .word   FADDT-1
00006Br 2  79                   .byte   $79
00006Cr 2  rr rr                .word   FSUBT-1
00006Er 2  7B                   .byte   $7B
00006Fr 2  rr rr                .word   FMULTT-1
000071r 2  7B                   .byte   $7B
000072r 2  rr rr                .word   FDIVT-1
000074r 2  7F                   .byte   $7F
000075r 2  rr rr                .word   FPWRT-1
000077r 2  50                   .byte   $50
000078r 2  rr rr                .word   TAND-1
00007Ar 2  46                   .byte   $46
00007Br 2  rr rr                .word   OR-1
00007Dr 2  7D                   .byte   $7D
00007Er 2  rr rr                .word   NEGOP-1
000080r 2  5A                   .byte   $5A
000081r 2  rr rr                .word   EQUOP-1
000083r 2  64                   .byte   $64
000084r 2  rr rr                .word   RELOPS-1
000086r 2               
000086r 1               .include "error.s"
000086r 2               init_error_table
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2               define_error ERR_NOFOR, "NF"
000000r 2               define_error ERR_SYNTAX, "SN"
000000r 2               define_error ERR_NOGOSUB, "RG"
000000r 2               define_error ERR_NODATA, "OD"
000000r 2               define_error ERR_ILLQTY, "FC"
000000r 2               define_error ERR_OVERFLOW, "OV"
000000r 2               define_error ERR_MEMFULL, "OM"
000000r 2               define_error ERR_UNDEFSTAT, "US"
000000r 2               define_error ERR_BADSUBS, "BS"
000000r 2               define_error ERR_REDIMD, "DD"
000000r 2               define_error ERR_ZERODIV, "/0"
000000r 2               define_error ERR_ILLDIR, "ID"
000000r 2               define_error ERR_BADTYPE, "TM"
000000r 2               define_error ERR_STRLONG, "LS"
000000r 2               define_error ERR_FRMCPX, "ST"
000000r 2               define_error ERR_CANTCONT, "CN"
000000r 2               define_error ERR_UNDEFFN, "UF"
000000r 2               .else
000000r 2  4E 45 58 54  define_error ERR_NOFOR, "NEXT WITHOUT FOR"
000004r 2  20 57 49 54  
000008r 2  48 4F 55 54  
000010r 2  53 59 4E 54  define_error ERR_SYNTAX, "SYNTAX"
000014r 2  41 D8        
000016r 2  52 45 54 55  define_error ERR_NOGOSUB, "RETURN WITHOUT GOSUB"
00001Ar 2  52 4E 20 57  
00001Er 2  49 54 48 4F  
00002Ar 2  4F 55 54 20  define_error ERR_NODATA, "OUT OF DATA"
00002Er 2  4F 46 20 44  
000032r 2  41 54 C1     
000035r 2  49 4C 4C 45  define_error ERR_ILLQTY, "ILLEGAL QUANTITY"
000039r 2  47 41 4C 20  
00003Dr 2  51 55 41 4E  
000045r 2               .ifdef CBM1
000045r 2               	.byte 0,0,0,0,0
000045r 2               .endif
000045r 2  4F 56 45 52  define_error ERR_OVERFLOW, "OVERFLOW"
000049r 2  46 4C 4F D7  
00004Dr 2  4F 55 54 20  define_error ERR_MEMFULL, "OUT OF MEMORY"
000051r 2  4F 46 20 4D  
000055r 2  45 4D 4F 52  
00005Ar 2  55 4E 44 45  define_error ERR_UNDEFSTAT, "UNDEF'D STATEMENT"
00005Er 2  46 27 44 20  
000062r 2  53 54 41 54  
00006Br 2  42 41 44 20  define_error ERR_BADSUBS, "BAD SUBSCRIPT"
00006Fr 2  53 55 42 53  
000073r 2  43 52 49 50  
000078r 2  52 45 44 49  define_error ERR_REDIMD, "REDIM'D ARRAY"
00007Cr 2  4D 27 44 20  
000080r 2  41 52 52 41  
000085r 2  44 49 56 49  define_error ERR_ZERODIV, "DIVISION BY ZERO"
000089r 2  53 49 4F 4E  
00008Dr 2  20 42 59 20  
000095r 2  49 4C 4C 45  define_error ERR_ILLDIR, "ILLEGAL DIRECT"
000099r 2  47 41 4C 20  
00009Dr 2  44 49 52 45  
0000A3r 2  54 59 50 45  define_error ERR_BADTYPE, "TYPE MISMATCH"
0000A7r 2  20 4D 49 53  
0000ABr 2  4D 41 54 43  
0000B0r 2  53 54 52 49  define_error ERR_STRLONG, "STRING TOO LONG"
0000B4r 2  4E 47 20 54  
0000B8r 2  4F 4F 20 4C  
0000BFr 2               .ifdef CONFIG_FILE
0000BFr 2                 .ifdef CBM1
0000BFr 2               define_error ERR_BADDATA, "BAD DATA"
0000BFr 2                 .else
0000BFr 2               define_error ERR_BADDATA, "FILE DATA"
0000BFr 2                 .endif
0000BFr 2               .endif
0000BFr 2  46 4F 52 4D  define_error ERR_FRMCPX, "FORMULA TOO COMPLEX"
0000C3r 2  55 4C 41 20  
0000C7r 2  54 4F 4F 20  
0000D2r 2  43 41 4E 27  define_error ERR_CANTCONT, "CAN'T CONTINUE"
0000D6r 2  54 20 43 4F  
0000DAr 2  4E 54 49 4E  
0000E0r 2  55 4E 44 45  define_error ERR_UNDEFFN, "UNDEF'D FUNCTION"
0000E4r 2  46 27 44 20  
0000E8r 2  46 55 4E 43  
0000F0r 2               .endif
0000F0r 2               
0000F0r 1               .include "message.s"
0000F0r 2               ; global messages: "error", "in", "ready", "break"
0000F0r 2               
0000F0r 2               .segment "CODE"
000000r 2               
000000r 2               QT_ERROR:
000000r 2               .ifdef KBD
000000r 2                       .byte   " err"
000000r 2               .else
000000r 2                 .ifdef APPLE
000000r 2                       .byte   " ERR"
000000r 2               		.byte	$07,$07
000000r 2                 .else
000000r 2  20 45 52 52          .byte   " ERROR"
000004r 2  4F 52        
000006r 2                 .endif
000006r 2               .endif
000006r 2  00                   .byte   0
000007r 2               
000007r 2               .ifndef KBD
000007r 2               QT_IN:
000007r 2  20 49 4E 20          .byte   " IN "
00000Br 2  00                   .byte   $00
00000Cr 2               .endif
00000Cr 2               
00000Cr 2               .ifdef KBD
00000Cr 2               		.byte	$54,$D2 ; ???
00000Cr 2               OKPRT:
00000Cr 2               		jsr     PRIMM
00000Cr 2                       .byte   CR,CR,">>",CR,LF
00000Cr 2               		.byte	0
00000Cr 2                       rts
00000Cr 2                       nop
00000Cr 2               .else
00000Cr 2               QT_OK:
00000Cr 2                 .ifdef CONFIG_CBM_ALL
00000Cr 2               		.byte   CR,LF,"READY.",CR,LF
00000Cr 2                 .else
00000Cr 2                   .ifdef APPLE
00000Cr 2               		; binary patch!
00000Cr 2                       .byte   CR,0,0,"K",CR,LF
00000Cr 2                   .else
00000Cr 2  0D 0A 4F 4B  		.byte   CR,LF,"OK",CR,LF
000010r 2  0D 0A        
000012r 2                   .endif
000012r 2                 .endif
000012r 2  00           		.byte	0
000013r 2               .endif
000013r 2               
000013r 2               QT_BREAK:
000013r 2               
000013r 2               .ifdef KBD
000013r 2               		.byte	CR,LF," Brk"
000013r 2                       .byte   0
000013r 2                       .byte   $54,$D0 ; ???
000013r 2               .elseif .def(MICROTAN)
000013r 2               		.byte CR,LF," BREAK"
000013r 2                       .byte   0
000013r 2               .else
000013r 2  0D 0A 42 52  		.byte CR,LF,"BREAK"
000017r 2  45 41 4B     
00001Ar 2  00                   .byte   0
00001Br 2               .endif
00001Br 2               
00001Br 1               .include "memory.s"
00001Br 2               ; generic stack and memory management code
00001Br 2               ; this code is identical across all versions of
00001Br 2               ; BASIC
00001Br 2               
00001Br 2               .segment "CODE"
00001Br 2               
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00001Br 2               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00001Br 2               ;
00001Br 2               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00001Br 2               ; 	= $XXFF IF CALLED FROM "RETURN"
00001Br 2               ; 	<<< BUG: SHOULD BE $FFXX >>>
00001Br 2               ;
00001Br 2               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00001Br 2               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00001Br 2               ;
00001Br 2               ;	.EQ. IF FOUND
00001Br 2               ;	(X) = STACK PNTR OF FRAME FOUND
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               GTFORPNT:
00001Br 2  BA                   tsx
00001Cr 2  E8                   inx
00001Dr 2  E8                   inx
00001Er 2  E8                   inx
00001Fr 2  E8                   inx
000020r 2               L2279:
000020r 2  BD 01 01             lda     STACK+1,x
000023r 2  C9 81                cmp     #$81
000025r 2  D0 21                bne     L22A1
000027r 2  A5 99                lda     FORPNT+1
000029r 2  D0 0A                bne     L228E
00002Br 2  BD 02 01             lda     STACK+2,x
00002Er 2  85 98                sta     FORPNT
000030r 2  BD 03 01             lda     STACK+3,x
000033r 2  85 99                sta     FORPNT+1
000035r 2               L228E:
000035r 2  DD 03 01             cmp     STACK+3,x
000038r 2  D0 07                bne     L229A
00003Ar 2  A5 98                lda     FORPNT
00003Cr 2  DD 02 01             cmp     STACK+2,x
00003Fr 2  F0 07                beq     L22A1
000041r 2               L229A:
000041r 2  8A                   txa
000042r 2  18                   clc
000043r 2  69 12                adc     #BYTES_PER_FRAME
000045r 2  AA                   tax
000046r 2  D0 D8                bne     L2279
000048r 2               L22A1:
000048r 2  60                   rts
000049r 2               
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               ; MOVE BLOCK OF MEMORY UP
000049r 2               ;
000049r 2               ; ON ENTRY:
000049r 2               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
000049r 2               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
000049r 2               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               BLTU:
000049r 2  20 rr rr             jsr     REASON
00004Cr 2  85 80                sta     STREND
00004Er 2  84 81                sty     STREND+1
000050r 2               BLTU2:
000050r 2  38                   sec
000051r 2  A5 A9                lda     HIGHTR
000053r 2  E5 AE                sbc     LOWTR
000055r 2  85 71                sta     INDEX
000057r 2  A8                   tay
000058r 2  A5 AA                lda     HIGHTR+1
00005Ar 2  E5 AF                sbc     LOWTR+1
00005Cr 2  AA                   tax
00005Dr 2  E8                   inx
00005Er 2  98                   tya
00005Fr 2  F0 23                beq     L22DD
000061r 2  A5 A9                lda     HIGHTR
000063r 2  38                   sec
000064r 2  E5 71                sbc     INDEX
000066r 2  85 A9                sta     HIGHTR
000068r 2  B0 03                bcs     L22C6
00006Ar 2  C6 AA                dec     HIGHTR+1
00006Cr 2  38                   sec
00006Dr 2               L22C6:
00006Dr 2  A5 A7                lda     HIGHDS
00006Fr 2  E5 71                sbc     INDEX
000071r 2  85 A7                sta     HIGHDS
000073r 2  B0 08                bcs     L22D6
000075r 2  C6 A8                dec     HIGHDS+1
000077r 2  90 04                bcc     L22D6
000079r 2               L22D2:
000079r 2  B1 A9                lda     (HIGHTR),y
00007Br 2  91 A7                sta     (HIGHDS),y
00007Dr 2               L22D6:
00007Dr 2  88                   dey
00007Er 2  D0 F9                bne     L22D2
000080r 2  B1 A9                lda     (HIGHTR),y
000082r 2  91 A7                sta     (HIGHDS),y
000084r 2               L22DD:
000084r 2  C6 AA                dec     HIGHTR+1
000086r 2  C6 A8                dec     HIGHDS+1
000088r 2  CA                   dex
000089r 2  D0 F2                bne     L22D6
00008Br 2  60                   rts
00008Cr 2               
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00008Cr 2               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               CHKMEM:
00008Cr 2  0A                   asl     a
00008Dr 2  69 33                adc     #SPACE_FOR_GOSUB
00008Fr 2  B0 35                bcs     MEMERR
000091r 2  85 71                sta     INDEX
000093r 2  BA                   tsx
000094r 2  E4 71                cpx     INDEX
000096r 2  90 2E                bcc     MEMERR
000098r 2  60                   rts
000099r 2               
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
000099r 2               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               REASON:
000099r 2  C4 83                cpy     FRETOP+1
00009Br 2  90 28                bcc     L231E
00009Dr 2  D0 04                bne     L22FC
00009Fr 2  C5 82                cmp     FRETOP
0000A1r 2  90 22                bcc     L231E
0000A3r 2               L22FC:
0000A3r 2  48                   pha
0000A4r 2  A2 09                ldx     #FAC-TEMP1-1
0000A6r 2  98                   tya
0000A7r 2               L2300:
0000A7r 2  48                   pha
0000A8r 2  B5 A6                lda     TEMP1,x
0000AAr 2  CA                   dex
0000ABr 2  10 FA                bpl     L2300
0000ADr 2  20 rr rr             jsr     GARBAG
0000B0r 2  A2 F7                ldx     #<(TEMP1-FAC+1)
0000B2r 2               L230B:
0000B2r 2  68                   pla
0000B3r 2  95 B0                sta     FAC,x
0000B5r 2  E8                   inx
0000B6r 2  30 FA                bmi     L230B
0000B8r 2  68                   pla
0000B9r 2  A8                   tay
0000BAr 2  68                   pla
0000BBr 2  C4 83                cpy     FRETOP+1
0000BDr 2  90 06                bcc     L231E
0000BFr 2  D0 05                bne     MEMERR
0000C1r 2  C5 82                cmp     FRETOP
0000C3r 2  B0 01                bcs     MEMERR
0000C5r 2               L231E:
0000C5r 2  60                   rts
0000C6r 2               
0000C6r 1               .include "program.s"
0000C6r 2               ; error
0000C6r 2               ; line input, line editing
0000C6r 2               ; tokenize
0000C6r 2               ; detokenize
0000C6r 2               ; BASIC program memory management
0000C6r 2               
0000C6r 2               ; MICROTAN has some nonstandard extension to LIST here
0000C6r 2               
0000C6r 2               .segment "CODE"
0000C6r 2               
0000C6r 2               MEMERR:
0000C6r 2  A2 4D                ldx     #ERR_MEMFULL
0000C8r 2               
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ; HANDLE AN ERROR
0000C8r 2               ;
0000C8r 2               ; (X)=OFFSET IN ERROR MESSAGE TABLE
0000C8r 2               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
0000C8r 2               ; (CURLIN+1) = $FF IF IN DIRECT MODE
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ERROR:
0000C8r 2  46 65                lsr     Z14
0000CAr 2               .ifdef CONFIG_FILE
0000CAr 2                       lda     CURDVC    ; output
0000CAr 2                       beq     LC366     ; is screen
0000CAr 2                       jsr     CLRCH     ; otherwise redirect output back to screen
0000CAr 2                       lda     #$00
0000CAr 2                       sta     CURDVC
0000CAr 2               LC366:
0000CAr 2               .endif
0000CAr 2  20 rr rr             jsr     CRDO
0000CDr 2  20 rr rr             jsr     OUTQUES
0000D0r 2               L2329:
0000D0r 2  BD rr rr             lda     ERROR_MESSAGES,x
0000D3r 2               .ifndef CONFIG_SMALL
0000D3r 2  48                   pha
0000D4r 2  29 7F                and     #$7F
0000D6r 2               .endif
0000D6r 2  20 rr rr             jsr     OUTDO
0000D9r 2               .ifdef CONFIG_SMALL
0000D9r 2                       lda     ERROR_MESSAGES+1,x
0000D9r 2                 .ifdef KBD
0000D9r 2                       and     #$7F
0000D9r 2                 .endif
0000D9r 2                       jsr     OUTDO
0000D9r 2               .else
0000D9r 2  E8                   inx
0000DAr 2  68                   pla
0000DBr 2  10 F3                bpl     L2329
0000DDr 2               .endif
0000DDr 2  20 rr rr             jsr     STKINI
0000E0r 2  A9 rr                lda     #<QT_ERROR
0000E2r 2  A0 rr                ldy     #>QT_ERROR
0000E4r 2               
0000E4r 2               ; ----------------------------------------------------------------------------
0000E4r 2               ; PRINT STRING AT (Y,A)
0000E4r 2               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
0000E4r 2               ; FALL INTO WARM RESTART
0000E4r 2               ; ----------------------------------------------------------------------------
0000E4r 2               PRINT_ERROR_LINNUM:
0000E4r 2  20 rr rr             jsr     STROUT
0000E7r 2  A4 89                ldy     CURLIN+1
0000E9r 2  C8                   iny
0000EAr 2  F0 03                beq     RESTART
0000ECr 2  20 rr rr             jsr     INPRT
0000EFr 2               
0000EFr 2               ; ----------------------------------------------------------------------------
0000EFr 2               ; WARM RESTART ENTRY
0000EFr 2               ; ----------------------------------------------------------------------------
0000EFr 2               RESTART:
0000EFr 2               .ifdef KBD
0000EFr 2                       jsr     CRDO
0000EFr 2                       nop
0000EFr 2               L2351X:
0000EFr 2                       jsr     OKPRT
0000EFr 2               L2351:
0000EFr 2                       jsr     INLIN
0000EFr 2               LE28E:
0000EFr 2                       bpl     RESTART
0000EFr 2               .else
0000EFr 2  46 65                lsr     Z14
0000F1r 2  A9 rr                lda     #<QT_OK
0000F3r 2  A0 rr                ldy     #>QT_OK
0000F5r 2                 .ifdef CONFIG_CBM_ALL
0000F5r 2                       jsr     STROUT
0000F5r 2                 .else
0000F5r 2  20 03 00             jsr     GOSTROUT
0000F8r 2                 .endif
0000F8r 2               L2351:
0000F8r 2  20 rr rr             jsr     INLIN
0000FBr 2               .endif
0000FBr 2  86 C9                stx     TXTPTR
0000FDr 2  84 CA                sty     TXTPTR+1
0000FFr 2  20 C2 00             jsr     CHRGET
000102r 2               .ifdef CONFIG_11
000102r 2               ; bug in pre-1.1: CHRGET sets Z on '\0'
000102r 2               ; and ':' - a line starting with ':' in
000102r 2               ; direct mode gets ignored
000102r 2  AA                   tax
000103r 2               .endif
000103r 2               .ifdef KBD
000103r 2                       beq     L2351X
000103r 2               .else
000103r 2  F0 F3                beq     L2351
000105r 2               .endif
000105r 2  A2 FF                ldx     #$FF
000107r 2  86 89                stx     CURLIN+1
000109r 2  90 06                bcc     NUMBERED_LINE
00010Br 2  20 rr rr             jsr     PARSE_INPUT_LINE
00010Er 2  4C rr rr             jmp     NEWSTT2
000111r 2               
000111r 2               ; ----------------------------------------------------------------------------
000111r 2               ; HANDLE NUMBERED LINE
000111r 2               ; ----------------------------------------------------------------------------
000111r 2               NUMBERED_LINE:
000111r 2  20 rr rr             jsr     LINGET
000114r 2  20 rr rr             jsr     PARSE_INPUT_LINE
000117r 2  84 5D                sty     EOLPNTR
000119r 2               .ifdef KBD
000119r 2                       jsr     FNDLIN2
000119r 2                       lda     JMPADRS+1
000119r 2                       sta     LOWTR
000119r 2                       sta     Z96
000119r 2                       lda     JMPADRS+2
000119r 2                       sta     LOWTR+1
000119r 2                       sta     Z96+1
000119r 2                       lda     LINNUM
000119r 2                       sta     L06FE
000119r 2                       lda     LINNUM+1
000119r 2                       sta     L06FE+1
000119r 2                       inc     LINNUM
000119r 2                       bne     LE2D2
000119r 2                       inc     LINNUM+1
000119r 2                       bne     LE2D2
000119r 2                       jmp     SYNERR
000119r 2               LE2D2:
000119r 2                       jsr     LF457
000119r 2                       ldx     #Z96
000119r 2                       jsr     CMPJMPADRS
000119r 2                       bcs     LE2FD
000119r 2               LE2DC:
000119r 2                       ldx     #$00
000119r 2                       lda     (JMPADRS+1,x)
000119r 2                       sta     (Z96,x)
000119r 2                       inc     JMPADRS+1
000119r 2                       bne     LE2E8
000119r 2                       inc     JMPADRS+2
000119r 2               LE2E8:
000119r 2                       inc     Z96
000119r 2                       bne     LE2EE
000119r 2                       inc     Z96+1
000119r 2               LE2EE:
000119r 2                       ldx     #VARTAB
000119r 2                       jsr     CMPJMPADRS
000119r 2                       bne     LE2DC
000119r 2                       lda     Z96
000119r 2                       sta     VARTAB
000119r 2                       lda     Z96+1
000119r 2                       sta     VARTAB+1
000119r 2               LE2FD:
000119r 2                       jsr     SETPTRS
000119r 2                       jsr     LE33D
000119r 2                       lda     INPUTBUFFER
000119r 2               LE306:
000119r 2                       beq     LE28E
000119r 2                       cmp     #$A5
000119r 2                       beq     LE306
000119r 2                       clc
000119r 2               .else
000119r 2  20 rr rr             jsr     FNDLIN
00011Cr 2  90 44                bcc     PUT_NEW_LINE
00011Er 2  A0 01                ldy     #$01
000120r 2  B1 AE                lda     (LOWTR),y
000122r 2  85 72                sta     INDEX+1
000124r 2  A5 7C                lda     VARTAB
000126r 2  85 71                sta     INDEX
000128r 2  A5 AF                lda     LOWTR+1
00012Ar 2  85 74                sta     DEST+1
00012Cr 2  A5 AE                lda     LOWTR
00012Er 2  88                   dey
00012Fr 2  F1 AE                sbc     (LOWTR),y
000131r 2  18                   clc
000132r 2  65 7C                adc     VARTAB
000134r 2  85 7C                sta     VARTAB
000136r 2  85 73                sta     DEST
000138r 2  A5 7D                lda     VARTAB+1
00013Ar 2  69 FF                adc     #$FF
00013Cr 2  85 7D                sta     VARTAB+1
00013Er 2  E5 AF                sbc     LOWTR+1
000140r 2  AA                   tax
000141r 2  38                   sec
000142r 2  A5 AE                lda     LOWTR
000144r 2  E5 7C                sbc     VARTAB
000146r 2  A8                   tay
000147r 2  B0 03                bcs     L23A5
000149r 2  E8                   inx
00014Ar 2  C6 74                dec     DEST+1
00014Cr 2               L23A5:
00014Cr 2  18                   clc
00014Dr 2  65 71                adc     INDEX
00014Fr 2  90 03                bcc     L23AD
000151r 2  C6 72                dec     INDEX+1
000153r 2  18                   clc
000154r 2               L23AD:
000154r 2  B1 71                lda     (INDEX),y
000156r 2  91 73                sta     (DEST),y
000158r 2  C8                   iny
000159r 2  D0 F9                bne     L23AD
00015Br 2  E6 72                inc     INDEX+1
00015Dr 2  E6 74                inc     DEST+1
00015Fr 2  CA                   dex
000160r 2  D0 F2                bne     L23AD
000162r 2               .endif
000162r 2               ; ----------------------------------------------------------------------------
000162r 2               PUT_NEW_LINE:
000162r 2               .ifndef KBD
000162r 2                 .ifdef CONFIG_2
000162r 2                       jsr     SETPTRS
000162r 2                       jsr     LE33D
000162r 2                       lda     INPUTBUFFER
000162r 2                       beq     L2351
000162r 2                       clc
000162r 2                 .else
000162r 2  A5 13                lda     INPUTBUFFER
000164r 2  F0 2F                beq     FIX_LINKS
000166r 2  A5 86                lda     MEMSIZ
000168r 2  A4 87                ldy     MEMSIZ+1
00016Ar 2  85 82                sta     FRETOP
00016Cr 2  84 83                sty     FRETOP+1
00016Er 2                 .endif
00016Er 2               .endif
00016Er 2  A5 7C                lda     VARTAB
000170r 2  85 A9                sta     HIGHTR
000172r 2  65 5D                adc     EOLPNTR
000174r 2  85 A7                sta     HIGHDS
000176r 2  A4 7D                ldy     VARTAB+1
000178r 2  84 AA                sty     HIGHTR+1
00017Ar 2  90 01                bcc     L23D6
00017Cr 2  C8                   iny
00017Dr 2               L23D6:
00017Dr 2  84 A8                sty     HIGHDS+1
00017Fr 2  20 rr rr             jsr     BLTU
000182r 2               .ifdef CONFIG_INPUTBUFFER_0200
000182r 2                       lda     LINNUM
000182r 2                       ldy     LINNUM+1
000182r 2                       sta     INPUTBUFFER-2
000182r 2                       sty     INPUTBUFFER-1
000182r 2               .endif
000182r 2  A5 80                lda     STREND
000184r 2  A4 81                ldy     STREND+1
000186r 2  85 7C                sta     VARTAB
000188r 2  84 7D                sty     VARTAB+1
00018Ar 2  A4 5D                ldy     EOLPNTR
00018Cr 2  88                   dey
00018Dr 2               ; ---COPY LINE INTO PROGRAM-------
00018Dr 2               L23E6:
00018Dr 2  B9 0F 00             lda     INPUTBUFFER-4,y
000190r 2  91 AE                sta     (LOWTR),y
000192r 2  88                   dey
000193r 2  10 F8                bpl     L23E6
000195r 2               
000195r 2               ; ----------------------------------------------------------------------------
000195r 2               ; CLEAR ALL VARIABLES
000195r 2               ; RE-ESTABLISH ALL FORWARD LINKS
000195r 2               ; ----------------------------------------------------------------------------
000195r 2               FIX_LINKS:
000195r 2  20 rr rr             jsr     SETPTRS
000198r 2               .ifdef CONFIG_2
000198r 2                       jsr     LE33D
000198r 2                       jmp     L2351
000198r 2               LE33D:
000198r 2               .endif
000198r 2  A5 7A                lda     TXTTAB
00019Ar 2  A4 7B                ldy     TXTTAB+1
00019Cr 2  85 71                sta     INDEX
00019Er 2  84 72                sty     INDEX+1
0001A0r 2  18                   clc
0001A1r 2               L23FA:
0001A1r 2  A0 01                ldy     #$01
0001A3r 2  B1 71                lda     (INDEX),y
0001A5r 2               .ifdef CONFIG_2
0001A5r 2                       beq     RET3
0001A5r 2               .else
0001A5r 2  D0 03 4C rr          jeq     L2351
0001A9r 2  rr           
0001AAr 2               .endif
0001AAr 2  A0 04                ldy     #$04
0001ACr 2               L2405:
0001ACr 2  C8                   iny
0001ADr 2  B1 71                lda     (INDEX),y
0001AFr 2  D0 FB                bne     L2405
0001B1r 2  C8                   iny
0001B2r 2  98                   tya
0001B3r 2  65 71                adc     INDEX
0001B5r 2  AA                   tax
0001B6r 2  A0 00                ldy     #$00
0001B8r 2  91 71                sta     (INDEX),y
0001BAr 2  A5 72                lda     INDEX+1
0001BCr 2  69 00                adc     #$00
0001BEr 2  C8                   iny
0001BFr 2  91 71                sta     (INDEX),y
0001C1r 2  86 71                stx     INDEX
0001C3r 2  85 72                sta     INDEX+1
0001C5r 2  90 DA                bcc     L23FA	; always
0001C7r 2               
0001C7r 2               ; ----------------------------------------------------------------------------
0001C7r 2               .ifdef KBD
0001C7r 2               .include "kbd_loadsave.s"
0001C7r 2               .endif
0001C7r 2               
0001C7r 2               .ifdef CONFIG_2
0001C7r 2               ; !!! kbd_loadsave.s requires an RTS here!
0001C7r 2               RET3:
0001C7r 2               		rts
0001C7r 2               .endif
0001C7r 2               
0001C7r 2               .include "inline.s"
0001C7r 3               .segment "CODE"
0001C7r 3               
0001C7r 3               .ifndef CONFIG_NO_INPUTBUFFER_ZP
0001C7r 3               L2420:
0001C7r 3                 .ifdef OSI
0001C7r 3  20 rr rr             jsr     OUTDO
0001CAr 3                 .endif
0001CAr 3  CA                   dex
0001CBr 3  10 08                bpl     INLIN2
0001CDr 3               L2423:
0001CDr 3                 .ifdef OSI
0001CDr 3  20 rr rr             jsr     OUTDO
0001D0r 3                 .endif
0001D0r 3  20 rr rr             jsr     CRDO
0001D3r 3               .endif
0001D3r 3               
0001D3r 3               ; ----------------------------------------------------------------------------
0001D3r 3               ; READ A LINE, AND STRIP OFF SIGN BITS
0001D3r 3               ; ----------------------------------------------------------------------------
0001D3r 3               .ifndef KBD
0001D3r 3               INLIN:
0001D3r 3                 .ifdef APPLE
0001D3r 3                       ldx     #$DD
0001D3r 3               INLIN1:
0001D3r 3                       stx     $33
0001D3r 3                       jsr     L2900
0001D3r 3                       cpx     #$EF
0001D3r 3                       bcs     L0C32
0001D3r 3                       ldx     #$EF
0001D3r 3               L0C32:
0001D3r 3                       lda     #$00
0001D3r 3                       sta     INPUTBUFFER,x
0001D3r 3                       ldx     #<INPUTBUFFER-1
0001D3r 3                       ldy     #>INPUTBUFFER-1
0001D3r 3                       rts
0001D3r 3                 .endif
0001D3r 3               
0001D3r 3                 .ifndef APPLE
0001D3r 3  A2 00                ldx     #$00
0001D5r 3               INLIN2:
0001D5r 3  20 rr rr             jsr     GETLN
0001D8r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001D8r 3  C9 07                cmp     #$07
0001DAr 3  F0 14                beq     L2443
0001DCr 3                   .endif
0001DCr 3  C9 0D                cmp     #$0D
0001DEr 3  F0 1F                beq     L2453
0001E0r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001E0r 3  C9 20                cmp     #$20
0001E2r 3  90 F1                bcc     INLIN2
0001E4r 3                     .ifdef MICROTAN
0001E4r 3                       cmp     #$80
0001E4r 3                     .else
0001E4r 3  C9 7D                cmp     #$7D
0001E6r 3                     .endif
0001E6r 3  B0 ED                bcs     INLIN2
0001E8r 3  C9 40                cmp     #$40 ; @
0001EAr 3  F0 E1                beq     L2423
0001ECr 3                     .ifdef MICROTAN
0001ECr 3                       cmp     #$7F ; DEL
0001ECr 3                     .else
0001ECr 3  C9 5F                cmp     #$5F ; _
0001EEr 3                     .endif
0001EEr 3  F0 D7                beq     L2420
0001F0r 3               L2443:
0001F0r 3                     .ifdef MICROTAN
0001F0r 3                       cpx     #$4F
0001F0r 3                     .else
0001F0r 3  E0 47                cpx     #$47
0001F2r 3                     .endif
0001F2r 3  B0 04                bcs     L244C
0001F4r 3                   .endif
0001F4r 3  95 13                sta     INPUTBUFFER,x
0001F6r 3  E8                   inx
0001F7r 3                   .ifdef OSI
0001F7r 3  2C                   .byte   $2C
0001F8r 3                   .else
0001F8r 3                       bne     INLIN2
0001F8r 3                   .endif
0001F8r 3               L244C:
0001F8r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001F8r 3  A9 07                lda     #$07 ; BEL
0001FAr 3  20 rr rr             jsr     OUTDO
0001FDr 3  D0 D6                bne     INLIN2
0001FFr 3                   .endif
0001FFr 3               L2453:
0001FFr 3  4C rr rr             jmp     L29B9
000202r 3                 .endif
000202r 3               .endif
000202r 3               
000202r 3               .ifndef KBD
000202r 3                 .ifndef APPLE
000202r 3               GETLN:
000202r 3                   .ifdef CONFIG_FILE
000202r 3                       jsr     CHRIN
000202r 3                       ldy     CURDVC
000202r 3                       bne     L2465
000202r 3                   .else
000202r 3  20 rr rr             jsr     MONRDKEY
000205r 3                   .endif
000205r 3                   .ifdef OSI
000205r 3  EA                   nop
000206r 3  EA                   nop
000207r 3  EA                   nop
000208r 3  EA                   nop
000209r 3  EA                   nop
00020Ar 3  EA                   nop
00020Br 3  EA                   nop
00020Cr 3  EA                   nop
00020Dr 3  EA                   nop
00020Er 3  EA                   nop
00020Fr 3  EA                   nop
000210r 3  EA                   nop
000211r 3  EA                   nop
000212r 3  EA                   nop
000213r 3  29 7F                and     #$7F
000215r 3                   .endif
000215r 3                 .endif
000215r 3                 .ifdef APPLE
000215r 3               RDKEY:
000215r 3                       jsr     LFD0C
000215r 3                       and     #$7F
000215r 3                 .endif
000215r 3  C9 0F                cmp     #$0F
000217r 3  D0 08                bne     L2465
000219r 3  48                   pha
00021Ar 3  A5 65                lda     Z14
00021Cr 3  49 FF                eor     #$FF
00021Er 3  85 65                sta     Z14
000220r 3  68                   pla
000221r 3               L2465:
000221r 3  60                   rts
000222r 3               .endif
000222r 3               
000222r 2               
000222r 2               ; ----------------------------------------------------------------------------
000222r 2               ; TOKENIZE THE INPUT LINE
000222r 2               ; ----------------------------------------------------------------------------
000222r 2               PARSE_INPUT_LINE:
000222r 2  A6 C9                ldx     TXTPTR
000224r 2  A0 04                ldy     #$04
000226r 2  84 61                sty     DATAFLG
000228r 2               L246C:
000228r 2  B5 00                lda     INPUTBUFFERX,x
00022Ar 2               .ifdef CONFIG_CBM_ALL
00022Ar 2                       bpl     LC49E
00022Ar 2                       cmp     #$FF
00022Ar 2                       beq     L24AC
00022Ar 2                       inx
00022Ar 2                       bne     L246C
00022Ar 2               LC49E:
00022Ar 2               .endif
00022Ar 2  C9 20                cmp     #$20
00022Cr 2  F0 3A                beq     L24AC
00022Er 2  85 5C                sta     ENDCHR
000230r 2  C9 22                cmp     #$22
000232r 2  F0 58                beq     L24D0
000234r 2  24 61                bit     DATAFLG
000236r 2  70 30                bvs     L24AC
000238r 2  C9 3F                cmp     #$3F
00023Ar 2  D0 04                bne     L2484
00023Cr 2  A9 97                lda     #TOKEN_PRINT
00023Er 2  D0 28                bne     L24AC
000240r 2               L2484:
000240r 2  C9 30                cmp     #$30
000242r 2  90 04                bcc     L248C
000244r 2  C9 3C                cmp     #$3C
000246r 2  90 20                bcc     L24AC
000248r 2               ; ----------------------------------------------------------------------------
000248r 2               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
000248r 2               ; WITH CURRENT CHAR FROM INPUT LINE
000248r 2               ; ----------------------------------------------------------------------------
000248r 2               L248C:
000248r 2  84 C0                sty     STRNG2
00024Ar 2  A0 00                ldy     #$00
00024Cr 2  84 5D                sty     EOLPNTR
00024Er 2  88                   dey
00024Fr 2  86 C9                stx     TXTPTR
000251r 2  CA                   dex
000252r 2               L2496:
000252r 2  C8                   iny
000253r 2               L2497:
000253r 2  E8                   inx
000254r 2               L2498:
000254r 2               .ifdef KBD
000254r 2                       jsr     GET_UPPER
000254r 2               .else
000254r 2  B5 00                lda     INPUTBUFFERX,x
000256r 2                 .ifndef CONFIG_2
000256r 2  C9 20                cmp     #$20
000258r 2  F0 F9                beq     L2497
00025Ar 2                 .endif
00025Ar 2               .endif
00025Ar 2  38                   sec
00025Br 2  F9 rr rr             sbc     TOKEN_NAME_TABLE,y
00025Er 2  F0 F2                beq     L2496
000260r 2  C9 80                cmp     #$80
000262r 2  D0 2F                bne     L24D7
000264r 2  05 5D                ora     EOLPNTR
000266r 2               ; ----------------------------------------------------------------------------
000266r 2               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
000266r 2               ; ----------------------------------------------------------------------------
000266r 2               L24AA:
000266r 2  A4 C0                ldy     STRNG2
000268r 2               L24AC:
000268r 2  E8                   inx
000269r 2  C8                   iny
00026Ar 2  99 0E 00             sta     INPUTBUFFER-5,y
00026Dr 2  B9 0E 00             lda     INPUTBUFFER-5,y
000270r 2  F0 34                beq     L24EA
000272r 2  38                   sec
000273r 2  E9 3A                sbc     #$3A
000275r 2  F0 04                beq     L24BF
000277r 2  C9 49                cmp     #$49
000279r 2  D0 02                bne     L24C1
00027Br 2               L24BF:
00027Br 2  85 61                sta     DATAFLG
00027Dr 2               L24C1:
00027Dr 2  38                   sec
00027Er 2  E9 54                sbc     #TOKEN_REM-':'
000280r 2  D0 A6                bne     L246C
000282r 2  85 5C                sta     ENDCHR
000284r 2               ; ----------------------------------------------------------------------------
000284r 2               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
000284r 2               ; BY COPYING CHARS UP TO ENDCHR.
000284r 2               ; ----------------------------------------------------------------------------
000284r 2               L24C8:
000284r 2  B5 00                lda     INPUTBUFFERX,x
000286r 2  F0 E0                beq     L24AC
000288r 2  C5 5C                cmp     ENDCHR
00028Ar 2  F0 DC                beq     L24AC
00028Cr 2               L24D0:
00028Cr 2  C8                   iny
00028Dr 2  99 0E 00             sta     INPUTBUFFER-5,y
000290r 2  E8                   inx
000291r 2  D0 F1                bne     L24C8
000293r 2               ; ----------------------------------------------------------------------------
000293r 2               ; ADVANCE POINTER TO NEXT TOKEN NAME
000293r 2               ; ----------------------------------------------------------------------------
000293r 2               L24D7:
000293r 2  A6 C9                ldx     TXTPTR
000295r 2  E6 5D                inc     EOLPNTR
000297r 2               L24DB:
000297r 2  C8                   iny
000298r 2  B9 rr rr             lda     MATHTBL+28+1,y
00029Br 2  10 FA                bpl     L24DB
00029Dr 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0002A0r 2  D0 B2                bne     L2498
0002A2r 2  B5 00                lda     INPUTBUFFERX,x
0002A4r 2  10 C0                bpl     L24AA
0002A6r 2               ; ---END OF LINE------------------
0002A6r 2               L24EA:
0002A6r 2  99 10 00             sta     INPUTBUFFER-3,y
0002A9r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
0002A9r 2                       dec     TXTPTR+1
0002A9r 2               .endif
0002A9r 2  A9 12                lda     #<INPUTBUFFER-1
0002ABr 2  85 C9                sta     TXTPTR
0002ADr 2  60                   rts
0002AEr 2               
0002AEr 2               ; ----------------------------------------------------------------------------
0002AEr 2               ; SEARCH FOR LINE
0002AEr 2               ;
0002AEr 2               ; (LINNUM) = LINE # TO FIND
0002AEr 2               ; IF NOT FOUND:  CARRY = 0
0002AEr 2               ;	LOWTR POINTS AT NEXT LINE
0002AEr 2               ; IF FOUND:      CARRY = 1
0002AEr 2               ;	LOWTR POINTS AT LINE
0002AEr 2               ; ----------------------------------------------------------------------------
0002AEr 2               FNDLIN:
0002AEr 2               .ifdef KBD
0002AEr 2                       jsr     CHRGET
0002AEr 2                       jmp     LE444
0002AEr 2               LE440:
0002AEr 2                       php
0002AEr 2                       jsr     LINGET
0002AEr 2               LE444:
0002AEr 2                       jsr     LF457
0002AEr 2                       ldx     #$FF
0002AEr 2                       plp
0002AEr 2                       beq     LE464
0002AEr 2                       jsr     CHRGOT
0002AEr 2                       beq     L2520
0002AEr 2                       cmp     #$A5
0002AEr 2                       bne     L2520
0002AEr 2                       jsr     CHRGET
0002AEr 2                       beq     LE464
0002AEr 2                       bcs     LE461
0002AEr 2                       jsr     LINGET
0002AEr 2                       beq     L2520
0002AEr 2               LE461:
0002AEr 2                       jmp     SYNERR
0002AEr 2               LE464:
0002AEr 2                       stx     LINNUM
0002AEr 2                       stx     LINNUM+1
0002AEr 2               .else
0002AEr 2  A5 7A                lda     TXTTAB
0002B0r 2  A6 7B                ldx     TXTTAB+1
0002B2r 2               FL1:
0002B2r 2  A0 01                ldy     #$01
0002B4r 2  85 AE                sta     LOWTR
0002B6r 2  86 AF                stx     LOWTR+1
0002B8r 2  B1 AE                lda     (LOWTR),y
0002BAr 2  F0 1F                beq     L251F
0002BCr 2  C8                   iny
0002BDr 2  C8                   iny
0002BEr 2  A5 12                lda     LINNUM+1
0002C0r 2  D1 AE                cmp     (LOWTR),y
0002C2r 2  90 18                bcc     L2520
0002C4r 2  F0 03                beq     L250D
0002C6r 2  88                   dey
0002C7r 2  D0 09                bne     L2516
0002C9r 2               L250D:
0002C9r 2  A5 11                lda     LINNUM
0002CBr 2  88                   dey
0002CCr 2  D1 AE                cmp     (LOWTR),y
0002CEr 2  90 0C                bcc     L2520
0002D0r 2  F0 0A                beq     L2520
0002D2r 2               L2516:
0002D2r 2  88                   dey
0002D3r 2  B1 AE                lda     (LOWTR),y
0002D5r 2  AA                   tax
0002D6r 2  88                   dey
0002D7r 2  B1 AE                lda     (LOWTR),y
0002D9r 2  B0 D7                bcs     FL1
0002DBr 2               L251F:
0002DBr 2  18                   clc
0002DCr 2               .endif
0002DCr 2               L2520:
0002DCr 2  60                   rts
0002DDr 2               
0002DDr 2               ; ----------------------------------------------------------------------------
0002DDr 2               ; "NEW" STATEMENT
0002DDr 2               ; ----------------------------------------------------------------------------
0002DDr 2               NEW:
0002DDr 2  D0 FD                bne     L2520
0002DFr 2               SCRTCH:
0002DFr 2  A9 00                lda     #$00
0002E1r 2  A8                   tay
0002E2r 2  91 7A                sta     (TXTTAB),y
0002E4r 2  C8                   iny
0002E5r 2  91 7A                sta     (TXTTAB),y
0002E7r 2  A5 7A                lda     TXTTAB
0002E9r 2               .ifdef CONFIG_2
0002E9r 2               		clc
0002E9r 2               .endif
0002E9r 2  69 02                adc     #$02
0002EBr 2  85 7C                sta     VARTAB
0002EDr 2  A5 7B                lda     TXTTAB+1
0002EFr 2  69 00                adc     #$00
0002F1r 2  85 7D                sta     VARTAB+1
0002F3r 2               ; ----------------------------------------------------------------------------
0002F3r 2               SETPTRS:
0002F3r 2  20 rr rr             jsr     STXTPT
0002F6r 2               .ifdef CONFIG_11A
0002F6r 2  A9 00                lda     #$00
0002F8r 2               
0002F8r 2               ; ----------------------------------------------------------------------------
0002F8r 2               ; "CLEAR" STATEMENT
0002F8r 2               ; ----------------------------------------------------------------------------
0002F8r 2               CLEAR:
0002F8r 2  D0 31                bne     L256A
0002FAr 2               .endif
0002FAr 2               CLEARC:
0002FAr 2  A9 83                lda    #$83
0002FCr 2  8D 20 80             sta    $8020
0002FFr 2               .ifdef KBD
0002FFr 2                       lda     #<CONST_MEMSIZ
0002FFr 2                       ldy     #>CONST_MEMSIZ
0002FFr 2               .else
0002FFr 2  A5 86                lda     MEMSIZ
000301r 2  A4 87                ldy     MEMSIZ+1
000303r 2               .endif
000303r 2  85 82                sta     FRETOP
000305r 2  84 83                sty     FRETOP+1
000307r 2               .ifdef CONFIG_CBM_ALL
000307r 2                       jsr     CLALL
000307r 2               .endif
000307r 2  A5 7C                lda     VARTAB
000309r 2  A4 7D                ldy     VARTAB+1
00030Br 2  85 7E                sta     ARYTAB
00030Dr 2  84 7F                sty     ARYTAB+1
00030Fr 2  85 80                sta     STREND
000311r 2  84 81                sty     STREND+1
000313r 2  20 rr rr             jsr     RESTORE
000316r 2               ; ----------------------------------------------------------------------------
000316r 2               STKINI:
000316r 2  A2 68                ldx     #TEMPST
000318r 2  86 65                stx     TEMPPT
00031Ar 2  68                   pla
00031Br 2               .ifdef CONFIG_2
00031Br 2               		tay
00031Br 2               .else
00031Br 2  8D FD 01             sta     STACK+STACK_TOP+1
00031Er 2               .endif
00031Er 2  68                   pla
00031Fr 2               .ifndef CONFIG_2
00031Fr 2  8D FE 01             sta     STACK+STACK_TOP+2
000322r 2               .endif
000322r 2  A2 FC                ldx     #STACK_TOP
000324r 2  9A                   txs
000325r 2               .ifdef CONFIG_2
000325r 2                       pha
000325r 2                       tya
000325r 2                       pha
000325r 2               .endif
000325r 2  A9 00                lda     #$00
000327r 2  85 8D                sta     OLDTEXT+1
000329r 2  85 62                sta     SUBFLG
00032Br 2               L256A:
00032Br 2  60                   rts
00032Cr 2               
00032Cr 2               ; ----------------------------------------------------------------------------
00032Cr 2               ; SET TXTPTR TO BEGINNING OF PROGRAM
00032Cr 2               ; ----------------------------------------------------------------------------
00032Cr 2               STXTPT:
00032Cr 2  18                   clc
00032Dr 2  A5 7A                lda     TXTTAB
00032Fr 2  69 FF                adc     #$FF
000331r 2  85 C9                sta     TXTPTR
000333r 2  A5 7B                lda     TXTTAB+1
000335r 2  69 FF                adc     #$FF
000337r 2  85 CA                sta     TXTPTR+1
000339r 2  60                   rts
00033Ar 2               
00033Ar 2               ; ----------------------------------------------------------------------------
00033Ar 2               .ifdef KBD
00033Ar 2               LE4C0:
00033Ar 2                       ldy     #<LE444
00033Ar 2                       ldx     #>LE444
00033Ar 2               LE4C4:
00033Ar 2                       jsr     LFFD6
00033Ar 2                       jsr     LFFED
00033Ar 2                       lda     $0504
00033Ar 2                       clc
00033Ar 2                       adc     #$08
00033Ar 2                       sta     $0504
00033Ar 2                       rts
00033Ar 2               
00033Ar 2               CMPJMPADRS:
00033Ar 2                       lda     1,x
00033Ar 2                       cmp     JMPADRS+2
00033Ar 2                       bne     LE4DE
00033Ar 2                       lda     0,x
00033Ar 2                       cmp     JMPADRS+1
00033Ar 2               LE4DE:
00033Ar 2                       rts
00033Ar 2               .endif
00033Ar 2               
00033Ar 2               ; ----------------------------------------------------------------------------
00033Ar 2               ; "LIST" STATEMENT
00033Ar 2               ; ----------------------------------------------------------------------------
00033Ar 2               LIST:
00033Ar 2               .ifdef KBD
00033Ar 2                       jsr     LE440
00033Ar 2                       bne     LE4DE
00033Ar 2                       pla
00033Ar 2                       pla
00033Ar 2               L25A6:
00033Ar 2                       jsr     CRDO
00033Ar 2               .else
00033Ar 2                 .ifdef MICROTAN
00033Ar 2                       php
00033Ar 2                       jmp     LE21C ; patch
00033Ar 2               LC57E:
00033Ar 2                 .else
00033Ar 2  90 06                bcc     L2581
00033Cr 2  F0 04                beq     L2581
00033Er 2  C9 A5                cmp     #TOKEN_MINUS
000340r 2  D0 E9                bne     L256A
000342r 2               L2581:
000342r 2  20 rr rr             jsr     LINGET
000345r 2                 .endif
000345r 2  20 rr rr             jsr     FNDLIN
000348r 2                 .ifdef MICROTAN
000348r 2                       plp
000348r 2                       beq     L2598
000348r 2                 .endif
000348r 2  20 C8 00             jsr     CHRGOT
00034Br 2                 .ifdef MICROTAN
00034Br 2                       beq     L25A6
00034Br 2                 .else
00034Br 2  F0 0C                beq     L2598
00034Dr 2                 .endif
00034Dr 2  C9 A5                cmp     #TOKEN_MINUS
00034Fr 2  D0 8B                bne     L2520
000351r 2  20 C2 00             jsr     CHRGET
000354r 2                 .ifdef MICROTAN
000354r 2                       beq     L2598
000354r 2                       jsr     LINGET
000354r 2                       beq     L25A6
000354r 2                       rts
000354r 2                 .else
000354r 2  20 rr rr             jsr     LINGET
000357r 2  D0 83                bne     L2520
000359r 2                 .endif
000359r 2               L2598:
000359r 2                 .ifndef MICROTAN
000359r 2  68                   pla
00035Ar 2  68                   pla
00035Br 2  A5 11                lda     LINNUM
00035Dr 2  05 12                ora     LINNUM+1
00035Fr 2  D0 06                bne     L25A6
000361r 2                 .endif
000361r 2  A9 FF                lda     #$FF
000363r 2  85 11                sta     LINNUM
000365r 2  85 12                sta     LINNUM+1
000367r 2               L25A6:
000367r 2                 .ifdef MICROTAN
000367r 2                       pla
000367r 2                       pla
000367r 2                 .endif
000367r 2               L25A6X:
000367r 2               .endif
000367r 2  A0 01                ldy     #$01
000369r 2               .ifdef CONFIG_DATAFLG
000369r 2  84 61                sty     DATAFLG
00036Br 2               .endif
00036Br 2  B1 AE                lda     (LOWTRX),y
00036Dr 2  F0 43                beq     L25E5
00036Fr 2               .ifdef MICROTAN
00036Fr 2                       jmp     LE21F
00036Fr 2               LC5A9:
00036Fr 2               .else
00036Fr 2  20 rr rr             jsr     ISCNTC
000372r 2               .endif
000372r 2               .ifndef KBD
000372r 2  20 rr rr             jsr     CRDO
000375r 2               .endif
000375r 2  C8                   iny
000376r 2  B1 AE                lda     (LOWTRX),y
000378r 2  AA                   tax
000379r 2  C8                   iny
00037Ar 2  B1 AE                lda     (LOWTRX),y
00037Cr 2  C5 12                cmp     LINNUM+1
00037Er 2  D0 04                bne     L25C1
000380r 2  E4 11                cpx     LINNUM
000382r 2  F0 02                beq     L25C3
000384r 2               L25C1:
000384r 2  B0 2C                bcs     L25E5
000386r 2               ; ---LIST ONE LINE----------------
000386r 2               L25C3:
000386r 2  84 98                sty     FORPNT
000388r 2  20 rr rr             jsr     LINPRT
00038Br 2  A9 20                lda     #$20
00038Dr 2               L25CA:
00038Dr 2  A4 98                ldy     FORPNT
00038Fr 2  29 7F                and     #$7F
000391r 2               L25CE:
000391r 2  20 rr rr             jsr     OUTDO
000394r 2               .ifdef CONFIG_DATAFLG
000394r 2  C9 22                cmp     #$22
000396r 2  D0 06                bne     LA519
000398r 2  A5 61                lda     DATAFLG
00039Ar 2  49 FF                eor     #$FF
00039Cr 2  85 61                sta     DATAFLG
00039Er 2               LA519:
00039Er 2               .endif
00039Er 2  C8                   iny
00039Fr 2               .ifdef CONFIG_11
00039Fr 2  F0 11                beq     L25E5
0003A1r 2               .endif
0003A1r 2  B1 AE                lda     (LOWTRX),y
0003A3r 2  D0 10                bne     L25E8
0003A5r 2  A8                   tay
0003A6r 2  B1 AE                lda     (LOWTRX),y
0003A8r 2  AA                   tax
0003A9r 2  C8                   iny
0003AAr 2  B1 AE                lda     (LOWTRX),y
0003ACr 2  86 AE                stx     LOWTRX
0003AEr 2  85 AF                sta     LOWTRX+1
0003B0r 2               .ifdef MICROTAN
0003B0r 2                       bne     L25A6X
0003B0r 2               .else
0003B0r 2  D0 B5                bne     L25A6
0003B2r 2               .endif
0003B2r 2               L25E5:
0003B2r 2  4C rr rr             jmp     RESTART
0003B5r 2               L25E8:
0003B5r 2  10 DA                bpl     L25CE
0003B7r 2               .ifdef CONFIG_DATAFLG
0003B7r 2  C9 FF                cmp     #$FF
0003B9r 2  F0 D6                beq     L25CE
0003BBr 2  24 61                bit     DATAFLG
0003BDr 2  30 D2                bmi     L25CE
0003BFr 2               .endif
0003BFr 2  38                   sec
0003C0r 2  E9 7F                sbc     #$7F
0003C2r 2  AA                   tax
0003C3r 2  84 98                sty     FORPNT
0003C5r 2  A0 FF                ldy     #$FF
0003C7r 2               L25F2:
0003C7r 2  CA                   dex
0003C8r 2  F0 08                beq     L25FD
0003CAr 2               L25F5:
0003CAr 2  C8                   iny
0003CBr 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003CEr 2  10 FA                bpl     L25F5
0003D0r 2  30 F5                bmi     L25F2
0003D2r 2               L25FD:
0003D2r 2  C8                   iny
0003D3r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003D6r 2  30 B5                bmi     L25CA
0003D8r 2  20 rr rr             jsr     OUTDO
0003DBr 2  D0 F5                bne     L25FD	; always
0003DDr 2               
0003DDr 2               
0003DDr 1               .include "flow1.s"
0003DDr 2               .segment "CODE"
0003DDr 2               
0003DDr 2               ; ----------------------------------------------------------------------------
0003DDr 2               ; "FOR" STATEMENT
0003DDr 2               ;
0003DDr 2               ; FOR PUSHES 18 BYTES ON THE STACK:
0003DDr 2               ; 2 -- TXTPTR
0003DDr 2               ; 2 -- LINE NUMBER
0003DDr 2               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
0003DDr 2               ; 1 -- STEP SIGN
0003DDr 2               ; 5 -- STEP VALUE
0003DDr 2               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
0003DDr 2               ; 1 -- FOR TOKEN ($81)
0003DDr 2               ; ----------------------------------------------------------------------------
0003DDr 2               FOR:
0003DDr 2  A9 80                lda     #$80
0003DFr 2  85 62                sta     SUBFLG
0003E1r 2  20 rr rr             jsr     LET
0003E4r 2  20 rr rr             jsr     GTFORPNT
0003E7r 2  D0 05                bne     L2619
0003E9r 2  8A                   txa
0003EAr 2  69 0F                adc     #FOR_STACK1
0003ECr 2  AA                   tax
0003EDr 2  9A                   txs
0003EEr 2               L2619:
0003EEr 2  68                   pla
0003EFr 2  68                   pla
0003F0r 2  A9 09                lda     #FOR_STACK2
0003F2r 2  20 rr rr             jsr     CHKMEM
0003F5r 2  20 rr rr             jsr     DATAN
0003F8r 2  18                   clc
0003F9r 2  98                   tya
0003FAr 2  65 C9                adc     TXTPTR
0003FCr 2  48                   pha
0003FDr 2  A5 CA                lda     TXTPTR+1
0003FFr 2  69 00                adc     #$00
000401r 2  48                   pha
000402r 2  A5 89                lda     CURLIN+1
000404r 2  48                   pha
000405r 2  A5 88                lda     CURLIN
000407r 2  48                   pha
000408r 2  A9 9E                lda     #TOKEN_TO
00040Ar 2  20 rr rr             jsr     SYNCHR
00040Dr 2  20 rr rr             jsr     CHKNUM
000410r 2  20 rr rr             jsr     FRMNUM
000413r 2  A5 B5                lda     FACSIGN
000415r 2  09 7F                ora     #$7F
000417r 2  25 B1                and     FAC+1
000419r 2  85 B1                sta     FAC+1
00041Br 2  A9 rr                lda     #<STEP
00041Dr 2  A0 rr                ldy     #>STEP
00041Fr 2  85 71                sta     INDEX
000421r 2  84 72                sty     INDEX+1
000423r 2  4C rr rr             jmp     FRM_STACK3
000426r 2               
000426r 2               ; ----------------------------------------------------------------------------
000426r 2               ; "STEP" PHRASE OF "FOR" STATEMENT
000426r 2               ; ----------------------------------------------------------------------------
000426r 2               STEP:
000426r 2  A9 rr                lda     #<CON_ONE
000428r 2  A0 rr                ldy     #>CON_ONE
00042Ar 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
00042Dr 2  20 C8 00             jsr     CHRGOT
000430r 2  C9 A3                cmp     #TOKEN_STEP
000432r 2  D0 06                bne     L2665
000434r 2  20 C2 00             jsr     CHRGET
000437r 2  20 rr rr             jsr     FRMNUM
00043Ar 2               L2665:
00043Ar 2  20 rr rr             jsr     SIGN
00043Dr 2  20 rr rr             jsr     FRM_STACK2
000440r 2  A5 99                lda     FORPNT+1
000442r 2  48                   pha
000443r 2  A5 98                lda     FORPNT
000445r 2  48                   pha
000446r 2  A9 81                lda     #$81
000448r 2  48                   pha
000449r 2               
000449r 2               ; ----------------------------------------------------------------------------
000449r 2               ; PERFORM NEXT STATEMENT
000449r 2               ; ----------------------------------------------------------------------------
000449r 2               NEWSTT:
000449r 2  20 rr rr             jsr     ISCNTC
00044Cr 2  A5 C9                lda     TXTPTR
00044Er 2  A4 CA                ldy     TXTPTR+1
000450r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
000450r 2                       cpy     #>INPUTBUFFER
000450r 2                 .ifdef CBM2
000450r 2                       nop
000450r 2                 .endif
000450r 2                       beq     LC6D4
000450r 2               .else
000450r 2               ; BUG on AppleSoft I,
000450r 2               ; fixed differently on AppleSoft II (ldx/inx)
000450r 2  F0 06                beq     L2683
000452r 2               .endif
000452r 2  85 8C                sta     OLDTEXT
000454r 2  84 8D                sty     OLDTEXT+1
000456r 2               LC6D4:
000456r 2  A0 00                ldy     #$00
000458r 2               L2683:
000458r 2  B1 C9                lda     (TXTPTR),y
00045Ar 2               .ifndef CONFIG_11
00045Ar 2                       beq     LA5DC	; old: 1 cycle more on generic case
00045Ar 2                       cmp     #$3A
00045Ar 2                       beq     NEWSTT2
00045Ar 2               SYNERR1:
00045Ar 2                       jmp     SYNERR
00045Ar 2               LA5DC:
00045Ar 2               .else
00045Ar 2  D0 3D                bne     COLON; new: 1 cycle more on ":" case
00045Cr 2               .endif
00045Cr 2  A0 02                ldy     #$02
00045Er 2  B1 C9                lda     (TXTPTR),y
000460r 2  18                   clc
000461r 2               .ifdef CONFIG_2
000461r 2                       jeq     L2701
000461r 2               .else
000461r 2  F0 6F                beq     L2701
000463r 2               .endif
000463r 2  C8                   iny
000464r 2  B1 C9                lda     (TXTPTR),y
000466r 2  85 88                sta     CURLIN
000468r 2  C8                   iny
000469r 2  B1 C9                lda     (TXTPTR),y
00046Br 2  85 89                sta     CURLIN+1
00046Dr 2  98                   tya
00046Er 2  65 C9                adc     TXTPTR
000470r 2  85 C9                sta     TXTPTR
000472r 2  90 02                bcc     NEWSTT2
000474r 2  E6 CA                inc     TXTPTR+1
000476r 2               NEWSTT2:
000476r 2  20 C2 00             jsr     CHRGET
000479r 2  20 rr rr             jsr     EXECUTE_STATEMENT
00047Cr 2  4C rr rr             jmp     NEWSTT
00047Fr 2               
00047Fr 2               ; ----------------------------------------------------------------------------
00047Fr 2               ; EXECUTE A STATEMENT
00047Fr 2               ;
00047Fr 2               ; (A) IS FIRST CHAR OF STATEMENT
00047Fr 2               ; CARRY IS SET
00047Fr 2               ; ----------------------------------------------------------------------------
00047Fr 2               EXECUTE_STATEMENT:
00047Fr 2               .ifndef CONFIG_11A
00047Fr 2                       beq     RET1
00047Fr 2               .else
00047Fr 2  F0 2D                beq     RET2
000481r 2               .endif
000481r 2               .ifndef CONFIG_11
000481r 2                       sec
000481r 2               .endif
000481r 2               EXECUTE_STATEMENT1:
000481r 2  E9 80                sbc     #$80
000483r 2               .ifndef CONFIG_11
000483r 2                       jcc     LET	; old: 1 cycle more on instr.
000483r 2               .else
000483r 2  90 11                bcc     LET1; new: 1 cycle more on assignment
000485r 2               .endif
000485r 2  C9 1D                cmp     #NUM_TOKENS
000487r 2               .ifdef CONFIG_2
000487r 2                       bcs     LC721
000487r 2               .else
000487r 2  B0 14                bcs     SYNERR1
000489r 2               .endif
000489r 2  0A                   asl     a
00048Ar 2  A8                   tay
00048Br 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE+1,y
00048Er 2  48                   pha
00048Fr 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE,y
000492r 2  48                   pha
000493r 2  4C C2 00             jmp     CHRGET
000496r 2               
000496r 2               .ifdef CONFIG_11
000496r 2               LET1:
000496r 2  4C rr rr             jmp     LET
000499r 2               
000499r 2               COLON:
000499r 2  C9 3A                cmp     #$3A
00049Br 2  F0 D9                beq     NEWSTT2
00049Dr 2               SYNERR1:
00049Dr 2  4C rr rr             jmp     SYNERR
0004A0r 2               .endif
0004A0r 2               
0004A0r 2               .ifdef CONFIG_2; GO TO
0004A0r 2               LC721:
0004A0r 2                       cmp     #TOKEN_GO-$80
0004A0r 2                       bne     SYNERR1
0004A0r 2                       jsr     CHRGET
0004A0r 2                       lda     #TOKEN_TO
0004A0r 2                       jsr     SYNCHR
0004A0r 2                       jmp     GOTO
0004A0r 2               .endif
0004A0r 2               
0004A0r 2               ; ----------------------------------------------------------------------------
0004A0r 2               ; "RESTORE" STATEMENT
0004A0r 2               ; ----------------------------------------------------------------------------
0004A0r 2               RESTORE:
0004A0r 2  38                   sec
0004A1r 2  A5 7A                lda     TXTTAB
0004A3r 2  E9 01                sbc     #$01
0004A5r 2  A4 7B                ldy     TXTTAB+1
0004A7r 2  B0 01                bcs     SETDA
0004A9r 2  88                   dey
0004AAr 2               SETDA:
0004AAr 2  85 90                sta     DATPTR
0004ACr 2  84 91                sty     DATPTR+1
0004AEr 2               RET2:
0004AEr 2  60                   rts
0004AFr 2               
0004AFr 2               .include "iscntc.s"
0004AFr 3               .segment "CODE"
0004AFr 3               ; ----------------------------------------------------------------------------
0004AFr 3               ; SEE IF CONTROL-C TYPED
0004AFr 3               ; ----------------------------------------------------------------------------
0004AFr 3               .ifndef CONFIG_CBM_ALL
0004AFr 3               .include "cbm_iscntc.s"
0004AFr 4               ; nothing - ISCNTC is a KERNAL function
0004AFr 4               
0004AFr 3               .endif
0004AFr 3               .ifdef KBD
0004AFr 3               .include "kbd_iscntc.s"
0004AFr 3               .endif
0004AFr 3               .ifdef OSI
0004AFr 3               .include "osi_iscntc.s"
0004AFr 4               .segment "CODE"
0004AFr 4               ISCNTC:
0004AFr 4  AD 01 80             lda     $8001           ; keyboard status
0004B2r 4  C9 00                CMP     #$00
0004B4r 4  D0 01                BNE     L0ECC           ; branch if key pressed
0004B6r 4  60                   rts                     ; return
0004B7r 4               L0ECC:
0004B7r 4                       ;lda     $D010           ; get key data
0004B7r 4  C9 1B                cmp     #$1B            ; is it Ctrl-C ?
0004B9r 4               ;!!! *used*to* run into "STOP"
0004B9r 4               
0004B9r 3               .endif
0004B9r 3               .ifdef APPLE
0004B9r 3               .include "apple_iscntc.s"
0004B9r 3               .endif
0004B9r 3               .ifdef KIM
0004B9r 3               .include "kim_iscntc.s"
0004B9r 3               .endif
0004B9r 3               .ifdef MICROTAN
0004B9r 3               .include "microtan_iscntc.s"
0004B9r 3               .endif
0004B9r 3               ;!!! runs into "STOP"
0004B9r 3               
0004B9r 2               ;!!! runs into "STOP"
0004B9r 2               ; ----------------------------------------------------------------------------
0004B9r 2               ; "STOP" STATEMENT
0004B9r 2               ; ----------------------------------------------------------------------------
0004B9r 2               STOP:
0004B9r 2  B0 01                bcs     END2
0004BBr 2               
0004BBr 2               ; ----------------------------------------------------------------------------
0004BBr 2               ; "END" STATEMENT
0004BBr 2               ; ----------------------------------------------------------------------------
0004BBr 2               END:
0004BBr 2  18                   clc
0004BCr 2               END2:
0004BCr 2  D0 3D                bne     RET1
0004BEr 2  A5 C9                lda     TXTPTR
0004C0r 2  A4 CA                ldy     TXTPTR+1
0004C2r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
0004C2r 2               ; BUG on AppleSoft I
0004C2r 2               ; fix exists on AppleSoft II
0004C2r 2               ; TXTPTR+1 will always be > 0
0004C2r 2                       ldx     CURLIN+1
0004C2r 2                       inx
0004C2r 2               .endif
0004C2r 2  F0 0C                beq     END4
0004C4r 2  85 8C                sta     OLDTEXT
0004C6r 2  84 8D                sty     OLDTEXT+1
0004C8r 2               CONTROL_C_TYPED:
0004C8r 2  A5 88                lda     CURLIN
0004CAr 2  A4 89                ldy     CURLIN+1
0004CCr 2  85 8A                sta     OLDLIN
0004CEr 2  84 8B                sty     OLDLIN+1
0004D0r 2               END4:
0004D0r 2  68                   pla
0004D1r 2  68                   pla
0004D2r 2               L2701:
0004D2r 2  A9 rr                lda     #<QT_BREAK
0004D4r 2  A0 rr                ldy     #>QT_BREAK
0004D6r 2               .ifndef KBD
0004D6r 2  A2 00                ldx     #$00
0004D8r 2  86 65                stx     Z14
0004DAr 2               .endif
0004DAr 2  90 03                bcc     L270E
0004DCr 2  4C rr rr             jmp     PRINT_ERROR_LINNUM
0004DFr 2               L270E:
0004DFr 2  4C rr rr             jmp     RESTART
0004E2r 2               .ifdef KBD
0004E2r 2               LE664:
0004E2r 2                       tay
0004E2r 2                       jmp     SNGFLT
0004E2r 2               .endif
0004E2r 2               
0004E2r 2               ; ----------------------------------------------------------------------------
0004E2r 2               ; "CONT" COMMAND
0004E2r 2               ; ----------------------------------------------------------------------------
0004E2r 2               CONT:
0004E2r 2  D0 17                bne     RET1
0004E4r 2  A2 D2                ldx     #ERR_CANTCONT
0004E6r 2  A4 8D                ldy     OLDTEXT+1
0004E8r 2  D0 03                bne     L271C
0004EAr 2  4C rr rr             jmp     ERROR
0004EDr 2               L271C:
0004EDr 2  A5 8C                lda     OLDTEXT
0004EFr 2  85 C9                sta     TXTPTR
0004F1r 2  84 CA                sty     TXTPTR+1
0004F3r 2  A5 8A                lda     OLDLIN
0004F5r 2  A4 8B                ldy     OLDLIN+1
0004F7r 2  85 88                sta     CURLIN
0004F9r 2  84 89                sty     CURLIN+1
0004FBr 2               RET1:
0004FBr 2  60                   rts
0004FCr 2               
0004FCr 2               .ifdef KBD
0004FCr 2               PRT:
0004FCr 2                       jsr     GETBYT
0004FCr 2                       txa
0004FCr 2               ; not ROR bug safe
0004FCr 2                       ror     a
0004FCr 2                       ror     a
0004FCr 2                       ror     a
0004FCr 2                       sta     $8F
0004FCr 2                       rts
0004FCr 2               
0004FCr 2               LE68C:
0004FCr 2                       ldy     #$12
0004FCr 2               LE68E:
0004FCr 2                       lda     LEA30,y
0004FCr 2                       sta     $03A2,y
0004FCr 2                       dey
0004FCr 2                       bpl     LE68E
0004FCr 2                       rts
0004FCr 2               .endif
0004FCr 2               
0004FCr 2               .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0004FCr 2               ; CBM1 has the keyword removed,
0004FCr 2               ; but the code is still here
0004FCr 2               NULL:
0004FCr 2  20 rr rr             jsr     GETBYT
0004FFr 2  D0 FA                bne     RET1
000501r 2  E8                   inx
000502r 2  E0 0A                cpx     #NULL_MAX
000504r 2  B0 04                bcs     L2739
000506r 2  CA                   dex
000507r 2  86 0D                stx     Z15
000509r 2  60                   rts
00050Ar 2               L2739:
00050Ar 2  4C rr rr             jmp     IQERR
00050Dr 2               .endif
00050Dr 2               .ifndef CONFIG_11A
00050Dr 2               CLEAR:
00050Dr 2                       bne     RET1
00050Dr 2                       jmp     CLEARC
00050Dr 2               .endif
00050Dr 2               
00050Dr 1               .include "loadsave.s"
00050Dr 2               .segment "CODE"
00050Dr 2               
00050Dr 2               .ifdef APPLE
00050Dr 2               .include "apple_loadsave.s"
00050Dr 2               .endif
00050Dr 2               .ifdef KIM
00050Dr 2               .include "kim_loadsave.s"
00050Dr 2               .endif
00050Dr 2               .ifdef MICROTAN
00050Dr 2               .include "microtan_loadsave.s"
00050Dr 2               .endif
00050Dr 2               
00050Dr 1               .include "flow2.s"
00050Dr 2               .segment "CODE"
00050Dr 2               ; ----------------------------------------------------------------------------
00050Dr 2               ; "RUN" COMMAND
00050Dr 2               ; ----------------------------------------------------------------------------
00050Dr 2               RUN:
00050Dr 2  D0 03                bne     L27CF
00050Fr 2  4C rr rr             jmp     SETPTRS
000512r 2               L27CF:
000512r 2  20 rr rr             jsr     CLEARC
000515r 2  4C rr rr             jmp     L27E9
000518r 2               
000518r 2               ; ----------------------------------------------------------------------------
000518r 2               ; "GOSUB" STATEMENT
000518r 2               ;
000518r 2               ; LEAVES 7 BYTES ON STACK:
000518r 2               ; 2 -- RETURN ADDRESS (NEWSTT)
000518r 2               ; 2 -- TXTPTR
000518r 2               ; 2 -- LINE #
000518r 2               ; 1 -- GOSUB TOKEN
000518r 2               ; ----------------------------------------------------------------------------
000518r 2               GOSUB:
000518r 2  A9 03                lda     #$03
00051Ar 2  20 rr rr             jsr     CHKMEM
00051Dr 2  A5 CA                lda     TXTPTR+1
00051Fr 2  48                   pha
000520r 2  A5 C9                lda     TXTPTR
000522r 2  48                   pha
000523r 2  A5 89                lda     CURLIN+1
000525r 2  48                   pha
000526r 2  A5 88                lda     CURLIN
000528r 2  48                   pha
000529r 2  A9 8C                lda     #TOKEN_GOSUB
00052Br 2  48                   pha
00052Cr 2               L27E9:
00052Cr 2  20 C8 00             jsr     CHRGOT
00052Fr 2  20 rr rr             jsr     GOTO
000532r 2  4C rr rr             jmp     NEWSTT
000535r 2               
000535r 2               ; ----------------------------------------------------------------------------
000535r 2               ; "GOTO" STATEMENT
000535r 2               ; ALSO USED BY "RUN" AND "GOSUB"
000535r 2               ; ----------------------------------------------------------------------------
000535r 2               GOTO:
000535r 2  20 rr rr             jsr     LINGET
000538r 2  20 rr rr             jsr     REMN
00053Br 2  A5 89                lda     CURLIN+1
00053Dr 2  C5 12                cmp     LINNUM+1
00053Fr 2  B0 0B                bcs     L2809
000541r 2  98                   tya
000542r 2  38                   sec
000543r 2  65 C9                adc     TXTPTR
000545r 2  A6 CA                ldx     TXTPTR+1
000547r 2  90 07                bcc     L280D
000549r 2  E8                   inx
00054Ar 2  B0 04                bcs     L280D
00054Cr 2               L2809:
00054Cr 2  A5 7A                lda     TXTTAB
00054Er 2  A6 7B                ldx     TXTTAB+1
000550r 2               L280D:
000550r 2               .ifdef KBD
000550r 2                       jsr     LF457
000550r 2                       bne     UNDERR
000550r 2               .else
000550r 2  20 rr rr             jsr     FL1
000553r 2  90 1E                bcc     UNDERR
000555r 2               .endif
000555r 2  A5 AE                lda     LOWTRX
000557r 2  E9 01                sbc     #$01
000559r 2  85 C9                sta     TXTPTR
00055Br 2  A5 AF                lda     LOWTRX+1
00055Dr 2  E9 00                sbc     #$00
00055Fr 2  85 CA                sta     TXTPTR+1
000561r 2               L281E:
000561r 2  60                   rts
000562r 2               
000562r 2               ; ----------------------------------------------------------------------------
000562r 2               ; "POP" AND "RETURN" STATEMENTS
000562r 2               ; ----------------------------------------------------------------------------
000562r 2               POP:
000562r 2  D0 FD                bne     L281E
000564r 2  A9 FF                lda     #$FF
000566r 2               .ifdef CONFIG_2A
000566r 2                       sta     FORPNT+1 ; bugfix, wrong in AppleSoft II
000566r 2               .else
000566r 2  85 98                sta     FORPNT
000568r 2               .endif
000568r 2  20 rr rr             jsr     GTFORPNT
00056Br 2  9A                   txs
00056Cr 2  C9 8C                cmp     #TOKEN_GOSUB
00056Er 2  F0 0B                beq     RETURN
000570r 2  A2 16                ldx     #ERR_NOGOSUB
000572r 2  2C                   .byte   $2C
000573r 2               UNDERR:
000573r 2  A2 5A                ldx     #ERR_UNDEFSTAT
000575r 2  4C rr rr             jmp     ERROR
000578r 2               ; ----------------------------------------------------------------------------
000578r 2               SYNERR2:
000578r 2  4C rr rr             jmp     SYNERR
00057Br 2               ; ----------------------------------------------------------------------------
00057Br 2               RETURN:
00057Br 2  68                   pla
00057Cr 2  68                   pla
00057Dr 2  85 88                sta     CURLIN
00057Fr 2  68                   pla
000580r 2  85 89                sta     CURLIN+1
000582r 2  68                   pla
000583r 2  85 C9                sta     TXTPTR
000585r 2  68                   pla
000586r 2  85 CA                sta     TXTPTR+1
000588r 2               
000588r 2               ; ----------------------------------------------------------------------------
000588r 2               ; "DATA" STATEMENT
000588r 2               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
000588r 2               ; ----------------------------------------------------------------------------
000588r 2               DATA:
000588r 2  20 rr rr             jsr     DATAN
00058Br 2               
00058Br 2               ; ----------------------------------------------------------------------------
00058Br 2               ; ADD (Y) TO TXTPTR
00058Br 2               ; ----------------------------------------------------------------------------
00058Br 2               ADDON:
00058Br 2  98                   tya
00058Cr 2  18                   clc
00058Dr 2  65 C9                adc     TXTPTR
00058Fr 2  85 C9                sta     TXTPTR
000591r 2  90 02                bcc     L2852
000593r 2  E6 CA                inc     TXTPTR+1
000595r 2               L2852:
000595r 2  60                   rts
000596r 2               
000596r 2               ; ----------------------------------------------------------------------------
000596r 2               ; SCAN AHEAD TO NEXT ":" OR EOL
000596r 2               ; ----------------------------------------------------------------------------
000596r 2               DATAN:
000596r 2  A2 3A                ldx     #$3A
000598r 2  2C                   .byte   $2C
000599r 2               REMN:
000599r 2  A2 00                ldx     #$00
00059Br 2  86 5B                stx     CHARAC
00059Dr 2  A0 00                ldy     #$00
00059Fr 2  84 5C                sty     ENDCHR
0005A1r 2               L285E:
0005A1r 2  A5 5C                lda     ENDCHR
0005A3r 2  A6 5B                ldx     CHARAC
0005A5r 2  85 5B                sta     CHARAC
0005A7r 2  86 5C                stx     ENDCHR
0005A9r 2               L2866:
0005A9r 2  B1 C9                lda     (TXTPTR),y
0005ABr 2  F0 E8                beq     L2852
0005ADr 2  C5 5C                cmp     ENDCHR
0005AFr 2  F0 E4                beq     L2852
0005B1r 2  C8                   iny
0005B2r 2  C9 22                cmp     #$22
0005B4r 2               .ifndef CONFIG_11
0005B4r 2                       beq     L285E; old: swap & cont is faster
0005B4r 2                       bne     L2866
0005B4r 2               .else
0005B4r 2  D0 F3                bne     L2866; new: cont is faster
0005B6r 2  F0 E9                beq     L285E
0005B8r 2               .endif
0005B8r 2               
0005B8r 2               ; ----------------------------------------------------------------------------
0005B8r 2               ; "IF" STATEMENT
0005B8r 2               ; ----------------------------------------------------------------------------
0005B8r 2               IF:
0005B8r 2  20 rr rr             jsr     FRMEVL
0005BBr 2  20 C8 00             jsr     CHRGOT
0005BEr 2  C9 88                cmp     #TOKEN_GOTO
0005C0r 2  F0 05                beq     L2884
0005C2r 2  A9 A1                lda     #TOKEN_THEN
0005C4r 2  20 rr rr             jsr     SYNCHR
0005C7r 2               L2884:
0005C7r 2  A5 B0                lda     FAC
0005C9r 2  D0 05                bne     L288D
0005CBr 2               
0005CBr 2               ; ----------------------------------------------------------------------------
0005CBr 2               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
0005CBr 2               ; ----------------------------------------------------------------------------
0005CBr 2               REM:
0005CBr 2  20 rr rr             jsr     REMN
0005CEr 2  F0 BB                beq     ADDON
0005D0r 2               L288D:
0005D0r 2  20 C8 00             jsr     CHRGOT
0005D3r 2  B0 03                bcs     L2895
0005D5r 2  4C rr rr             jmp     GOTO
0005D8r 2               L2895:
0005D8r 2  4C rr rr             jmp     EXECUTE_STATEMENT
0005DBr 2               
0005DBr 2               ; ----------------------------------------------------------------------------
0005DBr 2               ; "ON" STATEMENT
0005DBr 2               ;
0005DBr 2               ; ON <EXP> GOTO <LIST>
0005DBr 2               ; ON <EXP> GOSUB <LIST>
0005DBr 2               ; ----------------------------------------------------------------------------
0005DBr 2               ON:
0005DBr 2  20 rr rr             jsr     GETBYT
0005DEr 2  48                   pha
0005DFr 2  C9 8C                cmp     #TOKEN_GOSUB
0005E1r 2  F0 04                beq     L28A4
0005E3r 2               L28A0:
0005E3r 2  C9 88                cmp     #TOKEN_GOTO
0005E5r 2  D0 91                bne     SYNERR2
0005E7r 2               L28A4:
0005E7r 2  C6 B4                dec     FAC_LAST
0005E9r 2  D0 04                bne     L28AC
0005EBr 2  68                   pla
0005ECr 2  4C rr rr             jmp     EXECUTE_STATEMENT1
0005EFr 2               L28AC:
0005EFr 2  20 C2 00             jsr     CHRGET
0005F2r 2  20 rr rr             jsr     LINGET
0005F5r 2  C9 2C                cmp     #$2C
0005F7r 2  F0 EE                beq     L28A4
0005F9r 2  68                   pla
0005FAr 2               L28B7:
0005FAr 2  60                   rts
0005FBr 2               
0005FBr 1               .include "misc1.s"
0005FBr 2               .segment "CODE"
0005FBr 2               
0005FBr 2               ; ----------------------------------------------------------------------------
0005FBr 2               ; CONVERT LINE NUMBER
0005FBr 2               ; ----------------------------------------------------------------------------
0005FBr 2               LINGET:
0005FBr 2  A2 00                ldx     #$00
0005FDr 2  86 11                stx     LINNUM
0005FFr 2  86 12                stx     LINNUM+1
000601r 2               L28BE:
000601r 2  B0 F7                bcs     L28B7
000603r 2  E9 2F                sbc     #$2F
000605r 2  85 5B                sta     CHARAC
000607r 2  A5 12                lda     LINNUM+1
000609r 2  85 71                sta     INDEX
00060Br 2  C9 19                cmp     #$19
00060Dr 2  B0 D4                bcs     L28A0
00060Fr 2               ; <<<<<DANGEROUS CODE>>>>>
00060Fr 2               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
00060Fr 2               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
00060Fr 2               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
00060Fr 2               ; FOR OTHER CALLS TO LINGET.
00060Fr 2               ;
00060Fr 2               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
00060Fr 2               ; THEN TYPE "GO TO 437761".
00060Fr 2               ;
00060Fr 2               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
00060Fr 2               ; THE PROBLEM.  ($AB00 - $ABFF)
00060Fr 2               ; <<<<<DANGEROUS CODE>>>>>
00060Fr 2  A5 11                lda     LINNUM
000611r 2  0A                   asl     a
000612r 2  26 71                rol     INDEX
000614r 2  0A                   asl     a
000615r 2  26 71                rol     INDEX
000617r 2  65 11                adc     LINNUM
000619r 2  85 11                sta     LINNUM
00061Br 2  A5 71                lda     INDEX
00061Dr 2  65 12                adc     LINNUM+1
00061Fr 2  85 12                sta     LINNUM+1
000621r 2  06 11                asl     LINNUM
000623r 2  26 12                rol     LINNUM+1
000625r 2  A5 11                lda     LINNUM
000627r 2  65 5B                adc     CHARAC
000629r 2  85 11                sta     LINNUM
00062Br 2  90 02                bcc     L28EC
00062Dr 2  E6 12                inc     LINNUM+1
00062Fr 2               L28EC:
00062Fr 2  20 C2 00             jsr     CHRGET
000632r 2  4C rr rr             jmp     L28BE
000635r 2               
000635r 2               ; ----------------------------------------------------------------------------
000635r 2               ; "LET" STATEMENT
000635r 2               ;
000635r 2               ; LET <VAR> = <EXP>
000635r 2               ; <VAR> = <EXP>
000635r 2               ; ----------------------------------------------------------------------------
000635r 2               LET:
000635r 2  20 rr rr             jsr     PTRGET
000638r 2  85 98                sta     FORPNT
00063Ar 2  84 99                sty     FORPNT+1
00063Cr 2  A9 AC                lda     #TOKEN_EQUAL
00063Er 2  20 rr rr             jsr     SYNCHR
000641r 2               .ifndef CONFIG_SMALL
000641r 2  A5 60                lda     VALTYP+1
000643r 2  48                   pha
000644r 2               .endif
000644r 2  A5 5F                lda     VALTYP
000646r 2  48                   pha
000647r 2  20 rr rr             jsr     FRMEVL
00064Ar 2  68                   pla
00064Br 2  2A                   rol     a
00064Cr 2  20 rr rr             jsr     CHKVAL
00064Fr 2  D0 18                bne     LETSTRING
000651r 2               .ifndef CONFIG_SMALL
000651r 2  68                   pla
000652r 2               LET2:
000652r 2  10 12                bpl     L2923
000654r 2  20 rr rr             jsr     ROUND_FAC
000657r 2  20 rr rr             jsr     AYINT
00065Ar 2  A0 00                ldy     #$00
00065Cr 2  A5 B3                lda     FAC+3
00065Er 2  91 98                sta     (FORPNT),y
000660r 2  C8                   iny
000661r 2  A5 B4                lda     FAC+4
000663r 2  91 98                sta     (FORPNT),y
000665r 2  60                   rts
000666r 2               L2923:
000666r 2               .endif
000666r 2               
000666r 2               ; ----------------------------------------------------------------------------
000666r 2               ; REAL VARIABLE = EXPRESSION
000666r 2               ; ----------------------------------------------------------------------------
000666r 2  4C rr rr             jmp     SETFOR
000669r 2               LETSTRING:
000669r 2               .ifndef CONFIG_SMALL
000669r 2  68                   pla
00066Ar 2               .endif
00066Ar 2               
00066Ar 2               ; ----------------------------------------------------------------------------
00066Ar 2               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
00066Ar 2               ; ----------------------------------------------------------------------------
00066Ar 2               PUTSTR:
00066Ar 2               .ifdef CONFIG_CBM_ALL
00066Ar 2                       ldy     FORPNT+1
00066Ar 2                 .ifdef CBM1
00066Ar 2                       cpy     #$D0	; TI$
00066Ar 2                 .else
00066Ar 2                       cpy     #$DE
00066Ar 2                 .endif
00066Ar 2                       bne     LC92B
00066Ar 2                       jsr     FREFAC
00066Ar 2                       cmp     #$06
00066Ar 2                 .ifdef CBM2
00066Ar 2                       bne     IQERR1
00066Ar 2                 .else
00066Ar 2                       jne     IQERR
00066Ar 2                 .endif
00066Ar 2                       ldy     #$00
00066Ar 2                       sty     FAC
00066Ar 2                       sty     FACSIGN
00066Ar 2               LC8E8:
00066Ar 2                       sty     STRNG2
00066Ar 2                       jsr     LC91C
00066Ar 2                       jsr     MUL10
00066Ar 2                       inc     STRNG2
00066Ar 2                       ldy     STRNG2
00066Ar 2                       jsr     LC91C
00066Ar 2                       jsr     COPY_FAC_TO_ARG_ROUNDED
00066Ar 2                       tax
00066Ar 2                       beq     LC902
00066Ar 2                       inx
00066Ar 2                       txa
00066Ar 2                       jsr     LD9BF
00066Ar 2               LC902:
00066Ar 2                       ldy     STRNG2
00066Ar 2                       iny
00066Ar 2                       cpy     #$06
00066Ar 2                       bne     LC8E8
00066Ar 2                       jsr     MUL10
00066Ar 2                       jsr     QINT
00066Ar 2                       ldx     #$02
00066Ar 2                       sei
00066Ar 2               LC912:
00066Ar 2                       lda     FAC+2,x
00066Ar 2                       sta     TISTR,x
00066Ar 2                       dex
00066Ar 2                       bpl     LC912
00066Ar 2                       cli
00066Ar 2                       rts
00066Ar 2               LC91C:
00066Ar 2                       lda     (INDEX),y
00066Ar 2                       jsr     CHRGOT2
00066Ar 2                       bcc     LC926
00066Ar 2               IQERR1:
00066Ar 2                       jmp     IQERR
00066Ar 2               LC926:
00066Ar 2                       sbc     #$2F
00066Ar 2                       jmp     ADDACC
00066Ar 2               LC92B:
00066Ar 2               .endif
00066Ar 2  A0 02                ldy     #$02
00066Cr 2  B1 B3                lda     (FAC_LAST-1),y
00066Er 2  C5 83                cmp     FRETOP+1
000670r 2  90 17                bcc     L2946
000672r 2  D0 07                bne     L2938
000674r 2  88                   dey
000675r 2  B1 B3                lda     (FAC_LAST-1),y
000677r 2  C5 82                cmp     FRETOP
000679r 2  90 0E                bcc     L2946
00067Br 2               L2938:
00067Br 2  A4 B4                ldy     FAC_LAST
00067Dr 2  C4 7D                cpy     VARTAB+1
00067Fr 2  90 08                bcc     L2946
000681r 2  D0 0D                bne     L294D
000683r 2  A5 B3                lda     FAC_LAST-1
000685r 2  C5 7C                cmp     VARTAB
000687r 2  B0 07                bcs     L294D
000689r 2               L2946:
000689r 2  A5 B3                lda     FAC_LAST-1
00068Br 2  A4 B4                ldy     FAC_LAST
00068Dr 2  4C rr rr             jmp     L2963
000690r 2               L294D:
000690r 2  A0 00                ldy     #$00
000692r 2  B1 B3                lda     (FAC_LAST-1),y
000694r 2  20 rr rr             jsr     STRINI
000697r 2  A5 9F                lda     DSCPTR
000699r 2  A4 A0                ldy     DSCPTR+1
00069Br 2  85 BE                sta     STRNG1
00069Dr 2  84 BF                sty     STRNG1+1
00069Fr 2  20 rr rr             jsr     MOVINS
0006A2r 2  A9 B0                lda     #FAC
0006A4r 2  A0 00                ldy     #$00
0006A6r 2               L2963:
0006A6r 2  85 9F                sta     DSCPTR
0006A8r 2  84 A0                sty     DSCPTR+1
0006AAr 2  20 rr rr             jsr     FRETMS
0006ADr 2  A0 00                ldy     #$00
0006AFr 2  B1 9F                lda     (DSCPTR),y
0006B1r 2  91 98                sta     (FORPNT),y
0006B3r 2  C8                   iny
0006B4r 2  B1 9F                lda     (DSCPTR),y
0006B6r 2  91 98                sta     (FORPNT),y
0006B8r 2  C8                   iny
0006B9r 2  B1 9F                lda     (DSCPTR),y
0006BBr 2  91 98                sta     (FORPNT),y
0006BDr 2  60                   rts
0006BEr 2               .ifdef CONFIG_FILE
0006BEr 2               PRINTH:
0006BEr 2                       jsr     CMD
0006BEr 2                       jmp     LCAD6
0006BEr 2               CMD:
0006BEr 2                       jsr     GETBYT
0006BEr 2                       beq     LC98F
0006BEr 2                       lda     #$2C
0006BEr 2                       jsr     SYNCHR
0006BEr 2               LC98F:
0006BEr 2                       php
0006BEr 2                       jsr     CHKOUT
0006BEr 2                       stx     CURDVC
0006BEr 2                       plp
0006BEr 2                       jmp     PRINT
0006BEr 2               .endif
0006BEr 2               
0006BEr 2               
0006BEr 1               .include "print.s"
0006BEr 2               .segment "CODE"
0006BEr 2               
0006BEr 2               PRSTRING:
0006BEr 2  20 rr rr             jsr     STRPRT
0006C1r 2               L297E:
0006C1r 2  20 C8 00             jsr     CHRGOT
0006C4r 2               
0006C4r 2               ; ----------------------------------------------------------------------------
0006C4r 2               ; "PRINT" STATEMENT
0006C4r 2               ; ----------------------------------------------------------------------------
0006C4r 2               PRINT:
0006C4r 2  F0 3C                beq     CRDO
0006C6r 2               PRINT2:
0006C6r 2  F0 58                beq     L29DD
0006C8r 2  C9 9D                cmp     #TOKEN_TAB
0006CAr 2  F0 6C                beq     L29F5
0006CCr 2  C9 A0                cmp     #TOKEN_SPC
0006CEr 2               .ifdef CONFIG_2
0006CEr 2                       clc	; also AppleSoft II
0006CEr 2               .endif
0006CEr 2  F0 68                beq     L29F5
0006D0r 2  C9 2C                cmp     #','
0006D2r 2               ; Pre-KIM had no CLC. KIM added the CLC
0006D2r 2               ; here. Post-KIM moved the CLC up...
0006D2r 2               ; (makes no sense on KIM, liveness = 0)
0006D2r 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
0006D2r 2  18                   clc
0006D3r 2               .endif
0006D3r 2  F0 4C                beq     L29DE
0006D5r 2  C9 3B                cmp     #$3B
0006D7r 2  F0 77                beq     L2A0D
0006D9r 2  20 rr rr             jsr     FRMEVL
0006DCr 2  24 5F                bit     VALTYP
0006DEr 2  30 DE                bmi     PRSTRING
0006E0r 2  20 rr rr             jsr     FOUT
0006E3r 2  20 rr rr             jsr     STRLIT
0006E6r 2               .ifndef CONFIG_NO_CR
0006E6r 2  A0 00                ldy     #$00
0006E8r 2  B1 B3                lda     (FAC_LAST-1),y
0006EAr 2  18                   clc
0006EBr 2  65 0E                adc     POSX
0006EDr 2                 .ifdef KBD
0006EDr 2                       cmp     #$28
0006EDr 2                 .else
0006EDr 2  C5 0F                cmp     Z17
0006EFr 2                 .endif
0006EFr 2  90 03                bcc     L29B1
0006F1r 2  20 rr rr             jsr     CRDO
0006F4r 2               L29B1:
0006F4r 2               .endif
0006F4r 2  20 rr rr             jsr     STRPRT
0006F7r 2               .ifdef KBD
0006F7r 2                       jmp     L297E
0006F7r 2               .else
0006F7r 2  20 rr rr             jsr     OUTSP
0006FAr 2  D0 C5                bne     L297E ; branch always
0006FCr 2               .endif
0006FCr 2               
0006FCr 2               .ifdef KBD
0006FCr 2               ; PATCHES
0006FCr 2               LE86C:
0006FCr 2                       pla
0006FCr 2                       jmp     CONTROL_C_TYPED
0006FCr 2               LE870:
0006FCr 2                       jsr     GETBYT
0006FCr 2                       txa
0006FCr 2               LE874:
0006FCr 2                       beq     LE878
0006FCr 2                       bpl     LE8F2
0006FCr 2               LE878:
0006FCr 2                       jmp     IQERR
0006FCr 2               ; PATCHES
0006FCr 2               .endif
0006FCr 2               
0006FCr 2               
0006FCr 2               
0006FCr 2               .ifndef KBD
0006FCr 2               L29B9:
0006FCr 2                 .ifdef CBM2
0006FCr 2                       lda     #$00
0006FCr 2                       sta     INPUTBUFFER,x
0006FCr 2                       ldx     #<(INPUTBUFFER-1)
0006FCr 2                       ldy     #>(INPUTBUFFER-1)
0006FCr 2                 .else
0006FCr 2                   .ifndef APPLE
0006FCr 2  A0 00                ldy     #$00
0006FEr 2  94 13                sty     INPUTBUFFER,x
000700r 2  A2 12                ldx     #LINNUM+1
000702r 2                   .endif
000702r 2                   .ifdef MICROTAN
000702r 2                       bne     CRDO2
000702r 2               	.endif
000702r 2                 .endif
000702r 2                 .ifdef CONFIG_FILE
000702r 2                       lda     CURDVC
000702r 2                       bne     L29DD
000702r 2                 .endif
000702r 2               .endif
000702r 2               
000702r 2               
000702r 2               CRDO:
000702r 2               .if .def(CONFIG_PRINTNULLS) && .def(CONFIG_FILE)
000702r 2                       lda     CURDVC
000702r 2                       bne     LC9D8
000702r 2                       sta     POSX
000702r 2               LC9D8:
000702r 2               .endif
000702r 2  A9 0D                lda     #CRLF_1
000704r 2               .ifndef CONFIG_CBM_ALL
000704r 2  85 0E                sta     POSX
000706r 2               .endif
000706r 2  20 rr rr             jsr     OUTDO
000709r 2               CRDO2:
000709r 2  A9 0A                lda     #CRLF_2
00070Br 2  20 rr rr             jsr     OUTDO
00070Er 2               
00070Er 2               PRINTNULLS:
00070Er 2               .ifdef KBD
00070Er 2                       lda     #$00
00070Er 2                       sta     POSX
00070Er 2                       eor     #$FF
00070Er 2               .else
00070Er 2                 .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
00070Er 2                   .ifdef CONFIG_FILE
00070Er 2                   ; Although there is no statement for it,
00070Er 2                   ; CBM1 had NULL support and ignores
00070Er 2                   ; it when not targeting the screen,
00070Er 2                   ; CBM2 dropped it completely.
00070Er 2                       lda     CURDVC
00070Er 2                       bne     L29DD
00070Er 2                   .endif
00070Er 2  8A                   txa
00070Fr 2  48                   pha
000710r 2  A6 0D                ldx     Z15
000712r 2  F0 08                beq     L29D9
000714r 2  A9 00                lda     #$00
000716r 2               L29D3:
000716r 2  20 rr rr             jsr     OUTDO
000719r 2  CA                   dex
00071Ar 2  D0 FA                bne     L29D3
00071Cr 2               L29D9:
00071Cr 2  86 0E                stx     POSX
00071Er 2  68                   pla
00071Fr 2  AA                   tax
000720r 2                 .else
000720r 2                   .ifndef CONFIG_2
000720r 2                       lda     #$00
000720r 2                       sta     POSX
000720r 2                   .endif
000720r 2                       eor     #$FF
000720r 2                 .endif
000720r 2               .endif
000720r 2               L29DD:
000720r 2  60                   rts
000721r 2               L29DE:
000721r 2  A5 0E                lda     POSX
000723r 2               .ifndef CONFIG_NO_CR
000723r 2                 .ifdef KBD
000723r 2                       cmp     #$1A
000723r 2                 .else
000723r 2  C5 10                cmp     Z18
000725r 2                 .endif
000725r 2  90 06                bcc     L29EA
000727r 2  20 rr rr             jsr     CRDO
00072Ar 2  4C rr rr             jmp     L2A0D
00072Dr 2               L29EA:
00072Dr 2               .endif
00072Dr 2  38                   sec
00072Er 2               L29EB:
00072Er 2               .ifdef CONFIG_CBM_ALL
00072Er 2                       sbc     #$0A
00072Er 2               .else
00072Er 2                 .ifdef KBD
00072Er 2                       sbc     #$0D
00072Er 2                 .else
00072Er 2  E9 0E                sbc     #$0E
000730r 2                 .endif
000730r 2               .endif
000730r 2  B0 FC                bcs     L29EB
000732r 2  49 FF                eor     #$FF
000734r 2  69 01                adc     #$01
000736r 2  D0 13                bne     L2A08
000738r 2               L29F5:
000738r 2               .ifdef CONFIG_11A
000738r 2  08                   php
000739r 2               .else
000739r 2                       pha
000739r 2               .endif
000739r 2  20 rr rr             jsr     GTBYTC
00073Cr 2  C9 29                cmp     #')'
00073Er 2               .ifdef CONFIG_11A
00073Er 2                 .ifdef CONFIG_2
00073Er 2                       bne     SYNERR4
00073Er 2                 .else
00073Er 2  F0 03 4C rr          jne     SYNERR
000742r 2  rr           
000743r 2                 .endif
000743r 2  28                   plp
000744r 2  90 06                bcc     L2A09
000746r 2               .else
000746r 2                 .ifdef CONFIG_11
000746r 2                       jne     SYNERR
000746r 2                 .else
000746r 2                       bne     SYNERR4
000746r 2                 .endif
000746r 2                       pla
000746r 2                       cmp     #TOKEN_TAB
000746r 2                 .ifdef CONFIG_11
000746r 2                       bne     L2A09
000746r 2                 .else
000746r 2                       bne     L2A0A
000746r 2                 .endif
000746r 2               .endif
000746r 2  8A                   txa
000747r 2  E5 0E                sbc     POSX
000749r 2  90 05                bcc     L2A0D
00074Br 2               .ifndef CONFIG_11
00074Br 2                       beq     L2A0D
00074Br 2               .endif
00074Br 2               L2A08:
00074Br 2  AA                   tax
00074Cr 2               .ifdef CONFIG_11
00074Cr 2               L2A09:
00074Cr 2  E8                   inx
00074Dr 2               .endif
00074Dr 2               L2A0A:
00074Dr 2               .ifndef CONFIG_11
00074Dr 2                       jsr     OUTSP
00074Dr 2               .endif
00074Dr 2  CA                   dex
00074Er 2               .ifndef CONFIG_11
00074Er 2                       bne     L2A0A
00074Er 2               .else
00074Er 2  D0 06                bne     L2A13
000750r 2               .endif
000750r 2               L2A0D:
000750r 2  20 C2 00             jsr     CHRGET
000753r 2  4C rr rr             jmp     PRINT2
000756r 2               .ifdef CONFIG_11
000756r 2               L2A13:
000756r 2  20 rr rr             jsr     OUTSP
000759r 2  D0 F2                bne     L2A0A
00075Br 2               .endif
00075Br 2               
00075Br 2               ; ----------------------------------------------------------------------------
00075Br 2               ; PRINT STRING AT (Y,A)
00075Br 2               ; ----------------------------------------------------------------------------
00075Br 2               STROUT:
00075Br 2  20 rr rr             jsr     STRLIT
00075Er 2               
00075Er 2               ; ----------------------------------------------------------------------------
00075Er 2               ; PRINT STRING AT (FACMO,FACLO)
00075Er 2               ; ----------------------------------------------------------------------------
00075Er 2               STRPRT:
00075Er 2  20 rr rr             jsr     FREFAC
000761r 2  AA                   tax
000762r 2  A0 00                ldy     #$00
000764r 2  E8                   inx
000765r 2               L2A22:
000765r 2  CA                   dex
000766r 2  F0 B8                beq     L29DD
000768r 2  B1 71                lda     (INDEX),y
00076Ar 2  20 rr rr             jsr     OUTDO
00076Dr 2  C8                   iny
00076Er 2  C9 0D                cmp     #$0D
000770r 2  D0 F3                bne     L2A22
000772r 2  20 rr rr             jsr     PRINTNULLS
000775r 2  4C rr rr             jmp     L2A22
000778r 2               ; ----------------------------------------------------------------------------
000778r 2               OUTSP:
000778r 2               .ifdef CONFIG_FILE
000778r 2                 .ifndef CBM1
000778r 2               ; on non-screen devices, print SPACE
000778r 2               ; instead of CRSR RIGHT
000778r 2                       lda     CURDVC
000778r 2                       beq     LCA40
000778r 2                       lda     #$20
000778r 2                       .byte   $2C
000778r 2               LCA40:
000778r 2                 .endif
000778r 2                       lda     #$1D ; CRSR RIGHT
000778r 2               .else
000778r 2  A9 20                lda     #$20
00077Ar 2               .endif
00077Ar 2  2C                   .byte   $2C
00077Br 2               OUTQUES:
00077Br 2  A9 3F                lda     #$3F
00077Dr 2               
00077Dr 2               ; ----------------------------------------------------------------------------
00077Dr 2               ; PRINT CHAR FROM (A)
00077Dr 2               ; ----------------------------------------------------------------------------
00077Dr 2               OUTDO:
00077Dr 2               .ifndef KBD
00077Dr 2  24 65                bit     Z14
00077Fr 2  30 18                bmi     L2A56
000781r 2               .endif
000781r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
000781r 2               ; Commodore forgot to remove this in CBM1
000781r 2  48                   pha
000782r 2               .endif
000782r 2               .ifdef CBM1
000782r 2                       cmp     #$1D ; CRSR RIGHT
000782r 2                       beq     LCA6A
000782r 2                       cmp     #$9D ; CRSR LEFT
000782r 2                       beq     LCA5A
000782r 2                       cmp     #$14 ; DEL
000782r 2                       bne     LCA64
000782r 2               LCA5A:
000782r 2                       lda     POSX
000782r 2                       beq     L2A4E
000782r 2                       lda     CURDVC
000782r 2                       bne     L2A4E
000782r 2                       dec     POSX
000782r 2               LCA64:
000782r 2                       and     #$7F
000782r 2               .endif
000782r 2               .ifndef CBM2
000782r 2  C9 20                cmp     #$20
000784r 2  90 0B                bcc     L2A4E
000786r 2               .endif
000786r 2               LCA6A:
000786r 2               .ifdef CONFIG_CBM1_PATCHES
000786r 2                       lda     CURDVC
000786r 2                       jsr     PATCH6
000786r 2                       nop
000786r 2               .endif
000786r 2               .ifdef CONFIG_PRINT_CR
000786r 2  A5 0E                lda     POSX
000788r 2  C5 0F                cmp     Z17
00078Ar 2  D0 03                bne     L2A4C
00078Cr 2                 .ifdef APPLE
00078Cr 2                       nop ; PATCH!
00078Cr 2                       nop ; don't print CR
00078Cr 2                       nop
00078Cr 2                 .else
00078Cr 2  20 rr rr             jsr     CRDO
00078Fr 2                 .endif
00078Fr 2               L2A4C:
00078Fr 2               .endif
00078Fr 2               .ifndef CONFIG_CBM_ALL
00078Fr 2  E6 0E                inc     POSX
000791r 2               .endif
000791r 2               L2A4E:
000791r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
000791r 2               ; Commodore forgot to remove this in CBM1
000791r 2  68                   pla
000792r 2               .endif
000792r 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
000792r 2                       sty     DIMFLG
000792r 2               .endif
000792r 2               .ifdef CONFIG_IO_MSB
000792r 2                       ora     #$80
000792r 2               .endif
000792r 2  20 rr rr             jsr     MONCOUT
000795r 2               .ifdef CONFIG_IO_MSB
000795r 2                       and     #$7F
000795r 2               .endif
000795r 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
000795r 2                       ldy     DIMFLG
000795r 2               .endif
000795r 2               .ifdef OSI
000795r 2  EA                   nop
000796r 2  EA                   nop
000797r 2  EA                   nop
000798r 2  EA                   nop
000799r 2               .endif
000799r 2               L2A56:
000799r 2  29 FF                and     #$FF
00079Br 2               LE8F2:
00079Br 2  60                   rts
00079Cr 2               
00079Cr 2               ; ----------------------------------------------------------------------------
00079Cr 2               ; ???
00079Cr 2               ; ----------------------------------------------------------------------------
00079Cr 2               .ifdef KBD
00079Cr 2               LE8F3:
00079Cr 2                       pha
00079Cr 2                       lda     $047F
00079Cr 2                       clc
00079Cr 2                       beq     LE900
00079Cr 2                       lda     #$00
00079Cr 2                       sta     $047F
00079Cr 2                       sec
00079Cr 2               LE900:
00079Cr 2                       pla
00079Cr 2                       rts
00079Cr 2               .endif
00079Cr 2               
00079Cr 1               .include "input.s"
00079Cr 2               .segment "CODE"
00079Cr 2               
00079Cr 2               ; ----------------------------------------------------------------------------
00079Cr 2               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
00079Cr 2               ; IN NUMERIC FIELD.  MUST DISTINGUISH
00079Cr 2               ; BETWEEN INPUT, READ, AND GET
00079Cr 2               ; ----------------------------------------------------------------------------
00079Cr 2               INPUTERR:
00079Cr 2  A5 63                lda     INPUTFLG
00079Er 2  F0 11                beq     RESPERR	; INPUT
0007A0r 2               .ifndef CONFIG_SMALL
0007A0r 2               .ifdef CONFIG_10A
0007A0r 2               ; without this, it treats GET errors
0007A0r 2               ; like READ errors
0007A0r 2  30 04                bmi     L2A63	; READ
0007A2r 2  A0 FF                ldy     #$FF	; GET
0007A4r 2  D0 04                bne     L2A67
0007A6r 2               L2A63:
0007A6r 2               .endif
0007A6r 2               .endif
0007A6r 2               .ifdef CONFIG_CBM1_PATCHES
0007A6r 2                       jsr     PATCH5
0007A6r 2               		nop
0007A6r 2               .else
0007A6r 2  A5 8E                lda     Z8C
0007A8r 2  A4 8F                ldy     Z8C+1
0007AAr 2               .endif
0007AAr 2               L2A67:
0007AAr 2  85 88                sta     CURLIN
0007ACr 2  84 89                sty     CURLIN+1
0007AEr 2               SYNERR4:
0007AEr 2  4C rr rr             jmp     SYNERR
0007B1r 2               RESPERR:
0007B1r 2               .ifdef CONFIG_FILE
0007B1r 2                       lda     CURDVC
0007B1r 2                       beq     LCA8F
0007B1r 2                       ldx     #ERR_BADDATA
0007B1r 2                       jmp     ERROR
0007B1r 2               LCA8F:
0007B1r 2               .endif
0007B1r 2  A9 rr                lda     #<ERRREENTRY
0007B3r 2  A0 rr                ldy     #>ERRREENTRY
0007B5r 2  20 rr rr             jsr     STROUT
0007B8r 2  A5 8C                lda     OLDTEXT
0007BAr 2  A4 8D                ldy     OLDTEXT+1
0007BCr 2  85 C9                sta     TXTPTR
0007BEr 2  84 CA                sty     TXTPTR+1
0007C0r 2               RTS20:
0007C0r 2  60                   rts
0007C1r 2               
0007C1r 2               ; ----------------------------------------------------------------------------
0007C1r 2               ; "GET" STATEMENT
0007C1r 2               ; ----------------------------------------------------------------------------
0007C1r 2               .ifndef CONFIG_SMALL
0007C1r 2               GET:
0007C1r 2  20 rr rr             jsr     ERRDIR
0007C4r 2               ; CBM: if GET#, then switch input
0007C4r 2               .ifdef CONFIG_FILE
0007C4r 2                       cmp     #'#'
0007C4r 2                       bne     LCAB6
0007C4r 2                       jsr     CHRGET
0007C4r 2                       jsr     GETBYT
0007C4r 2                       lda     #','
0007C4r 2                       jsr     SYNCHR
0007C4r 2                       jsr     CHKIN
0007C4r 2                       stx     CURDVC
0007C4r 2               LCAB6:
0007C4r 2               .endif
0007C4r 2  A2 14                ldx     #<(INPUTBUFFER+1)
0007C6r 2  A0 00                ldy     #>(INPUTBUFFER+1)
0007C8r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
0007C8r 2                       lda     #$00
0007C8r 2                       sta     INPUTBUFFER+1
0007C8r 2               .else
0007C8r 2  84 14                sty     INPUTBUFFER+1
0007CAr 2               .endif
0007CAr 2  A9 40                lda     #$40
0007CCr 2  20 rr rr             jsr     PROCESS_INPUT_LIST
0007CFr 2               ; CBM: if GET#, then switch input back
0007CFr 2               .ifdef CONFIG_FILE
0007CFr 2                       ldx     CURDVC
0007CFr 2                       bne     LCAD8
0007CFr 2               .endif
0007CFr 2  60                   rts
0007D0r 2               .endif
0007D0r 2               
0007D0r 2               ; ----------------------------------------------------------------------------
0007D0r 2               ; "INPUT#" STATEMENT
0007D0r 2               ; ----------------------------------------------------------------------------
0007D0r 2               .ifdef CONFIG_FILE
0007D0r 2               INPUTH:
0007D0r 2                       jsr     GETBYT
0007D0r 2                       lda     #$2C
0007D0r 2                       jsr     SYNCHR
0007D0r 2                       jsr     CHKIN
0007D0r 2                       stx     CURDVC
0007D0r 2                       jsr     L2A9E
0007D0r 2               LCAD6:
0007D0r 2                       lda     CURDVC
0007D0r 2               LCAD8:
0007D0r 2                       jsr     CLRCH
0007D0r 2                       ldx     #$00
0007D0r 2                       stx     CURDVC
0007D0r 2                       rts
0007D0r 2               LCAE0:
0007D0r 2               .endif
0007D0r 2               
0007D0r 2               ; ----------------------------------------------------------------------------
0007D0r 2               ; "INPUT" STATEMENT
0007D0r 2               ; ----------------------------------------------------------------------------
0007D0r 2               INPUT:
0007D0r 2               .ifndef KBD
0007D0r 2  46 65                lsr     Z14
0007D2r 2               .endif
0007D2r 2  C9 22                cmp     #$22
0007D4r 2  D0 0B                bne     L2A9E
0007D6r 2  20 rr rr             jsr     STRTXT
0007D9r 2  A9 3B                lda     #$3B
0007DBr 2  20 rr rr             jsr     SYNCHR
0007DEr 2  20 rr rr             jsr     STRPRT
0007E1r 2               L2A9E:
0007E1r 2  20 rr rr             jsr     ERRDIR
0007E4r 2  A9 2C                lda     #$2C
0007E6r 2  85 12                sta     INPUTBUFFER-1
0007E8r 2               LCAF8:
0007E8r 2               .ifdef APPLE
0007E8r 2                       jsr     INLINX
0007E8r 2               .else
0007E8r 2  20 rr rr             jsr     NXIN
0007EBr 2               .endif
0007EBr 2               .ifdef KBD
0007EBr 2                       bmi     L2ABE
0007EBr 2               .else
0007EBr 2                 .ifdef CONFIG_FILE
0007EBr 2                       lda     CURDVC
0007EBr 2                       beq     LCB0C
0007EBr 2                       lda     Z96
0007EBr 2                       and     #$02
0007EBr 2                       beq     LCB0C
0007EBr 2                       jsr     LCAD6
0007EBr 2                       jmp     DATA
0007EBr 2               LCB0C:
0007EBr 2                 .endif
0007EBr 2  A5 13                lda     INPUTBUFFER
0007EDr 2  D0 12                bne     L2ABE
0007EFr 2                 .ifdef CONFIG_FILE
0007EFr 2                       lda     CURDVC
0007EFr 2                       bne     LCAF8
0007EFr 2                 .endif
0007EFr 2                 .ifdef CONFIG_CBM1_PATCHES
0007EFr 2                       jmp     PATCH1
0007EFr 2                 .else
0007EFr 2  18                   clc
0007F0r 2  4C rr rr             jmp     CONTROL_C_TYPED
0007F3r 2                 .endif
0007F3r 2               .endif
0007F3r 2               
0007F3r 2               NXIN:
0007F3r 2               .ifdef KBD
0007F3r 2                       jsr     INLIN
0007F3r 2                       bmi     RTS20
0007F3r 2                       pla
0007F3r 2                       jmp     LE86C
0007F3r 2               .else
0007F3r 2                 .ifdef CONFIG_FILE
0007F3r 2                       lda     CURDVC
0007F3r 2                       bne     LCB21
0007F3r 2                 .endif
0007F3r 2  20 rr rr             jsr     OUTQUES	; '?'
0007F6r 2  20 rr rr             jsr     OUTSP
0007F9r 2               LCB21:
0007F9r 2  4C rr rr             jmp     INLIN
0007FCr 2               .endif
0007FCr 2               
0007FCr 2               ; ----------------------------------------------------------------------------
0007FCr 2               ; "GETC" STATEMENT
0007FCr 2               ; ----------------------------------------------------------------------------
0007FCr 2               .ifdef KBD
0007FCr 2               GETC:
0007FCr 2                       jsr     CONINT
0007FCr 2                       jsr     LF43D
0007FCr 2                       jmp     LE664
0007FCr 2               .endif
0007FCr 2               
0007FCr 2               ; ----------------------------------------------------------------------------
0007FCr 2               ; "READ" STATEMENT
0007FCr 2               ; ----------------------------------------------------------------------------
0007FCr 2               READ:
0007FCr 2  A6 90                ldx     DATPTR
0007FEr 2  A4 91                ldy     DATPTR+1
000800r 2               .ifdef CONFIG_NO_READ_Y_IS_ZERO_HACK
000800r 2               ; AppleSoft II, too
000800r 2                       lda     #$98	; READ
000800r 2                       .byte   $2C
000800r 2               L2ABE:
000800r 2                       lda     #$00	; INPUT
000800r 2               .else
000800r 2  A9                   .byte   $A9	; LDA #$98
000801r 2               L2ABE:
000801r 2  98                   tya
000802r 2               .endif
000802r 2               
000802r 2               ; ----------------------------------------------------------------------------
000802r 2               ; PROCESS INPUT LIST
000802r 2               ;
000802r 2               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
000802r 2               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
000802r 2               ; 				$40 FOR GET
000802r 2               ;				$98 FOR READ
000802r 2               ; ----------------------------------------------------------------------------
000802r 2               PROCESS_INPUT_LIST:
000802r 2  85 63                sta     INPUTFLG
000804r 2  86 92                stx     INPTR
000806r 2  84 93                sty     INPTR+1
000808r 2               PROCESS_INPUT_ITEM:
000808r 2  20 rr rr             jsr     PTRGET
00080Br 2  85 98                sta     FORPNT
00080Dr 2  84 99                sty     FORPNT+1
00080Fr 2  A5 C9                lda     TXTPTR
000811r 2  A4 CA                ldy     TXTPTR+1
000813r 2  85 11                sta     TXPSV
000815r 2  84 12                sty     TXPSV+1
000817r 2  A6 92                ldx     INPTR
000819r 2  A4 93                ldy     INPTR+1
00081Br 2  86 C9                stx     TXTPTR
00081Dr 2  84 CA                sty     TXTPTR+1
00081Fr 2  20 C8 00             jsr     CHRGOT
000822r 2  D0 1B                bne     INSTART
000824r 2  24 63                bit     INPUTFLG
000826r 2               .ifndef CONFIG_SMALL ; GET
000826r 2  50 0B                bvc     L2AF0
000828r 2                 .ifdef MICROTAN
000828r 2                       jsr     MONRDKEY2
000828r 2                 .else
000828r 2  20 rr rr             jsr     MONRDKEY
00082Br 2                 .endif
00082Br 2                 .ifdef CONFIG_IO_MSB
00082Br 2                       and     #$7F
00082Br 2                 .endif
00082Br 2  85 13                sta     INPUTBUFFER
00082Dr 2               ; BUG: The beq/bne L2AF8 below is supposed
00082Dr 2               ; to be always taken. For this to happen,
00082Dr 2               ; the last load must be a 0 for beq
00082Dr 2               ; and != 0 for bne. The original Microsoft
00082Dr 2               ; code had ldx/ldy/bne here, which was only
00082Dr 2               ; correct for a non-ZP INPUTBUFFER. Commodore
00082Dr 2               ; fixed it in CBMBASIC V1 by swapping the
00082Dr 2               ; ldx and the ldy. It was broken on KIM,
00082Dr 2               ; but okay on APPLE and CBM2, because
00082Dr 2               ; these used a non-ZP INPUTBUFFER.
00082Dr 2               ; Microsoft fixed this somewhere after KIM
00082Dr 2               ; and before MICROTAN, by using beq instead
00082Dr 2               ; of bne in the ZP case.
00082Dr 2                 .ifdef CBM1
00082Dr 2                       ldy     #>(INPUTBUFFER-1)
00082Dr 2                       ldx     #<(INPUTBUFFER-1)
00082Dr 2                 .else
00082Dr 2  A2 12                ldx     #<(INPUTBUFFER-1)
00082Fr 2  A0 00                ldy     #>(INPUTBUFFER-1)
000831r 2                 .endif
000831r 2                 .if .def(CONFIG_2) && (!.def(CONFIG_NO_INPUTBUFFER_ZP))
000831r 2                       beq     L2AF8	; always
000831r 2                 .else
000831r 2  D0 08                bne     L2AF8	; always
000833r 2                 .endif
000833r 2               L2AF0:
000833r 2               .endif
000833r 2  30 71                bmi     FINDATA
000835r 2               .ifdef CONFIG_FILE
000835r 2                       lda     CURDVC
000835r 2                       bne     LCB64
000835r 2               .endif
000835r 2               .ifdef KBD
000835r 2                       jsr     OUTQUESSP
000835r 2               .else
000835r 2  20 rr rr             jsr     OUTQUES
000838r 2               .endif
000838r 2               LCB64:
000838r 2  20 rr rr             jsr     NXIN
00083Br 2               L2AF8:
00083Br 2  86 C9                stx     TXTPTR
00083Dr 2  84 CA                sty     TXTPTR+1
00083Fr 2               
00083Fr 2               ; ----------------------------------------------------------------------------
00083Fr 2               INSTART:
00083Fr 2  20 C2 00             jsr     CHRGET
000842r 2  24 5F                bit     VALTYP
000844r 2  10 31                bpl     L2B34
000846r 2               .ifndef CONFIG_SMALL ; GET
000846r 2  24 63                bit     INPUTFLG
000848r 2  50 09                bvc     L2B10
00084Ar 2                 .ifdef CONFIG_CBM1_PATCHES
00084Ar 2                       lda     #$00
00084Ar 2                       jsr     PATCH4
00084Ar 2                       nop
00084Ar 2                 .else
00084Ar 2  E8                   inx
00084Br 2  86 C9                stx     TXTPTR
00084Dr 2  A9 00                lda     #$00
00084Fr 2  85 5B                sta     CHARAC
000851r 2  F0 0C                beq     L2B1C
000853r 2                 .endif
000853r 2               L2B10:
000853r 2               .endif
000853r 2  85 5B                sta     CHARAC
000855r 2  C9 22                cmp     #$22
000857r 2  F0 07                beq     L2B1D
000859r 2  A9 3A                lda     #$3A
00085Br 2  85 5B                sta     CHARAC
00085Dr 2  A9 2C                lda     #$2C
00085Fr 2               L2B1C:
00085Fr 2  18                   clc
000860r 2               L2B1D:
000860r 2  85 5C                sta     ENDCHR
000862r 2  A5 C9                lda     TXTPTR
000864r 2  A4 CA                ldy     TXTPTR+1
000866r 2  69 00                adc     #$00
000868r 2  90 01                bcc     L2B28
00086Ar 2  C8                   iny
00086Br 2               L2B28:
00086Br 2  20 rr rr             jsr     STRLT2
00086Er 2  20 rr rr             jsr     POINT
000871r 2               .ifdef CONFIG_SMALL
000871r 2                       jsr     LETSTRING
000871r 2               .else
000871r 2  20 rr rr             jsr     PUTSTR
000874r 2               .endif
000874r 2  4C rr rr             jmp     INPUT_MORE
000877r 2               ; ----------------------------------------------------------------------------
000877r 2               L2B34:
000877r 2  20 rr rr             jsr     FIN
00087Ar 2               .ifdef CONFIG_SMALL
00087Ar 2                       jsr     SETFOR
00087Ar 2               .else
00087Ar 2  A5 60                lda     VALTYP+1
00087Cr 2  20 rr rr             jsr     LET2
00087Fr 2               .endif
00087Fr 2               ; ----------------------------------------------------------------------------
00087Fr 2               INPUT_MORE:
00087Fr 2  20 C8 00             jsr     CHRGOT
000882r 2  F0 07                beq     L2B48
000884r 2  C9 2C                cmp     #$2C
000886r 2  F0 03                beq     L2B48
000888r 2  4C rr rr             jmp     INPUTERR
00088Br 2               L2B48:
00088Br 2  A5 C9                lda     TXTPTR
00088Dr 2  A4 CA                ldy     TXTPTR+1
00088Fr 2  85 92                sta     INPTR
000891r 2  84 93                sty     INPTR+1
000893r 2  A5 11                lda     TXPSV
000895r 2  A4 12                ldy     TXPSV+1
000897r 2  85 C9                sta     TXTPTR
000899r 2  84 CA                sty     TXTPTR+1
00089Br 2  20 C8 00             jsr     CHRGOT
00089Er 2  F0 2C                beq     INPDONE
0008A0r 2  20 rr rr             jsr     CHKCOM
0008A3r 2  4C rr rr             jmp     PROCESS_INPUT_ITEM
0008A6r 2               ; ----------------------------------------------------------------------------
0008A6r 2               FINDATA:
0008A6r 2  20 rr rr             jsr     DATAN
0008A9r 2  C8                   iny
0008AAr 2  AA                   tax
0008ABr 2  D0 12                bne     L2B7C
0008ADr 2  A2 2A                ldx     #ERR_NODATA
0008AFr 2  C8                   iny
0008B0r 2  B1 C9                lda     (TXTPTR),y
0008B2r 2  F0 69                beq     GERR
0008B4r 2  C8                   iny
0008B5r 2  B1 C9                lda     (TXTPTR),y
0008B7r 2  85 8E                sta     Z8C
0008B9r 2  C8                   iny
0008BAr 2  B1 C9                lda     (TXTPTR),y
0008BCr 2  C8                   iny
0008BDr 2  85 8F                sta     Z8C+1
0008BFr 2               L2B7C:
0008BFr 2  B1 C9                lda     (TXTPTR),y
0008C1r 2  AA                   tax
0008C2r 2  20 rr rr             jsr     ADDON
0008C5r 2  E0 83                cpx     #$83
0008C7r 2  D0 DD                bne     FINDATA
0008C9r 2  4C rr rr             jmp     INSTART
0008CCr 2               ; ---NO MORE INPUT REQUESTED------
0008CCr 2               INPDONE:
0008CCr 2  A5 92                lda     INPTR
0008CEr 2  A4 93                ldy     INPTR+1
0008D0r 2  A6 63                ldx     INPUTFLG
0008D2r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_11))
0008D2r 2                       beq     L2B94 ; INPUT
0008D2r 2               .else
0008D2r 2  10 03                bpl     L2B94; INPUT or GET
0008D4r 2               .endif
0008D4r 2  4C rr rr             jmp     SETDA
0008D7r 2               L2B94:
0008D7r 2  A0 00                ldy     #$00
0008D9r 2  B1 92                lda     (INPTR),y
0008DBr 2  F0 07                beq     L2BA1
0008DDr 2               .ifdef CONFIG_FILE
0008DDr 2                       lda     CURDVC
0008DDr 2                       bne     L2BA1
0008DDr 2               .endif
0008DDr 2  A9 rr                lda     #<ERREXTRA
0008DFr 2  A0 rr                ldy     #>ERREXTRA
0008E1r 2  4C rr rr             jmp     STROUT
0008E4r 2               L2BA1:
0008E4r 2  60                   rts
0008E5r 2               
0008E5r 2               ; ----------------------------------------------------------------------------
0008E5r 2               ERREXTRA:
0008E5r 2               .ifdef KBD
0008E5r 2                       .byte   "?Extra"
0008E5r 2               .else
0008E5r 2  3F 45 58 54          .byte   "?EXTRA IGNORED"
0008E9r 2  52 41 20 49  
0008EDr 2  47 4E 4F 52  
0008F3r 2               .endif
0008F3r 2  0D 0A 00             .byte   $0D,$0A,$00
0008F6r 2               ERRREENTRY:
0008F6r 2               .ifdef KBD
0008F6r 2                       .byte   "What?"
0008F6r 2               .else
0008F6r 2  3F 52 45 44          .byte   "?REDO FROM START"
0008FAr 2  4F 20 46 52  
0008FEr 2  4F 4D 20 53  
000906r 2               .endif
000906r 2  0D 0A 00             .byte   $0D,$0A,$00
000909r 2               .ifdef KBD
000909r 2               LEA30:
000909r 2                       .byte   "B"
000909r 2                       .byte   $FD
000909r 2                       .byte   "GsBASIC"
000909r 2                       .byte   $00,$1B,$0D,$13
000909r 2                       .byte   " BASIC"
000909r 2               .endif
000909r 2               
000909r 1               .include "eval.s"
000909r 2               .segment "CODE"
000909r 2               
000909r 2               ; ----------------------------------------------------------------------------
000909r 2               ; "NEXT" STATEMENT
000909r 2               ; ----------------------------------------------------------------------------
000909r 2               NEXT:
000909r 2  D0 04                bne     NEXT1
00090Br 2  A0 00                ldy     #$00
00090Dr 2  F0 03                beq     NEXT2
00090Fr 2               NEXT1:
00090Fr 2  20 rr rr             jsr     PTRGET
000912r 2               NEXT2:
000912r 2  85 98                sta     FORPNT
000914r 2  84 99                sty     FORPNT+1
000916r 2  20 rr rr             jsr     GTFORPNT
000919r 2  F0 04                beq     NEXT3
00091Br 2  A2 00                ldx     #$00
00091Dr 2               GERR:
00091Dr 2  F0 69                beq     JERROR
00091Fr 2               NEXT3:
00091Fr 2  9A                   txs
000920r 2               .ifndef CONFIG_2
000920r 2  E8                   inx
000921r 2  E8                   inx
000922r 2  E8                   inx
000923r 2  E8                   inx
000924r 2               .endif
000924r 2  8A                   txa
000925r 2               .ifdef CONFIG_2
000925r 2                       clc
000925r 2                       adc     #$04
000925r 2                       pha
000925r 2                       adc     #BYTES_FP+1
000925r 2                       sta     DEST
000925r 2                       pla
000925r 2               .else
000925r 2  E8                   inx
000926r 2  E8                   inx
000927r 2  E8                   inx
000928r 2  E8                   inx
000929r 2  E8                   inx
00092Ar 2               .ifndef CONFIG_SMALL
00092Ar 2  E8                   inx
00092Br 2               .endif
00092Br 2  86 73                stx     DEST
00092Dr 2               .endif
00092Dr 2  A0 01                ldy     #>STACK
00092Fr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
000932r 2  BA                   tsx
000933r 2  BD 09 01             lda     STACK+BYTES_FP+4,x
000936r 2  85 B5                sta     FACSIGN
000938r 2  A5 98                lda     FORPNT
00093Ar 2  A4 99                ldy     FORPNT+1
00093Cr 2  20 rr rr             jsr     FADD
00093Fr 2  20 rr rr             jsr     SETFOR
000942r 2  A0 01                ldy     #>STACK
000944r 2  20 rr rr             jsr     FCOMP2
000947r 2  BA                   tsx
000948r 2  38                   sec
000949r 2  FD 09 01             sbc     STACK+BYTES_FP+4,x
00094Cr 2  F0 17                beq     L2C22
00094Er 2  BD 0F 01             lda     STACK+2*BYTES_FP+5,x
000951r 2  85 88                sta     CURLIN
000953r 2  BD 10 01             lda     STACK+2*BYTES_FP+6,x
000956r 2  85 89                sta     CURLIN+1
000958r 2  BD 12 01             lda     STACK+2*BYTES_FP+8,x
00095Br 2  85 C9                sta     TXTPTR
00095Dr 2  BD 11 01             lda     STACK+2*BYTES_FP+7,x
000960r 2  85 CA                sta     TXTPTR+1
000962r 2               L2C1F:
000962r 2  4C rr rr             jmp     NEWSTT
000965r 2               L2C22:
000965r 2  8A                   txa
000966r 2  69 11                adc     #2*BYTES_FP+7
000968r 2  AA                   tax
000969r 2  9A                   txs
00096Ar 2  20 C8 00             jsr     CHRGOT
00096Dr 2  C9 2C                cmp     #$2C
00096Fr 2  D0 F1                bne     L2C1F
000971r 2  20 C2 00             jsr     CHRGET
000974r 2  20 rr rr             jsr     NEXT1
000977r 2               
000977r 2               ; ----------------------------------------------------------------------------
000977r 2               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
000977r 2               ; ----------------------------------------------------------------------------
000977r 2               FRMNUM:
000977r 2  20 rr rr             jsr     FRMEVL
00097Ar 2               
00097Ar 2               ; ----------------------------------------------------------------------------
00097Ar 2               ; MAKE SURE (FAC) IS NUMERIC
00097Ar 2               ; ----------------------------------------------------------------------------
00097Ar 2               CHKNUM:
00097Ar 2  18                   clc
00097Br 2  24                   .byte   $24
00097Cr 2               
00097Cr 2               ; ----------------------------------------------------------------------------
00097Cr 2               ; MAKE SURE (FAC) IS STRING
00097Cr 2               ; ----------------------------------------------------------------------------
00097Cr 2               CHKSTR:
00097Cr 2  38                   sec
00097Dr 2               
00097Dr 2               ; ----------------------------------------------------------------------------
00097Dr 2               ; MAKE SURE (FAC) IS CORRECT TYPE
00097Dr 2               ; IF C=0, TYPE MUST BE NUMERIC
00097Dr 2               ; IF C=1, TYPE MUST BE STRING
00097Dr 2               ; ----------------------------------------------------------------------------
00097Dr 2               CHKVAL:
00097Dr 2  24 5F                bit     VALTYP
00097Fr 2  30 03                bmi     L2C41
000981r 2  B0 03                bcs     L2C43
000983r 2               L2C40:
000983r 2  60                   rts
000984r 2               L2C41:
000984r 2  B0 FD                bcs     L2C40
000986r 2               L2C43:
000986r 2  A2 A3                ldx     #ERR_BADTYPE
000988r 2               JERROR:
000988r 2  4C rr rr             jmp     ERROR
00098Br 2               
00098Br 2               ; ----------------------------------------------------------------------------
00098Br 2               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
00098Br 2               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
00098Br 2               ; EXPRESSIONS.
00098Br 2               ; ----------------------------------------------------------------------------
00098Br 2               FRMEVL:
00098Br 2  A6 C9                ldx     TXTPTR
00098Dr 2  D0 02                bne     L2C4E
00098Fr 2  C6 CA                dec     TXTPTR+1
000991r 2               L2C4E:
000991r 2  C6 C9                dec     TXTPTR
000993r 2  A2 00                ldx     #$00
000995r 2  24                   .byte   $24
000996r 2               FRMEVL1:
000996r 2  48                   pha
000997r 2  8A                   txa
000998r 2  48                   pha
000999r 2  A9 01                lda     #$01
00099Br 2  20 rr rr             jsr     CHKMEM
00099Er 2  20 rr rr             jsr     FRM_ELEMENT
0009A1r 2  A9 00                lda     #$00
0009A3r 2  85 9C                sta     CPRTYP
0009A5r 2               FRMEVL2:
0009A5r 2  20 C8 00             jsr     CHRGOT
0009A8r 2               L2C65:
0009A8r 2  38                   sec
0009A9r 2  E9 AB                sbc     #TOKEN_GREATER
0009ABr 2  90 17                bcc     L2C81
0009ADr 2  C9 03                cmp     #$03
0009AFr 2  B0 13                bcs     L2C81
0009B1r 2  C9 01                cmp     #$01
0009B3r 2  2A                   rol     a
0009B4r 2  49 01                eor     #$01
0009B6r 2  45 9C                eor     CPRTYP
0009B8r 2  C5 9C                cmp     CPRTYP
0009BAr 2  90 61                bcc     SNTXERR
0009BCr 2  85 9C                sta     CPRTYP
0009BEr 2  20 C2 00             jsr     CHRGET
0009C1r 2  4C rr rr             jmp     L2C65
0009C4r 2               L2C81:
0009C4r 2  A6 9C                ldx     CPRTYP
0009C6r 2  D0 2C                bne     FRM_RELATIONAL
0009C8r 2  B0 7B                bcs     L2D02
0009CAr 2  69 07                adc     #$07
0009CCr 2  90 77                bcc     L2D02
0009CEr 2  65 5F                adc     VALTYP
0009D0r 2  D0 03                bne     L2C92
0009D2r 2  4C rr rr             jmp     CAT
0009D5r 2               L2C92:
0009D5r 2  69 FF                adc     #$FF
0009D7r 2  85 71                sta     INDEX
0009D9r 2  0A                   asl     a
0009DAr 2  65 71                adc     INDEX
0009DCr 2  A8                   tay
0009DDr 2               FRM_PRECEDENCE_TEST:
0009DDr 2  68                   pla
0009DEr 2  D9 rr rr             cmp     MATHTBL,y
0009E1r 2  B0 67                bcs     FRM_PERFORM1
0009E3r 2  20 rr rr             jsr     CHKNUM
0009E6r 2               L2CA3:
0009E6r 2  48                   pha
0009E7r 2               L2CA4:
0009E7r 2  20 rr rr             jsr     FRM_RECURSE
0009EAr 2  68                   pla
0009EBr 2  A4 9A                ldy     LASTOP
0009EDr 2  10 17                bpl     PREFNC
0009EFr 2  AA                   tax
0009F0r 2  F0 56                beq     GOEX
0009F2r 2  D0 5F                bne     FRM_PERFORM2
0009F4r 2               
0009F4r 2               ; ----------------------------------------------------------------------------
0009F4r 2               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
0009F4r 2               ; ----------------------------------------------------------------------------
0009F4r 2               FRM_RELATIONAL:
0009F4r 2  46 5F                lsr     VALTYP
0009F6r 2  8A                   txa
0009F7r 2  2A                   rol     a
0009F8r 2  A6 C9                ldx     TXTPTR
0009FAr 2  D0 02                bne     L2CBB
0009FCr 2  C6 CA                dec     TXTPTR+1
0009FEr 2               L2CBB:
0009FEr 2  C6 C9                dec     TXTPTR
000A00r 2  A0 1B                ldy     #$1B
000A02r 2  85 9C                sta     CPRTYP
000A04r 2  D0 D7                bne     FRM_PRECEDENCE_TEST
000A06r 2               PREFNC:
000A06r 2  D9 rr rr             cmp     MATHTBL,y
000A09r 2  B0 48                bcs     FRM_PERFORM2
000A0Br 2  90 D9                bcc     L2CA3
000A0Dr 2               
000A0Dr 2               ; ----------------------------------------------------------------------------
000A0Dr 2               ; STACK THIS OPERATION AND CALL FRMEVL FOR
000A0Dr 2               ; ANOTHER ONE
000A0Dr 2               ; ----------------------------------------------------------------------------
000A0Dr 2               FRM_RECURSE:
000A0Dr 2  B9 rr rr             lda     MATHTBL+2,y
000A10r 2  48                   pha
000A11r 2  B9 rr rr             lda     MATHTBL+1,y
000A14r 2  48                   pha
000A15r 2  20 rr rr             jsr     FRM_STACK1
000A18r 2  A5 9C                lda     CPRTYP
000A1Ar 2  4C rr rr             jmp     FRMEVL1
000A1Dr 2               SNTXERR:
000A1Dr 2  4C rr rr             jmp     SYNERR
000A20r 2               
000A20r 2               ; ----------------------------------------------------------------------------
000A20r 2               ; STACK (FAC)
000A20r 2               ; THREE ENTRY POINTS:
000A20r 2               ; 	1, FROM FRMEVL
000A20r 2               ;	2, FROM "STEP"
000A20r 2               ;	3, FROM "FOR"
000A20r 2               ; ----------------------------------------------------------------------------
000A20r 2               FRM_STACK1:
000A20r 2  A5 B5                lda     FACSIGN
000A22r 2  BE rr rr             ldx     MATHTBL,y
000A25r 2               
000A25r 2               ; ----------------------------------------------------------------------------
000A25r 2               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
000A25r 2               ; ----------------------------------------------------------------------------
000A25r 2               FRM_STACK2:
000A25r 2  A8                   tay
000A26r 2  68                   pla
000A27r 2  85 71                sta     INDEX
000A29r 2               .ifndef CONFIG_2B
000A29r 2  E6 71                inc     INDEX ; bug: assumes not on page boundary
000A2Br 2               ; bug exists on AppleSoft II
000A2Br 2               .endif
000A2Br 2  68                   pla
000A2Cr 2  85 72                sta     INDEX+1
000A2Er 2               .ifdef CONFIG_2B
000A2Er 2                       inc     INDEX
000A2Er 2                       bne     LEB69
000A2Er 2                       inc     INDEX+1
000A2Er 2               LEB69:
000A2Er 2               .endif
000A2Er 2  98                   tya
000A2Fr 2  48                   pha
000A30r 2               
000A30r 2               ; ----------------------------------------------------------------------------
000A30r 2               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
000A30r 2               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
000A30r 2               ; ----------------------------------------------------------------------------
000A30r 2               FRM_STACK3:
000A30r 2  20 rr rr             jsr     ROUND_FAC
000A33r 2               .ifndef CONFIG_SMALL
000A33r 2  A5 B4                lda     FAC+4
000A35r 2  48                   pha
000A36r 2               .endif
000A36r 2  A5 B3                lda     FAC+3
000A38r 2  48                   pha
000A39r 2  A5 B2                lda     FAC+2
000A3Br 2  48                   pha
000A3Cr 2  A5 B1                lda     FAC+1
000A3Er 2  48                   pha
000A3Fr 2  A5 B0                lda     FAC
000A41r 2  48                   pha
000A42r 2  6C 71 00             jmp     (INDEX)
000A45r 2               L2D02:
000A45r 2  A0 FF                ldy     #$FF
000A47r 2  68                   pla
000A48r 2               GOEX:
000A48r 2  F0 23                beq     EXIT
000A4Ar 2               
000A4Ar 2               ; ----------------------------------------------------------------------------
000A4Ar 2               ; PERFORM STACKED OPERATION
000A4Ar 2               ;
000A4Ar 2               ; (A) = PRECEDENCE BYTE
000A4Ar 2               ; STACK:  1 -- CPRMASK
000A4Ar 2               ;	5 -- (ARG)
000A4Ar 2               ;	2 -- ADDR OF PERFORMER
000A4Ar 2               ; ----------------------------------------------------------------------------
000A4Ar 2               FRM_PERFORM1:
000A4Ar 2  C9 64                cmp     #$64
000A4Cr 2  F0 03                beq     L2D0E
000A4Er 2  20 rr rr             jsr     CHKNUM
000A51r 2               L2D0E:
000A51r 2  84 9A                sty     LASTOP
000A53r 2               FRM_PERFORM2:
000A53r 2  68                   pla
000A54r 2  4A                   lsr     a
000A55r 2  85 64                sta     CPRMASK
000A57r 2  68                   pla
000A58r 2  85 B8                sta     ARG
000A5Ar 2  68                   pla
000A5Br 2  85 B9                sta     ARG+1
000A5Dr 2  68                   pla
000A5Er 2  85 BA                sta     ARG+2
000A60r 2  68                   pla
000A61r 2  85 BB                sta     ARG+3
000A63r 2  68                   pla
000A64r 2               .ifndef CONFIG_SMALL
000A64r 2  85 BC                sta     ARG+4
000A66r 2  68                   pla
000A67r 2               .endif
000A67r 2  85 BD                sta     ARGSIGN
000A69r 2  45 B5                eor     FACSIGN
000A6Br 2  85 BE                sta     SGNCPR
000A6Dr 2               EXIT:
000A6Dr 2  A5 B0                lda     FAC
000A6Fr 2  60                   rts
000A70r 2               
000A70r 2               ; ----------------------------------------------------------------------------
000A70r 2               ; GET ELEMENT IN EXPRESSION
000A70r 2               ;
000A70r 2               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
000A70r 2               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
000A70r 2               ; ----------------------------------------------------------------------------
000A70r 2               FRM_ELEMENT:
000A70r 2  A9 00                lda     #$00
000A72r 2  85 5F                sta     VALTYP
000A74r 2               L2D31:
000A74r 2  20 C2 00             jsr     CHRGET
000A77r 2  B0 03                bcs     L2D39
000A79r 2               L2D36:
000A79r 2  4C rr rr             jmp     FIN
000A7Cr 2               L2D39:
000A7Cr 2  20 rr rr             jsr     ISLETC
000A7Fr 2  B0 67                bcs     FRM_VARIABLE
000A81r 2               .ifdef CONFIG_CBM_ALL
000A81r 2                       cmp     #$FF
000A81r 2                       bne     LCDC1
000A81r 2                       lda     #<CON_PI
000A81r 2                       ldy     #>CON_PI
000A81r 2                       jsr     LOAD_FAC_FROM_YA
000A81r 2                       jmp     CHRGET
000A81r 2               CON_PI:
000A81r 2                       .byte   $82,$49,$0f,$DA,$A1
000A81r 2               LCDC1:
000A81r 2               .endif
000A81r 2  C9 2E                cmp     #$2E
000A83r 2  F0 F4                beq     L2D36
000A85r 2  C9 A5                cmp     #TOKEN_MINUS
000A87r 2  F0 58                beq     MIN
000A89r 2  C9 A4                cmp     #TOKEN_PLUS
000A8Br 2  F0 E7                beq     L2D31
000A8Dr 2  C9 22                cmp     #$22
000A8Fr 2  D0 0F                bne     NOT_
000A91r 2               
000A91r 2               ; ----------------------------------------------------------------------------
000A91r 2               ; STRING CONSTANT ELEMENT
000A91r 2               ;
000A91r 2               ; SET Y,A = (TXTPTR)+CARRY
000A91r 2               ; ----------------------------------------------------------------------------
000A91r 2               STRTXT:
000A91r 2  A5 C9                lda     TXTPTR
000A93r 2  A4 CA                ldy     TXTPTR+1
000A95r 2  69 00                adc     #$00
000A97r 2  90 01                bcc     L2D57
000A99r 2  C8                   iny
000A9Ar 2               L2D57:
000A9Ar 2  20 rr rr             jsr     STRLIT
000A9Dr 2  4C rr rr             jmp     POINT
000AA0r 2               
000AA0r 2               ; ----------------------------------------------------------------------------
000AA0r 2               ; "NOT" FUNCTION
000AA0r 2               ; IF FAC=0, RETURN FAC=1
000AA0r 2               ; IF FAC<>0, RETURN FAC=0
000AA0r 2               ; ----------------------------------------------------------------------------
000AA0r 2               NOT_:
000AA0r 2  C9 A2                cmp     #TOKEN_NOT
000AA2r 2  D0 13                bne     L2D74
000AA4r 2  A0 18                ldy     #$18
000AA6r 2  D0 3B                bne     EQUL
000AA8r 2               
000AA8r 2               ; ----------------------------------------------------------------------------
000AA8r 2               ; COMPARISON FOR EQUALITY (= OPERATOR)
000AA8r 2               ; ALSO USED TO EVALUATE "NOT" FUNCTION
000AA8r 2               ; ----------------------------------------------------------------------------
000AA8r 2               EQUOP:
000AA8r 2  20 rr rr             jsr     AYINT
000AABr 2  A5 B4                lda     FAC_LAST
000AADr 2  49 FF                eor     #$FF
000AAFr 2  A8                   tay
000AB0r 2  A5 B3                lda     FAC_LAST-1
000AB2r 2  49 FF                eor     #$FF
000AB4r 2  4C rr rr             jmp     GIVAYF
000AB7r 2               L2D74:
000AB7r 2  C9 9F                cmp     #TOKEN_FN
000AB9r 2  D0 03                bne     L2D7B
000ABBr 2  4C rr rr             jmp     L31F3
000ABEr 2               L2D7B:
000ABEr 2  C9 AE                cmp     #TOKEN_SGN
000AC0r 2  90 03                bcc     PARCHK
000AC2r 2  4C rr rr             jmp     UNARY
000AC5r 2               
000AC5r 2               ; ----------------------------------------------------------------------------
000AC5r 2               ; EVALUATE "(EXPRESSION)"
000AC5r 2               ; ----------------------------------------------------------------------------
000AC5r 2               PARCHK:
000AC5r 2  20 rr rr             jsr     CHKOPN
000AC8r 2  20 rr rr             jsr     FRMEVL
000ACBr 2               CHKCLS:
000ACBr 2  A9 29                lda     #$29
000ACDr 2  2C                   .byte   $2C
000ACEr 2               CHKOPN:
000ACEr 2  A9 28                lda     #$28
000AD0r 2  2C                   .byte   $2C
000AD1r 2               CHKCOM:
000AD1r 2  A9 2C                lda     #$2C
000AD3r 2               
000AD3r 2               ; ----------------------------------------------------------------------------
000AD3r 2               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
000AD3r 2               ; ----------------------------------------------------------------------------
000AD3r 2               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
000AD3r 2  A0 00                ldy     #$00
000AD5r 2  D1 C9                cmp     (TXTPTR),y
000AD7r 2  D0 03                bne     SYNERR
000AD9r 2  4C C2 00             jmp     CHRGET
000ADCr 2               ; ----------------------------------------------------------------------------
000ADCr 2               SYNERR:
000ADCr 2  A2 10                ldx     #ERR_SYNTAX
000ADEr 2  4C rr rr             jmp     ERROR
000AE1r 2               ; ----------------------------------------------------------------------------
000AE1r 2               MIN:
000AE1r 2  A0 15                ldy     #$15
000AE3r 2               EQUL:
000AE3r 2  68                   pla
000AE4r 2  68                   pla
000AE5r 2  4C rr rr             jmp     L2CA4
000AE8r 2               ; ----------------------------------------------------------------------------
000AE8r 2               FRM_VARIABLE:
000AE8r 2  20 rr rr             jsr     PTRGET
000AEBr 2               FRM_VARIABLE_CALL	= *-1
000AEBr 2  85 B3                sta     FAC_LAST-1
000AEDr 2  84 B4                sty     FAC_LAST
000AEFr 2               .ifdef CONFIG_CBM_ALL
000AEFr 2                       lda     VARNAM
000AEFr 2                       ldy     VARNAM+1
000AEFr 2               .endif
000AEFr 2  A6 5F                ldx     VALTYP
000AF1r 2  F0 01                beq     L2DB1
000AF3r 2               .ifdef CONFIG_CBM_ALL
000AF3r 2                 .ifdef CONFIG_CBM1_PATCHES
000AF3r 2                       jmp     PATCH2
000AF3r 2                       clc
000AF3r 2               LCE3B:
000AF3r 2                 .else
000AF3r 2                       ldx     #$00
000AF3r 2                       stx     STRNG1+1
000AF3r 2                       bit     FAC+4
000AF3r 2                       bpl     LCE53
000AF3r 2                       cmp     #$54	; T
000AF3r 2                       bne     LCE53
000AF3r 2                 .endif
000AF3r 2                       cpy     #$C9	; I$
000AF3r 2                       bne     LCE53
000AF3r 2                       jsr     LCE76
000AF3r 2                       sty     EXPON
000AF3r 2                       dey
000AF3r 2                       sty     STRNG2
000AF3r 2                       ldy     #$06
000AF3r 2                       sty     INDX
000AF3r 2                       ldy     #$24
000AF3r 2                       jsr     LDD3A
000AF3r 2                       jmp     LD353
000AF3r 2               LCE53:
000AF3r 2               .endif
000AF3r 2               .ifdef CONFIG_2
000AF3r 2                 .ifndef CBM2
000AF3r 2               ; bugfix?
000AF3r 2               ; fixed on AppleSoft II, not on any CBM
000AF3r 2                       ldx     #$00
000AF3r 2                       stx     STRNG1+1
000AF3r 2                 .endif
000AF3r 2               .endif
000AF3r 2  60                   rts
000AF4r 2               L2DB1:
000AF4r 2               .ifndef CONFIG_SMALL
000AF4r 2  A6 60                ldx     VALTYP+1
000AF6r 2  10 0D                bpl     L2DC2
000AF8r 2  A0 00                ldy     #$00
000AFAr 2  B1 B3                lda     (FAC+3),y
000AFCr 2  AA                   tax
000AFDr 2  C8                   iny
000AFEr 2  B1 B3                lda     (FAC+3),y
000B00r 2  A8                   tay
000B01r 2  8A                   txa
000B02r 2  4C rr rr             jmp     GIVAYF
000B05r 2               L2DC2:
000B05r 2               .endif
000B05r 2               .ifdef CONFIG_CBM1_PATCHES
000B05r 2                       jmp     PATCH3
000B05r 2                       .byte   $19
000B05r 2               .endif
000B05r 2               .ifdef CBM2
000B05r 2                       bit     FAC+4
000B05r 2                       bpl     LCE90
000B05r 2                       cmp     #$54
000B05r 2                       bne     LCE82
000B05r 2               .endif
000B05r 2               .ifndef CONFIG_CBM_ALL
000B05r 2  4C rr rr             jmp     LOAD_FAC_FROM_YA
000B08r 2               .endif
000B08r 2               .ifdef CONFIG_CBM_ALL
000B08r 2               LCE69:
000B08r 2                       cpy     #$49
000B08r 2               .ifdef CBM1
000B08r 2                       bne     LCE82
000B08r 2               .else
000B08r 2                       bne     LCE90
000B08r 2               .endif
000B08r 2                       jsr     LCE76
000B08r 2                       tya
000B08r 2                       ldx     #$A0
000B08r 2                       jmp     LDB21
000B08r 2               LCE76:
000B08r 2               .ifdef CBM1
000B08r 2                       lda     #$FE
000B08r 2                       ldy     #$01
000B08r 2               .else
000B08r 2                       lda     #$8B
000B08r 2                       ldy     #$00
000B08r 2               .endif
000B08r 2                       sei
000B08r 2                       jsr     LOAD_FAC_FROM_YA
000B08r 2                       cli
000B08r 2                       sty     FAC+1
000B08r 2                       rts
000B08r 2               LCE82:
000B08r 2                       cmp     #$53
000B08r 2                       bne     LCE90
000B08r 2                       cpy     #$54
000B08r 2                       bne     LCE90
000B08r 2                       lda     Z96
000B08r 2                       jmp     FLOAT
000B08r 2               LCE90:
000B08r 2                       lda     FAC+3
000B08r 2                       ldy     FAC+4
000B08r 2                       jmp     LOAD_FAC_FROM_YA
000B08r 2               .endif
000B08r 2               
000B08r 2               ; ----------------------------------------------------------------------------
000B08r 2               UNARY:
000B08r 2  0A                   asl     a
000B09r 2  48                   pha
000B0Ar 2  AA                   tax
000B0Br 2  20 C2 00             jsr     CHRGET
000B0Er 2  E0 83                cpx     #<(TOKEN_LEFTSTR*2-1)
000B10r 2  90 20                bcc     L2DEF
000B12r 2  20 rr rr             jsr     CHKOPN
000B15r 2  20 rr rr             jsr     FRMEVL
000B18r 2  20 rr rr             jsr     CHKCOM
000B1Br 2  20 rr rr             jsr     CHKSTR
000B1Er 2  68                   pla
000B1Fr 2  AA                   tax
000B20r 2  A5 B4                lda     FAC_LAST
000B22r 2  48                   pha
000B23r 2  A5 B3                lda     FAC_LAST-1
000B25r 2  48                   pha
000B26r 2  8A                   txa
000B27r 2  48                   pha
000B28r 2  20 rr rr             jsr     GETBYT
000B2Br 2  68                   pla
000B2Cr 2  A8                   tay
000B2Dr 2  8A                   txa
000B2Er 2  48                   pha
000B2Fr 2  4C rr rr             jmp     L2DF4
000B32r 2               L2DEF:
000B32r 2  20 rr rr             jsr     PARCHK
000B35r 2  68                   pla
000B36r 2  A8                   tay
000B37r 2               L2DF4:
000B37r 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$100,y
000B3Ar 2  85 A4                sta     JMPADRS+1
000B3Cr 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$101,y
000B3Fr 2  85 A5                sta     JMPADRS+2
000B41r 2               .ifdef KBD
000B41r 2                       jsr     LF47D
000B41r 2               .else
000B41r 2  20 A3 00             jsr     JMPADRS
000B44r 2               .endif
000B44r 2  4C rr rr             jmp     CHKNUM
000B47r 2               
000B47r 2               ; ----------------------------------------------------------------------------
000B47r 2               OR:
000B47r 2  A0 FF                ldy     #$FF
000B49r 2  2C                   .byte   $2C
000B4Ar 2               ; ----------------------------------------------------------------------------
000B4Ar 2               TAND:
000B4Ar 2  A0 00                ldy     #$00
000B4Cr 2  84 5D                sty     EOLPNTR
000B4Er 2  20 rr rr             jsr     AYINT
000B51r 2  A5 B3                lda     FAC_LAST-1
000B53r 2  45 5D                eor     EOLPNTR
000B55r 2  85 5B                sta     CHARAC
000B57r 2  A5 B4                lda     FAC_LAST
000B59r 2  45 5D                eor     EOLPNTR
000B5Br 2  85 5C                sta     ENDCHR
000B5Dr 2  20 rr rr             jsr     COPY_ARG_TO_FAC
000B60r 2  20 rr rr             jsr     AYINT
000B63r 2  A5 B4                lda     FAC_LAST
000B65r 2  45 5D                eor     EOLPNTR
000B67r 2  25 5C                and     ENDCHR
000B69r 2  45 5D                eor     EOLPNTR
000B6Br 2  A8                   tay
000B6Cr 2  A5 B3                lda     FAC_LAST-1
000B6Er 2  45 5D                eor     EOLPNTR
000B70r 2  25 5B                and     CHARAC
000B72r 2  45 5D                eor     EOLPNTR
000B74r 2  4C rr rr             jmp     GIVAYF
000B77r 2               
000B77r 2               ; ----------------------------------------------------------------------------
000B77r 2               ; PERFORM RELATIONAL OPERATIONS
000B77r 2               ; ----------------------------------------------------------------------------
000B77r 2               RELOPS:
000B77r 2  20 rr rr             jsr     CHKVAL
000B7Ar 2  B0 13                bcs     STRCMP
000B7Cr 2  A5 BD                lda     ARGSIGN
000B7Er 2  09 7F                ora     #$7F
000B80r 2  25 B9                and     ARG+1
000B82r 2  85 B9                sta     ARG+1
000B84r 2  A9 B8                lda     #<ARG
000B86r 2  A0 00                ldy     #$00
000B88r 2  20 rr rr             jsr     FCOMP
000B8Br 2  AA                   tax
000B8Cr 2  4C rr rr             jmp     NUMCMP
000B8Fr 2               
000B8Fr 2               ; ----------------------------------------------------------------------------
000B8Fr 2               ; STRING COMPARISON
000B8Fr 2               ; ----------------------------------------------------------------------------
000B8Fr 2               STRCMP:
000B8Fr 2  A9 00                lda     #$00
000B91r 2  85 5F                sta     VALTYP
000B93r 2  C6 9C                dec     CPRTYP
000B95r 2  20 rr rr             jsr     FREFAC
000B98r 2  85 B0                sta     FAC
000B9Ar 2  86 B1                stx     FAC+1
000B9Cr 2  84 B2                sty     FAC+2
000B9Er 2  A5 BB                lda     ARG_LAST-1
000BA0r 2  A4 BC                ldy     ARG_LAST
000BA2r 2  20 rr rr             jsr     FRETMP
000BA5r 2  86 BB                stx     ARG_LAST-1
000BA7r 2  84 BC                sty     ARG_LAST
000BA9r 2  AA                   tax
000BAAr 2  38                   sec
000BABr 2  E5 B0                sbc     FAC
000BADr 2  F0 08                beq     L2E74
000BAFr 2  A9 01                lda     #$01
000BB1r 2  90 04                bcc     L2E74
000BB3r 2  A6 B0                ldx     FAC
000BB5r 2  A9 FF                lda     #$FF
000BB7r 2               L2E74:
000BB7r 2  85 B5                sta     FACSIGN
000BB9r 2  A0 FF                ldy     #$FF
000BBBr 2  E8                   inx
000BBCr 2               STRCMP1:
000BBCr 2  C8                   iny
000BBDr 2  CA                   dex
000BBEr 2  D0 07                bne     L2E84
000BC0r 2  A6 B5                ldx     FACSIGN
000BC2r 2               NUMCMP:
000BC2r 2  30 0F                bmi     CMPDONE
000BC4r 2  18                   clc
000BC5r 2  90 0C                bcc     CMPDONE
000BC7r 2               L2E84:
000BC7r 2  B1 BB                lda     (ARG_LAST-1),y
000BC9r 2  D1 B1                cmp     (FAC+1),y
000BCBr 2  F0 EF                beq     STRCMP1
000BCDr 2  A2 FF                ldx     #$FF
000BCFr 2  B0 02                bcs     CMPDONE
000BD1r 2  A2 01                ldx     #$01
000BD3r 2               CMPDONE:
000BD3r 2  E8                   inx
000BD4r 2  8A                   txa
000BD5r 2  2A                   rol     a
000BD6r 2  25 64                and     CPRMASK
000BD8r 2  F0 02                beq     L2E99
000BDAr 2  A9 FF                lda     #$FF
000BDCr 2               L2E99:
000BDCr 2  4C rr rr             jmp     FLOAT
000BDFr 2               
000BDFr 1               .include "var.s"
000BDFr 2               .segment "CODE"
000BDFr 2               
000BDFr 2               ; ----------------------------------------------------------------------------
000BDFr 2               ; "DIM" STATEMENT
000BDFr 2               ; ----------------------------------------------------------------------------
000BDFr 2               NXDIM:
000BDFr 2  20 rr rr             jsr     CHKCOM
000BE2r 2               DIM:
000BE2r 2  AA                   tax
000BE3r 2  20 rr rr             jsr     PTRGET2
000BE6r 2  20 C8 00             jsr     CHRGOT
000BE9r 2  D0 F4                bne     NXDIM
000BEBr 2  60                   rts
000BECr 2               
000BECr 2               ; ----------------------------------------------------------------------------
000BECr 2               ; PTRGET -- GENERAL VARIABLE SCAN
000BECr 2               ;
000BECr 2               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
000BECr 2               ; VARTAB AND ARYTAB FOR THE NAME.
000BECr 2               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
000BECr 2               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
000BECr 2               ;
000BECr 2               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
000BECr 2               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
000BECr 2               ;		ELSE = 0
000BECr 2               ;
000BECr 2               ;	SUBFLG -- = $00
000BECr 2               ;		= $40 IF CALLED FROM "GETARYPT"
000BECr 2               ; ----------------------------------------------------------------------------
000BECr 2               PTRGET:
000BECr 2  A2 00                ldx     #$00
000BEEr 2  20 C8 00             jsr     CHRGOT
000BF1r 2               PTRGET2:
000BF1r 2  86 5E                stx     DIMFLG
000BF3r 2               PTRGET3:
000BF3r 2  85 94                sta     VARNAM
000BF5r 2  20 C8 00             jsr     CHRGOT
000BF8r 2  20 rr rr             jsr     ISLETC
000BFBr 2  B0 03                bcs     NAMOK
000BFDr 2               SYNERR3:
000BFDr 2  4C rr rr             jmp     SYNERR
000C00r 2               NAMOK:
000C00r 2  A2 00                ldx     #$00
000C02r 2  86 5F                stx     VALTYP
000C04r 2               .ifndef CONFIG_SMALL
000C04r 2  86 60                stx     VALTYP+1
000C06r 2               .endif
000C06r 2  20 C2 00             jsr     CHRGET
000C09r 2  90 05                bcc     L2ECD
000C0Br 2  20 rr rr             jsr     ISLETC
000C0Er 2  90 0B                bcc     L2ED8
000C10r 2               L2ECD:
000C10r 2  AA                   tax
000C11r 2               L2ECE:
000C11r 2  20 C2 00             jsr     CHRGET
000C14r 2  90 FB                bcc     L2ECE
000C16r 2  20 rr rr             jsr     ISLETC
000C19r 2  B0 F6                bcs     L2ECE
000C1Br 2               L2ED8:
000C1Br 2  C9 24                cmp     #$24
000C1Dr 2               .ifdef CONFIG_SMALL
000C1Dr 2                       bne     L2EF9
000C1Dr 2               .else
000C1Dr 2  D0 06                bne     L2EE2
000C1Fr 2               .endif
000C1Fr 2  A9 FF                lda     #$FF
000C21r 2  85 5F                sta     VALTYP
000C23r 2               .ifndef CONFIG_SMALL
000C23r 2  D0 10                bne     L2EF2
000C25r 2               L2EE2:
000C25r 2  C9 25                cmp     #$25
000C27r 2  D0 13                bne     L2EF9
000C29r 2  A5 62                lda     SUBFLG
000C2Br 2  D0 D0                bne     SYNERR3
000C2Dr 2  A9 80                lda     #$80
000C2Fr 2  85 60                sta     VALTYP+1
000C31r 2  05 94                ora     VARNAM
000C33r 2  85 94                sta     VARNAM
000C35r 2               L2EF2:
000C35r 2               .endif
000C35r 2  8A                   txa
000C36r 2  09 80                ora     #$80
000C38r 2  AA                   tax
000C39r 2  20 C2 00             jsr     CHRGET
000C3Cr 2               L2EF9:
000C3Cr 2  86 95                stx     VARNAM+1
000C3Er 2  38                   sec
000C3Fr 2  05 62                ora     SUBFLG
000C41r 2  E9 28                sbc     #$28
000C43r 2  D0 03                bne     L2F05
000C45r 2  4C rr rr             jmp     ARRAY
000C48r 2               L2F05:
000C48r 2  A9 00                lda     #$00
000C4Ar 2  85 62                sta     SUBFLG
000C4Cr 2  A5 7C                lda     VARTAB
000C4Er 2  A6 7D                ldx     VARTAB+1
000C50r 2  A0 00                ldy     #$00
000C52r 2               L2F0F:
000C52r 2  86 AF                stx     LOWTR+1
000C54r 2               L2F11:
000C54r 2  85 AE                sta     LOWTR
000C56r 2  E4 7F                cpx     ARYTAB+1
000C58r 2  D0 04                bne     L2F1B
000C5Ar 2  C5 7E                cmp     ARYTAB
000C5Cr 2  F0 22                beq     NAMENOTFOUND
000C5Er 2               L2F1B:
000C5Er 2  A5 94                lda     VARNAM
000C60r 2  D1 AE                cmp     (LOWTR),y
000C62r 2  D0 08                bne     L2F29
000C64r 2  A5 95                lda     VARNAM+1
000C66r 2  C8                   iny
000C67r 2  D1 AE                cmp     (LOWTR),y
000C69r 2  F0 64                beq     SET_VARPNT_AND_YA
000C6Br 2  88                   dey
000C6Cr 2               L2F29:
000C6Cr 2  18                   clc
000C6Dr 2  A5 AE                lda     LOWTR
000C6Fr 2  69 07                adc     #BYTES_PER_VARIABLE
000C71r 2  90 E1                bcc     L2F11
000C73r 2  E8                   inx
000C74r 2  D0 DC                bne     L2F0F
000C76r 2               
000C76r 2               ; ----------------------------------------------------------------------------
000C76r 2               ; CHECK IF (A) IS ASCII LETTER A-Z
000C76r 2               ;
000C76r 2               ; RETURN CARRY = 1 IF A-Z
000C76r 2               ;	= 0 IF NOT
000C76r 2               ; ----------------------------------------------------------------------------
000C76r 2               ISLETC:
000C76r 2  C9 41                cmp     #$41
000C78r 2  90 05                bcc     L2F3C
000C7Ar 2  E9 5B                sbc     #$5B
000C7Cr 2  38                   sec
000C7Dr 2  E9 A5                sbc     #$A5
000C7Fr 2               L2F3C:
000C7Fr 2  60                   rts
000C80r 2               
000C80r 2               ; ----------------------------------------------------------------------------
000C80r 2               ; VARIABLE NOT FOUND, SO MAKE ONE
000C80r 2               ; ----------------------------------------------------------------------------
000C80r 2               NAMENOTFOUND:
000C80r 2  68                   pla
000C81r 2  48                   pha
000C82r 2  C9 rr                cmp     #<FRM_VARIABLE_CALL
000C84r 2  D0 07                bne     MAKENEWVARIABLE
000C86r 2               .ifdef CONFIG_SAFE_NAMENOTFOUND
000C86r 2                       tsx
000C86r 2                       lda     STACK+2,x
000C86r 2                       cmp     #>FRM_VARIABLE_CALL
000C86r 2                       bne     MAKENEWVARIABLE
000C86r 2               .endif
000C86r 2               LD015:
000C86r 2  A9 rr                lda     #<C_ZERO
000C88r 2  A0 rr                ldy     #>C_ZERO
000C8Ar 2  60                   rts
000C8Br 2               
000C8Br 2               ; ----------------------------------------------------------------------------
000C8Br 2               .ifndef CONFIG_2
000C8Br 2               C_ZERO:
000C8Br 2  00 00                .byte   $00,$00
000C8Dr 2               .endif
000C8Dr 2               
000C8Dr 2               ; ----------------------------------------------------------------------------
000C8Dr 2               ; MAKE A NEW SIMPLE VARIABLE
000C8Dr 2               ;
000C8Dr 2               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
000C8Dr 2               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
000C8Dr 2               ; ----------------------------------------------------------------------------
000C8Dr 2               MAKENEWVARIABLE:
000C8Dr 2               .ifdef CONFIG_CBM_ALL
000C8Dr 2                       lda     VARNAM
000C8Dr 2                       ldy     VARNAM+1
000C8Dr 2                       cmp     #$54
000C8Dr 2                       bne     LD02F
000C8Dr 2                       cpy     #$C9
000C8Dr 2                       beq     LD015
000C8Dr 2                       cpy     #$49
000C8Dr 2                       bne     LD02F
000C8Dr 2               LD02C:
000C8Dr 2                       jmp     SYNERR
000C8Dr 2               LD02F:
000C8Dr 2                       cmp     #$53
000C8Dr 2                       bne     LD037
000C8Dr 2                       cpy     #$54
000C8Dr 2                       beq     LD02C
000C8Dr 2               LD037:
000C8Dr 2               .endif
000C8Dr 2  A5 7E                lda     ARYTAB
000C8Fr 2  A4 7F                ldy     ARYTAB+1
000C91r 2  85 AE                sta     LOWTR
000C93r 2  84 AF                sty     LOWTR+1
000C95r 2  A5 80                lda     STREND
000C97r 2  A4 81                ldy     STREND+1
000C99r 2  85 A9                sta     HIGHTR
000C9Br 2  84 AA                sty     HIGHTR+1
000C9Dr 2  18                   clc
000C9Er 2  69 07                adc     #BYTES_PER_VARIABLE
000CA0r 2  90 01                bcc     L2F68
000CA2r 2  C8                   iny
000CA3r 2               L2F68:
000CA3r 2  85 A7                sta     HIGHDS
000CA5r 2  84 A8                sty     HIGHDS+1
000CA7r 2  20 rr rr             jsr     BLTU
000CAAr 2  A5 A7                lda     HIGHDS
000CACr 2  A4 A8                ldy     HIGHDS+1
000CAEr 2  C8                   iny
000CAFr 2  85 7E                sta     ARYTAB
000CB1r 2  84 7F                sty     ARYTAB+1
000CB3r 2  A0 00                ldy     #$00
000CB5r 2  A5 94                lda     VARNAM
000CB7r 2  91 AE                sta     (LOWTR),y
000CB9r 2  C8                   iny
000CBAr 2  A5 95                lda     VARNAM+1
000CBCr 2  91 AE                sta     (LOWTR),y
000CBEr 2  A9 00                lda     #$00
000CC0r 2  C8                   iny
000CC1r 2  91 AE                sta     (LOWTR),y
000CC3r 2  C8                   iny
000CC4r 2  91 AE                sta     (LOWTR),y
000CC6r 2  C8                   iny
000CC7r 2  91 AE                sta     (LOWTR),y
000CC9r 2  C8                   iny
000CCAr 2  91 AE                sta     (LOWTR),y
000CCCr 2               .ifndef CONFIG_SMALL
000CCCr 2  C8                   iny
000CCDr 2  91 AE                sta     (LOWTR),y
000CCFr 2               .endif
000CCFr 2               
000CCFr 2               ; ----------------------------------------------------------------------------
000CCFr 2               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
000CCFr 2               ; ----------------------------------------------------------------------------
000CCFr 2               SET_VARPNT_AND_YA:
000CCFr 2  A5 AE                lda     LOWTR
000CD1r 2  18                   clc
000CD2r 2  69 02                adc     #$02
000CD4r 2  A4 AF                ldy     LOWTR+1
000CD6r 2  90 01                bcc     L2F9E
000CD8r 2  C8                   iny
000CD9r 2               L2F9E:
000CD9r 2  85 96                sta     VARPNT
000CDBr 2  84 97                sty     VARPNT+1
000CDDr 2  60                   rts
000CDEr 2               
000CDEr 1               .include "array.s"
000CDEr 2               .segment "CODE"
000CDEr 2               
000CDEr 2               ; ----------------------------------------------------------------------------
000CDEr 2               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
000CDEr 2               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
000CDEr 2               ; ----------------------------------------------------------------------------
000CDEr 2               GETARY:
000CDEr 2  A5 5D                lda     EOLPNTR
000CE0r 2  0A                   asl     a
000CE1r 2  69 05                adc     #$05
000CE3r 2  65 AE                adc     LOWTR
000CE5r 2  A4 AF                ldy     LOWTR+1
000CE7r 2  90 01                bcc     L2FAF
000CE9r 2  C8                   iny
000CEAr 2               L2FAF:
000CEAr 2  85 A7                sta     HIGHDS
000CECr 2  84 A8                sty     HIGHDS+1
000CEEr 2  60                   rts
000CEFr 2               
000CEFr 2               ; ----------------------------------------------------------------------------
000CEFr 2               NEG32768:
000CEFr 2  90 80 00 00          .byte   $90,$80,$00,$00
000CF3r 2               
000CF3r 2               .ifdef CONFIG_2C
000CF3r 2               		.byte	$00; bugfix: short number
000CF3r 2               .endif
000CF3r 2               
000CF3r 2               ; ----------------------------------------------------------------------------
000CF3r 2               ; EVALUATE NUMERIC FORMULA AT TXTPTR
000CF3r 2               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
000CF3r 2               ; IN FAC+3,4
000CF3r 2               ; ----------------------------------------------------------------------------
000CF3r 2               MAKINT:
000CF3r 2  20 C2 00             jsr     CHRGET
000CF6r 2               .ifdef CONFIG_2
000CF6r 2                       jsr     FRMEVL
000CF6r 2               .else
000CF6r 2  20 rr rr             jsr     FRMNUM
000CF9r 2               .endif
000CF9r 2               
000CF9r 2               ; ----------------------------------------------------------------------------
000CF9r 2               ; CONVERT FAC TO INTEGER
000CF9r 2               ; MUST BE POSITIVE AND LESS THAN 32768
000CF9r 2               ; ----------------------------------------------------------------------------
000CF9r 2               MKINT:
000CF9r 2               .ifdef CONFIG_2
000CF9r 2                       jsr     CHKNUM
000CF9r 2               .endif
000CF9r 2  A5 B5                lda     FACSIGN
000CFBr 2  30 0D                bmi     MI1
000CFDr 2               
000CFDr 2               ; ----------------------------------------------------------------------------
000CFDr 2               ; CONVERT FAC TO INTEGER
000CFDr 2               ; MUST BE -32767 <= FAC <= 32767
000CFDr 2               ; ----------------------------------------------------------------------------
000CFDr 2               AYINT:
000CFDr 2  A5 B0                lda     FAC
000CFFr 2  C9 90                cmp     #$90
000D01r 2  90 09                bcc     MI2
000D03r 2  A9 rr                lda     #<NEG32768
000D05r 2  A0 rr                ldy     #>NEG32768
000D07r 2  20 rr rr             jsr     FCOMP
000D0Ar 2               MI1:
000D0Ar 2  D0 7A                bne     IQERR
000D0Cr 2               MI2:
000D0Cr 2  4C rr rr             jmp     QINT
000D0Fr 2               
000D0Fr 2               ; ----------------------------------------------------------------------------
000D0Fr 2               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
000D0Fr 2               ; ----------------------------------------------------------------------------
000D0Fr 2               ARRAY:
000D0Fr 2  A5 5E                lda     DIMFLG
000D11r 2               .ifndef CONFIG_SMALL
000D11r 2  05 60                ora     VALTYP+1
000D13r 2               .endif
000D13r 2  48                   pha
000D14r 2  A5 5F                lda     VALTYP
000D16r 2  48                   pha
000D17r 2  A0 00                ldy     #$00
000D19r 2               L2FDE:
000D19r 2  98                   tya
000D1Ar 2  48                   pha
000D1Br 2  A5 95                lda     VARNAM+1
000D1Dr 2  48                   pha
000D1Er 2  A5 94                lda     VARNAM
000D20r 2  48                   pha
000D21r 2  20 rr rr             jsr     MAKINT
000D24r 2  68                   pla
000D25r 2  85 94                sta     VARNAM
000D27r 2  68                   pla
000D28r 2  85 95                sta     VARNAM+1
000D2Ar 2  68                   pla
000D2Br 2  A8                   tay
000D2Cr 2  BA                   tsx
000D2Dr 2  BD 02 01             lda     STACK+2,x
000D30r 2  48                   pha
000D31r 2  BD 01 01             lda     STACK+1,x
000D34r 2  48                   pha
000D35r 2  A5 B3                lda     FAC_LAST-1
000D37r 2  9D 02 01             sta     STACK+2,x
000D3Ar 2  A5 B4                lda     FAC_LAST
000D3Cr 2  9D 01 01             sta     STACK+1,x
000D3Fr 2  C8                   iny
000D40r 2  20 C8 00             jsr     CHRGOT
000D43r 2  C9 2C                cmp     #$2C
000D45r 2  F0 D2                beq     L2FDE
000D47r 2  84 5D                sty     EOLPNTR
000D49r 2  20 rr rr             jsr     CHKCLS
000D4Cr 2  68                   pla
000D4Dr 2  85 5F                sta     VALTYP
000D4Fr 2  68                   pla
000D50r 2               .ifndef CONFIG_SMALL
000D50r 2  85 60                sta     VALTYP+1
000D52r 2  29 7F                and     #$7F
000D54r 2               .endif
000D54r 2  85 5E                sta     DIMFLG
000D56r 2               ; ----------------------------------------------------------------------------
000D56r 2               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
000D56r 2               ; ----------------------------------------------------------------------------
000D56r 2  A6 7E                ldx     ARYTAB
000D58r 2  A5 7F                lda     ARYTAB+1
000D5Ar 2               L301F:
000D5Ar 2  86 AE                stx     LOWTR
000D5Cr 2  85 AF                sta     LOWTR+1
000D5Er 2  C5 81                cmp     STREND+1
000D60r 2  D0 04                bne     L302B
000D62r 2  E4 80                cpx     STREND
000D64r 2  F0 39                beq     MAKE_NEW_ARRAY
000D66r 2               L302B:
000D66r 2  A0 00                ldy     #$00
000D68r 2  B1 AE                lda     (LOWTR),y
000D6Ar 2  C8                   iny
000D6Br 2  C5 94                cmp     VARNAM
000D6Dr 2  D0 06                bne     L303A
000D6Fr 2  A5 95                lda     VARNAM+1
000D71r 2  D1 AE                cmp     (LOWTR),y
000D73r 2  F0 16                beq     USE_OLD_ARRAY
000D75r 2               L303A:
000D75r 2  C8                   iny
000D76r 2  B1 AE                lda     (LOWTR),y
000D78r 2  18                   clc
000D79r 2  65 AE                adc     LOWTR
000D7Br 2  AA                   tax
000D7Cr 2  C8                   iny
000D7Dr 2  B1 AE                lda     (LOWTR),y
000D7Fr 2  65 AF                adc     LOWTR+1
000D81r 2  90 D7                bcc     L301F
000D83r 2               
000D83r 2               ; ----------------------------------------------------------------------------
000D83r 2               ; ERROR:  BAD SUBSCRIPTS
000D83r 2               ; ----------------------------------------------------------------------------
000D83r 2               SUBERR:
000D83r 2  A2 6B                ldx     #ERR_BADSUBS
000D85r 2  2C                   .byte   $2C
000D86r 2               
000D86r 2               ; ----------------------------------------------------------------------------
000D86r 2               ; ERROR:  ILLEGAL QUANTITY
000D86r 2               ; ----------------------------------------------------------------------------
000D86r 2               IQERR:
000D86r 2  A2 35                ldx     #ERR_ILLQTY
000D88r 2               JER:
000D88r 2  4C rr rr             jmp     ERROR
000D8Br 2               
000D8Br 2               ; ----------------------------------------------------------------------------
000D8Br 2               ; FOUND THE ARRAY
000D8Br 2               ; ----------------------------------------------------------------------------
000D8Br 2               USE_OLD_ARRAY:
000D8Br 2  A2 78                ldx     #ERR_REDIMD
000D8Dr 2  A5 5E                lda     DIMFLG
000D8Fr 2  D0 F7                bne     JER
000D91r 2  20 rr rr             jsr     GETARY
000D94r 2  A5 5D                lda     EOLPNTR
000D96r 2  A0 04                ldy     #$04
000D98r 2  D1 AE                cmp     (LOWTR),y
000D9Ar 2  D0 E7                bne     SUBERR
000D9Cr 2  4C rr rr             jmp     FIND_ARRAY_ELEMENT
000D9Fr 2               
000D9Fr 2               ; ----------------------------------------------------------------------------
000D9Fr 2               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
000D9Fr 2               ; ----------------------------------------------------------------------------
000D9Fr 2               MAKE_NEW_ARRAY:
000D9Fr 2  20 rr rr             jsr     GETARY
000DA2r 2  20 rr rr             jsr     REASON
000DA5r 2  A9 00                lda     #$00
000DA7r 2  A8                   tay
000DA8r 2  85 C1                sta     STRNG2+1
000DAAr 2  A2 05                ldx     #BYTES_PER_ELEMENT
000DACr 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000DACr 2                       stx     STRNG2
000DACr 2               .endif
000DACr 2  A5 94                lda     VARNAM
000DAEr 2  91 AE                sta     (LOWTR),y
000DB0r 2               .ifndef CONFIG_SMALL
000DB0r 2  10 01                bpl     L3078
000DB2r 2  CA                   dex
000DB3r 2               L3078:
000DB3r 2               .endif
000DB3r 2  C8                   iny
000DB4r 2  A5 95                lda     VARNAM+1
000DB6r 2  91 AE                sta     (LOWTR),y
000DB8r 2               .if (!.def(CONFIG_SMALL)) || .def(CONFIG_2)
000DB8r 2  10 02                bpl     L3081
000DBAr 2  CA                   dex
000DBBr 2                 .if !(.def(CONFIG_SMALL) && .def(CONFIG_2))
000DBBr 2  CA                   dex
000DBCr 2                 .endif
000DBCr 2               L3081:
000DBCr 2  86 C0                stx     STRNG2
000DBEr 2               .endif
000DBEr 2  A5 5D                lda     EOLPNTR
000DC0r 2  C8                   iny
000DC1r 2  C8                   iny
000DC2r 2  C8                   iny
000DC3r 2  91 AE                sta     (LOWTR),y
000DC5r 2               L308A:
000DC5r 2  A2 0B                ldx     #$0B
000DC7r 2  A9 00                lda     #$00
000DC9r 2  24 5E                bit     DIMFLG
000DCBr 2  50 08                bvc     L309A
000DCDr 2  68                   pla
000DCEr 2  18                   clc
000DCFr 2  69 01                adc     #$01
000DD1r 2  AA                   tax
000DD2r 2  68                   pla
000DD3r 2  69 00                adc     #$00
000DD5r 2               L309A:
000DD5r 2  C8                   iny
000DD6r 2  91 AE                sta     (LOWTR),y
000DD8r 2  C8                   iny
000DD9r 2  8A                   txa
000DDAr 2  91 AE                sta     (LOWTR),y
000DDCr 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000DDFr 2  86 C0                stx     STRNG2
000DE1r 2  85 C1                sta     STRNG2+1
000DE3r 2  A4 71                ldy     INDEX
000DE5r 2  C6 5D                dec     EOLPNTR
000DE7r 2  D0 DC                bne     L308A
000DE9r 2  65 A8                adc     HIGHDS+1
000DEBr 2  B0 5D                bcs     GME
000DEDr 2  85 A8                sta     HIGHDS+1
000DEFr 2  A8                   tay
000DF0r 2  8A                   txa
000DF1r 2  65 A7                adc     HIGHDS
000DF3r 2  90 03                bcc     L30BD
000DF5r 2  C8                   iny
000DF6r 2  F0 52                beq     GME
000DF8r 2               L30BD:
000DF8r 2  20 rr rr             jsr     REASON
000DFBr 2  85 80                sta     STREND
000DFDr 2  84 81                sty     STREND+1
000DFFr 2  A9 00                lda     #$00
000E01r 2  E6 C1                inc     STRNG2+1
000E03r 2  A4 C0                ldy     STRNG2
000E05r 2  F0 05                beq     L30D1
000E07r 2               L30CC:
000E07r 2  88                   dey
000E08r 2  91 A7                sta     (HIGHDS),y
000E0Ar 2  D0 FB                bne     L30CC
000E0Cr 2               L30D1:
000E0Cr 2  C6 A8                dec     HIGHDS+1
000E0Er 2  C6 C1                dec     STRNG2+1
000E10r 2  D0 F5                bne     L30CC
000E12r 2  E6 A8                inc     HIGHDS+1
000E14r 2  38                   sec
000E15r 2  A5 80                lda     STREND
000E17r 2  E5 AE                sbc     LOWTR
000E19r 2  A0 02                ldy     #$02
000E1Br 2  91 AE                sta     (LOWTR),y
000E1Dr 2  A5 81                lda     STREND+1
000E1Fr 2  C8                   iny
000E20r 2  E5 AF                sbc     LOWTR+1
000E22r 2  91 AE                sta     (LOWTR),y
000E24r 2  A5 5E                lda     DIMFLG
000E26r 2  D0 62                bne     RTS9
000E28r 2  C8                   iny
000E29r 2               
000E29r 2               ; ----------------------------------------------------------------------------
000E29r 2               ; FIND SPECIFIED ARRAY ELEMENT
000E29r 2               ;
000E29r 2               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
000E29r 2               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
000E29r 2               ; ----------------------------------------------------------------------------
000E29r 2               FIND_ARRAY_ELEMENT:
000E29r 2  B1 AE                lda     (LOWTR),y
000E2Br 2  85 5D                sta     EOLPNTR
000E2Dr 2  A9 00                lda     #$00
000E2Fr 2  85 C0                sta     STRNG2
000E31r 2               L30F6:
000E31r 2  85 C1                sta     STRNG2+1
000E33r 2  C8                   iny
000E34r 2  68                   pla
000E35r 2  AA                   tax
000E36r 2  85 B3                sta     FAC_LAST-1
000E38r 2  68                   pla
000E39r 2  85 B4                sta     FAC_LAST
000E3Br 2  D1 AE                cmp     (LOWTR),y
000E3Dr 2  90 0E                bcc     FAE2
000E3Fr 2  D0 06                bne     GSE
000E41r 2  C8                   iny
000E42r 2  8A                   txa
000E43r 2  D1 AE                cmp     (LOWTR),y
000E45r 2  90 07                bcc     FAE3
000E47r 2               ; ----------------------------------------------------------------------------
000E47r 2               GSE:
000E47r 2  4C rr rr             jmp     SUBERR
000E4Ar 2               GME:
000E4Ar 2  4C rr rr             jmp     MEMERR
000E4Dr 2               ; ----------------------------------------------------------------------------
000E4Dr 2               FAE2:
000E4Dr 2  C8                   iny
000E4Er 2               FAE3:
000E4Er 2  A5 C1                lda     STRNG2+1
000E50r 2  05 C0                ora     STRNG2
000E52r 2  18                   clc
000E53r 2  F0 0A                beq     L3124
000E55r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000E58r 2  8A                   txa
000E59r 2  65 B3                adc     FAC_LAST-1
000E5Br 2  AA                   tax
000E5Cr 2  98                   tya
000E5Dr 2  A4 71                ldy     INDEX
000E5Fr 2               L3124:
000E5Fr 2  65 B4                adc     FAC_LAST
000E61r 2  86 C0                stx     STRNG2
000E63r 2  C6 5D                dec     EOLPNTR
000E65r 2  D0 CA                bne     L30F6
000E67r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000E67r 2                       asl     STRNG2
000E67r 2                       rol     a
000E67r 2                       bcs     GSE
000E67r 2                       asl     STRNG2
000E67r 2                       rol     a
000E67r 2                       bcs     GSE
000E67r 2                       tay
000E67r 2                       lda     STRNG2
000E67r 2               .else
000E67r 2                 .ifdef CONFIG_11A
000E67r 2  85 C1                sta     STRNG2+1
000E69r 2                 .endif
000E69r 2  A2 05                ldx     #BYTES_FP
000E6Br 2                 .ifdef CONFIG_SMALL
000E6Br 2                       lda     VARNAM+1
000E6Br 2                 .else
000E6Br 2  A5 94                lda     VARNAM
000E6Dr 2                 .endif
000E6Dr 2  10 01                bpl     L3135
000E6Fr 2  CA                   dex
000E70r 2               L3135:
000E70r 2                 .ifdef CONFIG_SMALL
000E70r 2                       stx     RESULT+1
000E70r 2                 .else
000E70r 2  A5 95                lda     VARNAM+1
000E72r 2  10 02                bpl     L313B
000E74r 2  CA                   dex
000E75r 2  CA                   dex
000E76r 2               L313B:
000E76r 2  86 77                stx     RESULT+2
000E78r 2                 .endif
000E78r 2  A9 00                lda     #$00
000E7Ar 2  20 rr rr             jsr     MULTIPLY_SUBS1
000E7Dr 2  8A                   txa
000E7Er 2               .endif
000E7Er 2  65 A7                adc     HIGHDS
000E80r 2  85 96                sta     VARPNT
000E82r 2  98                   tya
000E83r 2  65 A8                adc     HIGHDS+1
000E85r 2  85 97                sta     VARPNT+1
000E87r 2  A8                   tay
000E88r 2  A5 96                lda     VARPNT
000E8Ar 2               RTS9:
000E8Ar 2  60                   rts
000E8Br 2               
000E8Br 2               ; ----------------------------------------------------------------------------
000E8Br 2               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
000E8Br 2               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
000E8Br 2               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
000E8Br 2               ; ----------------------------------------------------------------------------
000E8Br 2               MULTIPLY_SUBSCRIPT:
000E8Br 2  84 71                sty     INDEX
000E8Dr 2  B1 AE                lda     (LOWTR),y
000E8Fr 2  85 77                sta     RESULT_LAST-2
000E91r 2  88                   dey
000E92r 2  B1 AE                lda     (LOWTR),y
000E94r 2               MULTIPLY_SUBS1:
000E94r 2  85 78                sta     RESULT_LAST-1
000E96r 2  A9 10                lda     #$10
000E98r 2  85 AC                sta     INDX
000E9Ar 2  A2 00                ldx     #$00
000E9Cr 2  A0 00                ldy     #$00
000E9Er 2               L3163:
000E9Er 2  8A                   txa
000E9Fr 2  0A                   asl     a
000EA0r 2  AA                   tax
000EA1r 2  98                   tya
000EA2r 2  2A                   rol     a
000EA3r 2  A8                   tay
000EA4r 2  B0 A4                bcs     GME
000EA6r 2  06 C0                asl     STRNG2
000EA8r 2  26 C1                rol     STRNG2+1
000EAAr 2  90 0B                bcc     L317C
000EACr 2  18                   clc
000EADr 2  8A                   txa
000EAEr 2  65 77                adc     RESULT_LAST-2
000EB0r 2  AA                   tax
000EB1r 2  98                   tya
000EB2r 2  65 78                adc     RESULT_LAST-1
000EB4r 2  A8                   tay
000EB5r 2  B0 93                bcs     GME
000EB7r 2               L317C:
000EB7r 2  C6 AC                dec     INDX
000EB9r 2  D0 E3                bne     L3163
000EBBr 2  60                   rts
000EBCr 2               
000EBCr 2               
000EBCr 1               .include "misc2.s"
000EBCr 2               .segment "CODE"
000EBCr 2               
000EBCr 2               ; ----------------------------------------------------------------------------
000EBCr 2               ; "FRE" FUNCTION
000EBCr 2               ;
000EBCr 2               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
000EBCr 2               ; ----------------------------------------------------------------------------
000EBCr 2               FRE:
000EBCr 2  A5 5F                lda     VALTYP
000EBEr 2  F0 03                beq     L3188
000EC0r 2  20 rr rr             jsr     FREFAC
000EC3r 2               L3188:
000EC3r 2  20 rr rr             jsr     GARBAG
000EC6r 2  38                   sec
000EC7r 2  A5 82                lda     FRETOP
000EC9r 2  E5 80                sbc     STREND
000ECBr 2  A8                   tay
000ECCr 2  A5 83                lda     FRETOP+1
000ECEr 2  E5 81                sbc     STREND+1
000ED0r 2               ; FALL INTO GIVAYF TO FLOAT THE VALUE
000ED0r 2               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
000ED0r 2               
000ED0r 2               ; ----------------------------------------------------------------------------
000ED0r 2               ; FLOAT THE SIGNED INTEGER IN A,Y
000ED0r 2               ; ----------------------------------------------------------------------------
000ED0r 2               GIVAYF:
000ED0r 2  A2 00                ldx     #$00
000ED2r 2  86 5F                stx     VALTYP
000ED4r 2  85 B1                sta     FAC+1
000ED6r 2  84 B2                sty     FAC+2
000ED8r 2  A2 90                ldx     #$90
000EDAr 2  4C rr rr             jmp     FLOAT1
000EDDr 2               POS:
000EDDr 2  A4 0E                ldy     POSX
000EDFr 2               
000EDFr 2               ; ----------------------------------------------------------------------------
000EDFr 2               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
000EDFr 2               ; ----------------------------------------------------------------------------
000EDFr 2               SNGFLT:
000EDFr 2  A9 00                lda     #$00
000EE1r 2  F0 ED                beq     GIVAYF
000EE3r 2               
000EE3r 2               ; ----------------------------------------------------------------------------
000EE3r 2               ; CHECK FOR DIRECT OR RUNNING MODE
000EE3r 2               ; GIVING ERROR IF DIRECT MODE
000EE3r 2               ; ----------------------------------------------------------------------------
000EE3r 2               ERRDIR:
000EE3r 2  A6 89                ldx     CURLIN+1
000EE5r 2  E8                   inx
000EE6r 2  D0 A2                bne     RTS9
000EE8r 2  A2 95                ldx     #ERR_ILLDIR
000EEAr 2               .ifdef CONFIG_2
000EEAr 2                       .byte   $2C
000EEAr 2               LD288:
000EEAr 2                       ldx     #ERR_UNDEFFN
000EEAr 2               .endif
000EEAr 2               L31AF:
000EEAr 2  4C rr rr             jmp     ERROR
000EEDr 2               DEF:
000EEDr 2  20 rr rr             jsr     FNC
000EF0r 2  20 rr rr             jsr     ERRDIR
000EF3r 2  20 rr rr             jsr     CHKOPN
000EF6r 2  A9 80                lda     #$80
000EF8r 2  85 62                sta     SUBFLG
000EFAr 2  20 rr rr             jsr     PTRGET
000EFDr 2  20 rr rr             jsr     CHKNUM
000F00r 2  20 rr rr             jsr     CHKCLS
000F03r 2  A9 AC                lda     #TOKEN_EQUAL
000F05r 2  20 rr rr             jsr     SYNCHR
000F08r 2               .ifndef CONFIG_SMALL
000F08r 2  48                   pha
000F09r 2               .endif
000F09r 2  A5 97                lda     VARPNT+1
000F0Br 2  48                   pha
000F0Cr 2  A5 96                lda     VARPNT
000F0Er 2  48                   pha
000F0Fr 2  A5 CA                lda     TXTPTR+1
000F11r 2  48                   pha
000F12r 2  A5 C9                lda     TXTPTR
000F14r 2  48                   pha
000F15r 2  20 rr rr             jsr     DATA
000F18r 2  4C rr rr             jmp     L3250
000F1Br 2               FNC:
000F1Br 2  A9 9F                lda     #TOKEN_FN
000F1Dr 2  20 rr rr             jsr     SYNCHR
000F20r 2  09 80                ora     #$80
000F22r 2  85 62                sta     SUBFLG
000F24r 2  20 rr rr             jsr     PTRGET3
000F27r 2  85 9D                sta     FNCNAM
000F29r 2  84 9E                sty     FNCNAM+1
000F2Br 2  4C rr rr             jmp     CHKNUM
000F2Er 2               L31F3:
000F2Er 2  20 rr rr             jsr     FNC
000F31r 2  A5 9E                lda     FNCNAM+1
000F33r 2  48                   pha
000F34r 2  A5 9D                lda     FNCNAM
000F36r 2  48                   pha
000F37r 2  20 rr rr             jsr     PARCHK
000F3Ar 2  20 rr rr             jsr     CHKNUM
000F3Dr 2  68                   pla
000F3Er 2  85 9D                sta     FNCNAM
000F40r 2  68                   pla
000F41r 2  85 9E                sta     FNCNAM+1
000F43r 2  A0 02                ldy     #$02
000F45r 2               .ifndef CONFIG_2
000F45r 2  A2 E0                ldx     #ERR_UNDEFFN
000F47r 2               .endif
000F47r 2  B1 9D                lda     (FNCNAM),y
000F49r 2               .ifndef CONFIG_2
000F49r 2  F0 9F                beq     L31AF
000F4Br 2               .endif
000F4Br 2  85 96                sta     VARPNT
000F4Dr 2  AA                   tax
000F4Er 2  C8                   iny
000F4Fr 2  B1 9D                lda     (FNCNAM),y
000F51r 2               .ifdef CONFIG_2
000F51r 2                       beq     LD288
000F51r 2               .endif
000F51r 2  85 97                sta     VARPNT+1
000F53r 2               .ifndef CONFIG_SMALL
000F53r 2  C8                   iny
000F54r 2               .endif
000F54r 2               L3219:
000F54r 2  B1 96                lda     (VARPNT),y
000F56r 2  48                   pha
000F57r 2  88                   dey
000F58r 2  10 FA                bpl     L3219
000F5Ar 2  A4 97                ldy     VARPNT+1
000F5Cr 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
000F5Fr 2  A5 CA                lda     TXTPTR+1
000F61r 2  48                   pha
000F62r 2  A5 C9                lda     TXTPTR
000F64r 2  48                   pha
000F65r 2  B1 9D                lda     (FNCNAM),y
000F67r 2  85 C9                sta     TXTPTR
000F69r 2  C8                   iny
000F6Ar 2  B1 9D                lda     (FNCNAM),y
000F6Cr 2  85 CA                sta     TXTPTR+1
000F6Er 2  A5 97                lda     VARPNT+1
000F70r 2  48                   pha
000F71r 2  A5 96                lda     VARPNT
000F73r 2  48                   pha
000F74r 2  20 rr rr             jsr     FRMNUM
000F77r 2  68                   pla
000F78r 2  85 9D                sta     FNCNAM
000F7Ar 2  68                   pla
000F7Br 2  85 9E                sta     FNCNAM+1
000F7Dr 2  20 C8 00             jsr     CHRGOT
000F80r 2  F0 03                beq     L324A
000F82r 2  4C rr rr             jmp     SYNERR
000F85r 2               L324A:
000F85r 2  68                   pla
000F86r 2  85 C9                sta     TXTPTR
000F88r 2  68                   pla
000F89r 2  85 CA                sta     TXTPTR+1
000F8Br 2               L3250:
000F8Br 2  A0 00                ldy     #$00
000F8Dr 2  68                   pla
000F8Er 2  91 9D                sta     (FNCNAM),y
000F90r 2  68                   pla
000F91r 2  C8                   iny
000F92r 2  91 9D                sta     (FNCNAM),y
000F94r 2  68                   pla
000F95r 2  C8                   iny
000F96r 2  91 9D                sta     (FNCNAM),y
000F98r 2  68                   pla
000F99r 2  C8                   iny
000F9Ar 2  91 9D                sta     (FNCNAM),y
000F9Cr 2               .ifndef CONFIG_SMALL
000F9Cr 2  68                   pla
000F9Dr 2  C8                   iny
000F9Er 2  91 9D                sta     (FNCNAM),y
000FA0r 2               .endif
000FA0r 2  60                   rts
000FA1r 2               
000FA1r 1               .include "string.s"
000FA1r 2               .segment "CODE"
000FA1r 2               ; ----------------------------------------------------------------------------
000FA1r 2               ; "STR$" FUNCTION
000FA1r 2               ; ----------------------------------------------------------------------------
000FA1r 2               STR:
000FA1r 2  20 rr rr             jsr     CHKNUM
000FA4r 2  A0 00                ldy     #$00
000FA6r 2  20 rr rr             jsr     FOUT1
000FA9r 2  68                   pla
000FAAr 2  68                   pla
000FABr 2               LD353:
000FABr 2  A9 FF                lda     #$FF
000FADr 2  A0 00                ldy     #$00
000FAFr 2  F0 12                beq     STRLIT
000FB1r 2               
000FB1r 2               ; ----------------------------------------------------------------------------
000FB1r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000FB1r 2               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
000FB1r 2               ; ----------------------------------------------------------------------------
000FB1r 2               STRINI:
000FB1r 2  A6 B3                ldx     FAC_LAST-1
000FB3r 2  A4 B4                ldy     FAC_LAST
000FB5r 2  86 9F                stx     DSCPTR
000FB7r 2  84 A0                sty     DSCPTR+1
000FB9r 2               
000FB9r 2               ; ----------------------------------------------------------------------------
000FB9r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000FB9r 2               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
000FB9r 2               ; ----------------------------------------------------------------------------
000FB9r 2               STRSPA:
000FB9r 2  20 rr rr             jsr     GETSPA
000FBCr 2  86 B1                stx     FAC+1
000FBEr 2  84 B2                sty     FAC+2
000FC0r 2  85 B0                sta     FAC
000FC2r 2  60                   rts
000FC3r 2               
000FC3r 2               ; ----------------------------------------------------------------------------
000FC3r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000FC3r 2               ; AND TERMINATED BY $00 OR QUOTATION MARK
000FC3r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000FC3r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000FC3r 2               ; ----------------------------------------------------------------------------
000FC3r 2               STRLIT:
000FC3r 2  A2 22                ldx     #$22
000FC5r 2  86 5B                stx     CHARAC
000FC7r 2  86 5C                stx     ENDCHR
000FC9r 2               
000FC9r 2               ; ----------------------------------------------------------------------------
000FC9r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000FC9r 2               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
000FC9r 2               ;
000FC9r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000FC9r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000FC9r 2               ; ----------------------------------------------------------------------------
000FC9r 2               STRLT2:
000FC9r 2  85 BE                sta     STRNG1
000FCBr 2  84 BF                sty     STRNG1+1
000FCDr 2  85 B1                sta     FAC+1
000FCFr 2  84 B2                sty     FAC+2
000FD1r 2  A0 FF                ldy     #$FF
000FD3r 2               L3298:
000FD3r 2  C8                   iny
000FD4r 2  B1 BE                lda     (STRNG1),y
000FD6r 2  F0 0C                beq     L32A9
000FD8r 2  C5 5B                cmp     CHARAC
000FDAr 2  F0 04                beq     L32A5
000FDCr 2  C5 5C                cmp     ENDCHR
000FDEr 2  D0 F3                bne     L3298
000FE0r 2               L32A5:
000FE0r 2  C9 22                cmp     #$22
000FE2r 2  F0 01                beq     L32AA
000FE4r 2               L32A9:
000FE4r 2  18                   clc
000FE5r 2               L32AA:
000FE5r 2  84 B0                sty     FAC
000FE7r 2  98                   tya
000FE8r 2  65 BE                adc     STRNG1
000FEAr 2  85 C0                sta     STRNG2
000FECr 2  A6 BF                ldx     STRNG1+1
000FEEr 2  90 01                bcc     L32B6
000FF0r 2  E8                   inx
000FF1r 2               L32B6:
000FF1r 2  86 C1                stx     STRNG2+1
000FF3r 2  A5 BF                lda     STRNG1+1
000FF5r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000FF5r 2                       beq     LD399
000FF5r 2                       cmp     #>INPUTBUFFER
000FF5r 2               .endif
000FF5r 2  D0 0B                bne     PUTNEW
000FF7r 2               LD399:
000FF7r 2  98                   tya
000FF8r 2  20 rr rr             jsr     STRINI
000FFBr 2  A6 BE                ldx     STRNG1
000FFDr 2  A4 BF                ldy     STRNG1+1
000FFFr 2  20 rr rr             jsr     MOVSTR
001002r 2               
001002r 2               ; ----------------------------------------------------------------------------
001002r 2               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
001002r 2               ;
001002r 2               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
001002r 2               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
001002r 2               ; ----------------------------------------------------------------------------
001002r 2               PUTNEW:
001002r 2  A6 65                ldx     TEMPPT
001004r 2  E0 71                cpx     #TEMPST+9
001006r 2  D0 05                bne     PUTEMP
001008r 2  A2 BF                ldx     #ERR_FRMCPX
00100Ar 2               JERR:
00100Ar 2  4C rr rr             jmp     ERROR
00100Dr 2               PUTEMP:
00100Dr 2  A5 B0                lda     FAC
00100Fr 2  95 00                sta     0,x
001011r 2  A5 B1                lda     FAC+1
001013r 2  95 01                sta     1,x
001015r 2  A5 B2                lda     FAC+2
001017r 2  95 02                sta     2,x
001019r 2  A0 00                ldy     #$00
00101Br 2  86 B3                stx     FAC_LAST-1
00101Dr 2  84 B4                sty     FAC_LAST
00101Fr 2               .ifdef CONFIG_2
00101Fr 2                       sty     FACEXTENSION
00101Fr 2               .endif
00101Fr 2  88                   dey
001020r 2  84 5F                sty     VALTYP
001022r 2  86 66                stx     LASTPT
001024r 2  E8                   inx
001025r 2  E8                   inx
001026r 2  E8                   inx
001027r 2  86 65                stx     TEMPPT
001029r 2  60                   rts
00102Ar 2               
00102Ar 2               ; ----------------------------------------------------------------------------
00102Ar 2               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
00102Ar 2               ; (A)=# BYTES SPACE TO MAKE
00102Ar 2               ;
00102Ar 2               ; RETURN WITH (A) SAME,
00102Ar 2               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
00102Ar 2               ; ----------------------------------------------------------------------------
00102Ar 2               GETSPA:
00102Ar 2  46 61                lsr     DATAFLG
00102Cr 2               L32F1:
00102Cr 2  48                   pha
00102Dr 2  49 FF                eor     #$FF
00102Fr 2  38                   sec
001030r 2  65 82                adc     FRETOP
001032r 2  A4 83                ldy     FRETOP+1
001034r 2  B0 01                bcs     L32FC
001036r 2  88                   dey
001037r 2               L32FC:
001037r 2  C4 81                cpy     STREND+1
001039r 2  90 11                bcc     L3311
00103Br 2  D0 04                bne     L3306
00103Dr 2  C5 80                cmp     STREND
00103Fr 2  90 0B                bcc     L3311
001041r 2               L3306:
001041r 2  85 82                sta     FRETOP
001043r 2  84 83                sty     FRETOP+1
001045r 2  85 84                sta     FRESPC
001047r 2  84 85                sty     FRESPC+1
001049r 2  AA                   tax
00104Ar 2  68                   pla
00104Br 2  60                   rts
00104Cr 2               L3311:
00104Cr 2  A2 4D                ldx     #ERR_MEMFULL
00104Er 2  A5 61                lda     DATAFLG
001050r 2  30 B8                bmi     JERR
001052r 2  20 rr rr             jsr     GARBAG
001055r 2  A9 80                lda     #$80
001057r 2  85 61                sta     DATAFLG
001059r 2  68                   pla
00105Ar 2  D0 D0                bne     L32F1
00105Cr 2               
00105Cr 2               ; ----------------------------------------------------------------------------
00105Cr 2               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
00105Cr 2               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
00105Cr 2               ; BELOW STRING AREA DOWN TO STREND.
00105Cr 2               ; ----------------------------------------------------------------------------
00105Cr 2               GARBAG:
00105Cr 2               
00105Cr 2               .ifdef CONST_MEMSIZ
00105Cr 2                       ldx     #<CONST_MEMSIZ
00105Cr 2                       lda     #>CONST_MEMSIZ
00105Cr 2               .else
00105Cr 2  A6 86                ldx     MEMSIZ
00105Er 2  A5 87                lda     MEMSIZ+1
001060r 2               .endif
001060r 2               FINDHIGHESTSTRING:
001060r 2  86 82                stx     FRETOP
001062r 2  85 83                sta     FRETOP+1
001064r 2  A0 00                ldy     #$00
001066r 2  84 9E                sty     FNCNAM+1
001068r 2               .ifdef CONFIG_2
001068r 2                       sty     FNCNAM	; GC bugfix!
001068r 2               .endif
001068r 2  A5 80                lda     STREND
00106Ar 2  A6 81                ldx     STREND+1
00106Cr 2  85 AE                sta     LOWTR
00106Er 2  86 AF                stx     LOWTR+1
001070r 2  A9 68                lda     #TEMPST
001072r 2  A2 00                ldx     #$00
001074r 2  85 71                sta     INDEX
001076r 2  86 72                stx     INDEX+1
001078r 2               L333D:
001078r 2  C5 65                cmp     TEMPPT
00107Ar 2  F0 05                beq     L3346
00107Cr 2  20 rr rr             jsr     CHECK_VARIABLE
00107Fr 2  F0 F7                beq     L333D
001081r 2               L3346:
001081r 2  A9 07                lda     #BYTES_PER_VARIABLE
001083r 2  85 A2                sta     DSCLEN
001085r 2  A5 7C                lda     VARTAB
001087r 2  A6 7D                ldx     VARTAB+1
001089r 2  85 71                sta     INDEX
00108Br 2  86 72                stx     INDEX+1
00108Dr 2               L3352:
00108Dr 2  E4 7F                cpx     ARYTAB+1
00108Fr 2  D0 04                bne     L335A
001091r 2  C5 7E                cmp     ARYTAB
001093r 2  F0 05                beq     L335F
001095r 2               L335A:
001095r 2  20 rr rr             jsr     CHECK_SIMPLE_VARIABLE
001098r 2  F0 F3                beq     L3352
00109Ar 2               L335F:
00109Ar 2  85 A7                sta     HIGHDS
00109Cr 2  86 A8                stx     HIGHDS+1
00109Er 2  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
0010A0r 2  85 A2                sta     DSCLEN
0010A2r 2               L3367:
0010A2r 2  A5 A7                lda     HIGHDS
0010A4r 2  A6 A8                ldx     HIGHDS+1
0010A6r 2               L336B:
0010A6r 2  E4 81                cpx     STREND+1
0010A8r 2  D0 07                bne     L3376
0010AAr 2  C5 80                cmp     STREND
0010ACr 2  D0 03                bne     L3376
0010AEr 2  4C rr rr             jmp     MOVE_HIGHEST_STRING_TO_TOP
0010B1r 2               L3376:
0010B1r 2  85 71                sta     INDEX
0010B3r 2  86 72                stx     INDEX+1
0010B5r 2               .ifdef CONFIG_SMALL
0010B5r 2                       ldy     #$01
0010B5r 2               .else
0010B5r 2  A0 00                ldy     #$00
0010B7r 2  B1 71                lda     (INDEX),y
0010B9r 2  AA                   tax
0010BAr 2  C8                   iny
0010BBr 2               .endif
0010BBr 2  B1 71                lda     (INDEX),y
0010BDr 2  08                   php
0010BEr 2  C8                   iny
0010BFr 2  B1 71                lda     (INDEX),y
0010C1r 2  65 A7                adc     HIGHDS
0010C3r 2  85 A7                sta     HIGHDS
0010C5r 2  C8                   iny
0010C6r 2  B1 71                lda     (INDEX),y
0010C8r 2  65 A8                adc     HIGHDS+1
0010CAr 2  85 A8                sta     HIGHDS+1
0010CCr 2  28                   plp
0010CDr 2  10 D3                bpl     L3367
0010CFr 2               .ifndef CONFIG_SMALL
0010CFr 2  8A                   txa
0010D0r 2  30 D0                bmi     L3367
0010D2r 2               .endif
0010D2r 2  C8                   iny
0010D3r 2  B1 71                lda     (INDEX),y
0010D5r 2               .ifdef CONFIG_CBM1_PATCHES
0010D5r 2                       jsr     LE7F3 ; XXX patch, call into screen editor
0010D5r 2               .else
0010D5r 2                 .ifdef CONFIG_11
0010D5r 2  A0 00                ldy     #$00	; GC bugfix
0010D7r 2                 .endif
0010D7r 2  0A                   asl     a
0010D8r 2  69 05                adc     #$05
0010DAr 2               .endif
0010DAr 2  65 71                adc     INDEX
0010DCr 2  85 71                sta     INDEX
0010DEr 2  90 02                bcc     L33A7
0010E0r 2  E6 72                inc     INDEX+1
0010E2r 2               L33A7:
0010E2r 2  A6 72                ldx     INDEX+1
0010E4r 2               L33A9:
0010E4r 2  E4 A8                cpx     HIGHDS+1
0010E6r 2  D0 04                bne     L33B1
0010E8r 2  C5 A7                cmp     HIGHDS
0010EAr 2  F0 BA                beq     L336B
0010ECr 2               L33B1:
0010ECr 2  20 rr rr             jsr     CHECK_VARIABLE
0010EFr 2  F0 F3                beq     L33A9
0010F1r 2               
0010F1r 2               ; ----------------------------------------------------------------------------
0010F1r 2               ; PROCESS A SIMPLE VARIABLE
0010F1r 2               ; ----------------------------------------------------------------------------
0010F1r 2               CHECK_SIMPLE_VARIABLE:
0010F1r 2               .ifndef CONFIG_SMALL
0010F1r 2  B1 71                lda     (INDEX),y
0010F3r 2  30 35                bmi     CHECK_BUMP
0010F5r 2               .endif
0010F5r 2  C8                   iny
0010F6r 2  B1 71                lda     (INDEX),y
0010F8r 2  10 30                bpl     CHECK_BUMP
0010FAr 2  C8                   iny
0010FBr 2               
0010FBr 2               ; ----------------------------------------------------------------------------
0010FBr 2               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
0010FBr 2               ; ----------------------------------------------------------------------------
0010FBr 2               CHECK_VARIABLE:
0010FBr 2  B1 71                lda     (INDEX),y
0010FDr 2  F0 2B                beq     CHECK_BUMP
0010FFr 2  C8                   iny
001100r 2  B1 71                lda     (INDEX),y
001102r 2  AA                   tax
001103r 2  C8                   iny
001104r 2  B1 71                lda     (INDEX),y
001106r 2  C5 83                cmp     FRETOP+1
001108r 2  90 06                bcc     L33D5
00110Ar 2  D0 1E                bne     CHECK_BUMP
00110Cr 2  E4 82                cpx     FRETOP
00110Er 2  B0 1A                bcs     CHECK_BUMP
001110r 2               L33D5:
001110r 2  C5 AF                cmp     LOWTR+1
001112r 2  90 16                bcc     CHECK_BUMP
001114r 2  D0 04                bne     L33DF
001116r 2  E4 AE                cpx     LOWTR
001118r 2  90 10                bcc     CHECK_BUMP
00111Ar 2               L33DF:
00111Ar 2  86 AE                stx     LOWTR
00111Cr 2  85 AF                sta     LOWTR+1
00111Er 2  A5 71                lda     INDEX
001120r 2  A6 72                ldx     INDEX+1
001122r 2  85 9D                sta     FNCNAM
001124r 2  86 9E                stx     FNCNAM+1
001126r 2  A5 A2                lda     DSCLEN
001128r 2  85 A4                sta     Z52
00112Ar 2               
00112Ar 2               ; ----------------------------------------------------------------------------
00112Ar 2               ; ADD (DSCLEN) TO PNTR IN INDEX
00112Ar 2               ; RETURN WITH Y=0, PNTR ALSO IN X,A
00112Ar 2               ; ----------------------------------------------------------------------------
00112Ar 2               CHECK_BUMP:
00112Ar 2  A5 A2                lda     DSCLEN
00112Cr 2  18                   clc
00112Dr 2  65 71                adc     INDEX
00112Fr 2  85 71                sta     INDEX
001131r 2  90 02                bcc     L33FA
001133r 2  E6 72                inc     INDEX+1
001135r 2               L33FA:
001135r 2  A6 72                ldx     INDEX+1
001137r 2  A0 00                ldy     #$00
001139r 2  60                   rts
00113Ar 2               
00113Ar 2               ; ----------------------------------------------------------------------------
00113Ar 2               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
00113Ar 2               ; TO TOP AND GO BACK FOR ANOTHER
00113Ar 2               ; ----------------------------------------------------------------------------
00113Ar 2               MOVE_HIGHEST_STRING_TO_TOP:
00113Ar 2               .ifdef CONFIG_2
00113Ar 2                       lda     FNCNAM+1	; GC bugfix
00113Ar 2                       ora     FNCNAM
00113Ar 2               .else
00113Ar 2  A6 9E                ldx     FNCNAM+1
00113Cr 2               .endif
00113Cr 2  F0 F7                beq     L33FA
00113Er 2  A5 A4                lda     Z52
001140r 2               .ifndef CONFIG_10A
001140r 2                       sbc     #$03
001140r 2               .else
001140r 2  29 04                and     #$04
001142r 2               .endif
001142r 2  4A                   lsr     a
001143r 2  A8                   tay
001144r 2  85 A4                sta     Z52
001146r 2  B1 9D                lda     (FNCNAM),y
001148r 2  65 AE                adc     LOWTR
00114Ar 2  85 A9                sta     HIGHTR
00114Cr 2  A5 AF                lda     LOWTR+1
00114Er 2  69 00                adc     #$00
001150r 2  85 AA                sta     HIGHTR+1
001152r 2  A5 82                lda     FRETOP
001154r 2  A6 83                ldx     FRETOP+1
001156r 2  85 A7                sta     HIGHDS
001158r 2  86 A8                stx     HIGHDS+1
00115Ar 2  20 rr rr             jsr     BLTU2
00115Dr 2  A4 A4                ldy     Z52
00115Fr 2  C8                   iny
001160r 2  A5 A7                lda     HIGHDS
001162r 2  91 9D                sta     (FNCNAM),y
001164r 2  AA                   tax
001165r 2  E6 A8                inc     HIGHDS+1
001167r 2  A5 A8                lda     HIGHDS+1
001169r 2  C8                   iny
00116Ar 2  91 9D                sta     (FNCNAM),y
00116Cr 2  4C rr rr             jmp     FINDHIGHESTSTRING
00116Fr 2               
00116Fr 2               ; ----------------------------------------------------------------------------
00116Fr 2               ; CONCATENATE TWO STRINGS
00116Fr 2               ; ----------------------------------------------------------------------------
00116Fr 2               CAT:
00116Fr 2  A5 B4                lda     FAC_LAST
001171r 2  48                   pha
001172r 2  A5 B3                lda     FAC_LAST-1
001174r 2  48                   pha
001175r 2  20 rr rr             jsr     FRM_ELEMENT
001178r 2  20 rr rr             jsr     CHKSTR
00117Br 2  68                   pla
00117Cr 2  85 BE                sta     STRNG1
00117Er 2  68                   pla
00117Fr 2  85 BF                sta     STRNG1+1
001181r 2  A0 00                ldy     #$00
001183r 2  B1 BE                lda     (STRNG1),y
001185r 2  18                   clc
001186r 2  71 B3                adc     (FAC_LAST-1),y
001188r 2  90 05                bcc     L3454
00118Ar 2  A2 B0                ldx     #ERR_STRLONG
00118Cr 2  4C rr rr             jmp     ERROR
00118Fr 2               L3454:
00118Fr 2  20 rr rr             jsr     STRINI
001192r 2  20 rr rr             jsr     MOVINS
001195r 2  A5 9F                lda     DSCPTR
001197r 2  A4 A0                ldy     DSCPTR+1
001199r 2  20 rr rr             jsr     FRETMP
00119Cr 2  20 rr rr             jsr     MOVSTR1
00119Fr 2  A5 BE                lda     STRNG1
0011A1r 2  A4 BF                ldy     STRNG1+1
0011A3r 2  20 rr rr             jsr     FRETMP
0011A6r 2  20 rr rr             jsr     PUTNEW
0011A9r 2  4C rr rr             jmp     FRMEVL2
0011ACr 2               
0011ACr 2               ; ----------------------------------------------------------------------------
0011ACr 2               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
0011ACr 2               ; AND MOVE DESCRIBED STRING TO (FRESPC)
0011ACr 2               ; ----------------------------------------------------------------------------
0011ACr 2               MOVINS:
0011ACr 2  A0 00                ldy     #$00
0011AEr 2  B1 BE                lda     (STRNG1),y
0011B0r 2  48                   pha
0011B1r 2  C8                   iny
0011B2r 2  B1 BE                lda     (STRNG1),y
0011B4r 2  AA                   tax
0011B5r 2  C8                   iny
0011B6r 2  B1 BE                lda     (STRNG1),y
0011B8r 2  A8                   tay
0011B9r 2  68                   pla
0011BAr 2               
0011BAr 2               ; ----------------------------------------------------------------------------
0011BAr 2               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
0011BAr 2               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
0011BAr 2               ; ----------------------------------------------------------------------------
0011BAr 2               MOVSTR:
0011BAr 2  86 71                stx     INDEX
0011BCr 2  84 72                sty     INDEX+1
0011BEr 2               MOVSTR1:
0011BEr 2  A8                   tay
0011BFr 2  F0 0A                beq     L3490
0011C1r 2  48                   pha
0011C2r 2               L3487:
0011C2r 2  88                   dey
0011C3r 2  B1 71                lda     (INDEX),y
0011C5r 2  91 84                sta     (FRESPC),y
0011C7r 2  98                   tya
0011C8r 2  D0 F8                bne     L3487
0011CAr 2  68                   pla
0011CBr 2               L3490:
0011CBr 2  18                   clc
0011CCr 2  65 84                adc     FRESPC
0011CEr 2  85 84                sta     FRESPC
0011D0r 2  90 02                bcc     L3499
0011D2r 2  E6 85                inc     FRESPC+1
0011D4r 2               L3499:
0011D4r 2  60                   rts
0011D5r 2               
0011D5r 2               ; ----------------------------------------------------------------------------
0011D5r 2               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
0011D5r 2               ; ----------------------------------------------------------------------------
0011D5r 2               FRESTR:
0011D5r 2  20 rr rr             jsr     CHKSTR
0011D8r 2               
0011D8r 2               ; ----------------------------------------------------------------------------
0011D8r 2               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
0011D8r 2               ; A TEMPORARY STRING, RELEASE IT.
0011D8r 2               ; ----------------------------------------------------------------------------
0011D8r 2               FREFAC:
0011D8r 2  A5 B3                lda     FAC_LAST-1
0011DAr 2  A4 B4                ldy     FAC_LAST
0011DCr 2               
0011DCr 2               ; ----------------------------------------------------------------------------
0011DCr 2               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
0011DCr 2               ; A TEMPORARY STRING, RELEASE IT.
0011DCr 2               ; ----------------------------------------------------------------------------
0011DCr 2               FRETMP:
0011DCr 2  85 71                sta     INDEX
0011DEr 2  84 72                sty     INDEX+1
0011E0r 2  20 rr rr             jsr     FRETMS
0011E3r 2  08                   php
0011E4r 2  A0 00                ldy     #$00
0011E6r 2  B1 71                lda     (INDEX),y
0011E8r 2  48                   pha
0011E9r 2  C8                   iny
0011EAr 2  B1 71                lda     (INDEX),y
0011ECr 2  AA                   tax
0011EDr 2  C8                   iny
0011EEr 2  B1 71                lda     (INDEX),y
0011F0r 2  A8                   tay
0011F1r 2  68                   pla
0011F2r 2  28                   plp
0011F3r 2  D0 13                bne     L34CD
0011F5r 2  C4 83                cpy     FRETOP+1
0011F7r 2  D0 0F                bne     L34CD
0011F9r 2  E4 82                cpx     FRETOP
0011FBr 2  D0 0B                bne     L34CD
0011FDr 2  48                   pha
0011FEr 2  18                   clc
0011FFr 2  65 82                adc     FRETOP
001201r 2  85 82                sta     FRETOP
001203r 2  90 02                bcc     L34CC
001205r 2  E6 83                inc     FRETOP+1
001207r 2               L34CC:
001207r 2  68                   pla
001208r 2               L34CD:
001208r 2  86 71                stx     INDEX
00120Ar 2  84 72                sty     INDEX+1
00120Cr 2  60                   rts
00120Dr 2               
00120Dr 2               ; ----------------------------------------------------------------------------
00120Dr 2               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
00120Dr 2               ; ----------------------------------------------------------------------------
00120Dr 2               FRETMS:
00120Dr 2               .ifdef KBD
00120Dr 2                       cpy     #$00
00120Dr 2               .else
00120Dr 2  C4 67                cpy     LASTPT+1
00120Fr 2               .endif
00120Fr 2  D0 0C                bne     L34E2
001211r 2  C5 66                cmp     LASTPT
001213r 2  D0 08                bne     L34E2
001215r 2  85 65                sta     TEMPPT
001217r 2  E9 03                sbc     #$03
001219r 2  85 66                sta     LASTPT
00121Br 2  A0 00                ldy     #$00
00121Dr 2               L34E2:
00121Dr 2  60                   rts
00121Er 2               
00121Er 2               ; ----------------------------------------------------------------------------
00121Er 2               ; "CHR$" FUNCTION
00121Er 2               ; ----------------------------------------------------------------------------
00121Er 2               CHRSTR:
00121Er 2  20 rr rr             jsr     CONINT
001221r 2  8A                   txa
001222r 2  48                   pha
001223r 2  A9 01                lda     #$01
001225r 2  20 rr rr             jsr     STRSPA
001228r 2  68                   pla
001229r 2  A0 00                ldy     #$00
00122Br 2  91 B1                sta     (FAC+1),y
00122Dr 2  68                   pla
00122Er 2  68                   pla
00122Fr 2  4C rr rr             jmp     PUTNEW
001232r 2               
001232r 2               ; ----------------------------------------------------------------------------
001232r 2               ; "LEFT$" FUNCTION
001232r 2               ; ----------------------------------------------------------------------------
001232r 2               LEFTSTR:
001232r 2  20 rr rr             jsr     SUBSTRING_SETUP
001235r 2  D1 9F                cmp     (DSCPTR),y
001237r 2  98                   tya
001238r 2               SUBSTRING1:
001238r 2  90 04                bcc     L3503
00123Ar 2  B1 9F                lda     (DSCPTR),y
00123Cr 2  AA                   tax
00123Dr 2  98                   tya
00123Er 2               L3503:
00123Er 2  48                   pha
00123Fr 2               SUBSTRING2:
00123Fr 2  8A                   txa
001240r 2               SUBSTRING3:
001240r 2  48                   pha
001241r 2  20 rr rr             jsr     STRSPA
001244r 2  A5 9F                lda     DSCPTR
001246r 2  A4 A0                ldy     DSCPTR+1
001248r 2  20 rr rr             jsr     FRETMP
00124Br 2  68                   pla
00124Cr 2  A8                   tay
00124Dr 2  68                   pla
00124Er 2  18                   clc
00124Fr 2  65 71                adc     INDEX
001251r 2  85 71                sta     INDEX
001253r 2  90 02                bcc     L351C
001255r 2  E6 72                inc     INDEX+1
001257r 2               L351C:
001257r 2  98                   tya
001258r 2  20 rr rr             jsr     MOVSTR1
00125Br 2  4C rr rr             jmp     PUTNEW
00125Er 2               
00125Er 2               ; ----------------------------------------------------------------------------
00125Er 2               ; "RIGHT$" FUNCTION
00125Er 2               ; ----------------------------------------------------------------------------
00125Er 2               RIGHTSTR:
00125Er 2  20 rr rr             jsr     SUBSTRING_SETUP
001261r 2  18                   clc
001262r 2  F1 9F                sbc     (DSCPTR),y
001264r 2  49 FF                eor     #$FF
001266r 2  4C rr rr             jmp     SUBSTRING1
001269r 2               
001269r 2               ; ----------------------------------------------------------------------------
001269r 2               ; "MID$" FUNCTION
001269r 2               ; ----------------------------------------------------------------------------
001269r 2               MIDSTR:
001269r 2  A9 FF                lda     #$FF
00126Br 2  85 B4                sta     FAC_LAST
00126Dr 2  20 C8 00             jsr     CHRGOT
001270r 2  C9 29                cmp     #$29
001272r 2  F0 06                beq     L353F
001274r 2  20 rr rr             jsr     CHKCOM
001277r 2  20 rr rr             jsr     GETBYT
00127Ar 2               L353F:
00127Ar 2  20 rr rr             jsr     SUBSTRING_SETUP
00127Dr 2               .ifdef CONFIG_2
00127Dr 2                       beq     GOIQ
00127Dr 2               .endif
00127Dr 2  CA                   dex
00127Er 2  8A                   txa
00127Fr 2  48                   pha
001280r 2  18                   clc
001281r 2  A2 00                ldx     #$00
001283r 2  F1 9F                sbc     (DSCPTR),y
001285r 2  B0 B8                bcs     SUBSTRING2
001287r 2  49 FF                eor     #$FF
001289r 2  C5 B4                cmp     FAC_LAST
00128Br 2  90 B3                bcc     SUBSTRING3
00128Dr 2  A5 B4                lda     FAC_LAST
00128Fr 2  B0 AF                bcs     SUBSTRING3
001291r 2               
001291r 2               ; ----------------------------------------------------------------------------
001291r 2               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
001291r 2               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
001291r 2               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
001291r 2               ; ----------------------------------------------------------------------------
001291r 2               SUBSTRING_SETUP:
001291r 2  20 rr rr             jsr     CHKCLS
001294r 2  68                   pla
001295r 2               .ifndef CONFIG_11
001295r 2                       sta     JMPADRS+1
001295r 2                       pla
001295r 2                       sta     JMPADRS+2
001295r 2               .else
001295r 2  A8                   tay
001296r 2  68                   pla
001297r 2  85 A4                sta     Z52
001299r 2               .endif
001299r 2  68                   pla
00129Ar 2  68                   pla
00129Br 2  68                   pla
00129Cr 2  AA                   tax
00129Dr 2  68                   pla
00129Er 2  85 9F                sta     DSCPTR
0012A0r 2  68                   pla
0012A1r 2  85 A0                sta     DSCPTR+1
0012A3r 2               .ifdef CONFIG_11
0012A3r 2  A5 A4                lda     Z52
0012A5r 2  48                   pha
0012A6r 2  98                   tya
0012A7r 2  48                   pha
0012A8r 2               .endif
0012A8r 2  A0 00                ldy     #$00
0012AAr 2  8A                   txa
0012ABr 2               .ifndef CONFIG_2
0012ABr 2  F0 1D                beq     GOIQ
0012ADr 2               .endif
0012ADr 2               .ifndef CONFIG_11
0012ADr 2                       inc     JMPADRS+1
0012ADr 2                       jmp     (JMPADRS+1)
0012ADr 2               .else
0012ADr 2  60                   rts
0012AEr 2               .endif
0012AEr 2               
0012AEr 2               ; ----------------------------------------------------------------------------
0012AEr 2               ; "LEN" FUNCTION
0012AEr 2               ; ----------------------------------------------------------------------------
0012AEr 2               LEN:
0012AEr 2  20 rr rr             jsr     GETSTR
0012B1r 2               SNGFLT1:
0012B1r 2  4C rr rr             jmp     SNGFLT
0012B4r 2               
0012B4r 2               ; ----------------------------------------------------------------------------
0012B4r 2               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
0012B4r 2               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
0012B4r 2               ; ----------------------------------------------------------------------------
0012B4r 2               GETSTR:
0012B4r 2  20 rr rr             jsr     FRESTR
0012B7r 2  A2 00                ldx     #$00
0012B9r 2  86 5F                stx     VALTYP
0012BBr 2  A8                   tay
0012BCr 2  60                   rts
0012BDr 2               
0012BDr 2               ; ----------------------------------------------------------------------------
0012BDr 2               ; "ASC" FUNCTION
0012BDr 2               ; ----------------------------------------------------------------------------
0012BDr 2               ASC:
0012BDr 2  20 rr rr             jsr     GETSTR
0012C0r 2  F0 08                beq     GOIQ
0012C2r 2  A0 00                ldy     #$00
0012C4r 2  B1 71                lda     (INDEX),y
0012C6r 2  A8                   tay
0012C7r 2               .ifndef CONFIG_11A
0012C7r 2                       jmp     SNGFLT1
0012C7r 2               .else
0012C7r 2  4C rr rr             jmp     SNGFLT
0012CAr 2               .endif
0012CAr 2               ; ----------------------------------------------------------------------------
0012CAr 2               GOIQ:
0012CAr 2  4C rr rr             jmp     IQERR
0012CDr 2               
0012CDr 2               ; ----------------------------------------------------------------------------
0012CDr 2               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
0012CDr 2               ; TO SINGLE BYTE IN X-REG
0012CDr 2               ; ----------------------------------------------------------------------------
0012CDr 2               GTBYTC:
0012CDr 2  20 C2 00             jsr     CHRGET
0012D0r 2               
0012D0r 2               ; ----------------------------------------------------------------------------
0012D0r 2               ; EVALUATE EXPRESSION AT TXTPTR, AND
0012D0r 2               ; CONVERT IT TO SINGLE BYTE IN X-REG
0012D0r 2               ; ----------------------------------------------------------------------------
0012D0r 2               GETBYT:
0012D0r 2  20 rr rr             jsr     FRMNUM
0012D3r 2               
0012D3r 2               ; ----------------------------------------------------------------------------
0012D3r 2               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
0012D3r 2               ; ----------------------------------------------------------------------------
0012D3r 2               CONINT:
0012D3r 2  20 rr rr             jsr     MKINT
0012D6r 2  A6 B3                ldx     FAC_LAST-1
0012D8r 2  D0 F0                bne     GOIQ
0012DAr 2  A6 B4                ldx     FAC_LAST
0012DCr 2  4C C8 00             jmp     CHRGOT
0012DFr 2               
0012DFr 2               ; ----------------------------------------------------------------------------
0012DFr 2               ; "VAL" FUNCTION
0012DFr 2               ; ----------------------------------------------------------------------------
0012DFr 2               VAL:
0012DFr 2  20 rr rr             jsr     GETSTR
0012E2r 2  D0 03                bne     L35AC
0012E4r 2  4C rr rr             jmp     ZERO_FAC
0012E7r 2               L35AC:
0012E7r 2  A6 C9                ldx     TXTPTR
0012E9r 2  A4 CA                ldy     TXTPTR+1
0012EBr 2  86 C0                stx     STRNG2
0012EDr 2  84 C1                sty     STRNG2+1
0012EFr 2  A6 71                ldx     INDEX
0012F1r 2  86 C9                stx     TXTPTR
0012F3r 2  18                   clc
0012F4r 2  65 71                adc     INDEX
0012F6r 2  85 73                sta     DEST
0012F8r 2  A6 72                ldx     INDEX+1
0012FAr 2  86 CA                stx     TXTPTR+1
0012FCr 2  90 01                bcc     L35C4
0012FEr 2  E8                   inx
0012FFr 2               L35C4:
0012FFr 2  86 74                stx     DEST+1
001301r 2  A0 00                ldy     #$00
001303r 2  B1 73                lda     (DEST),y
001305r 2  48                   pha
001306r 2  A9 00                lda     #$00
001308r 2  91 73                sta     (DEST),y
00130Ar 2  20 C8 00             jsr     CHRGOT
00130Dr 2  20 rr rr             jsr     FIN
001310r 2  68                   pla
001311r 2  A0 00                ldy     #$00
001313r 2  91 73                sta     (DEST),y
001315r 2               
001315r 2               ; ----------------------------------------------------------------------------
001315r 2               ; COPY STRNG2 INTO TXTPTR
001315r 2               ; ----------------------------------------------------------------------------
001315r 2               POINT:
001315r 2  A6 C0                ldx     STRNG2
001317r 2  A4 C1                ldy     STRNG2+1
001319r 2  86 C9                stx     TXTPTR
00131Br 2  84 CA                sty     TXTPTR+1
00131Dr 2  60                   rts
00131Er 2               
00131Er 2               
00131Er 1               .include "misc3.s"
00131Er 2               ; KBD specific patches
00131Er 2               
00131Er 2               .segment "CODE"
00131Er 2               
00131Er 2               .ifdef KBD
00131Er 2               VARTAB_MINUS_2_TO_AY:
00131Er 2                       lda     VARTAB
00131Er 2                       sec
00131Er 2                       sbc     #$02
00131Er 2                       ldy     VARTAB+1
00131Er 2                       bcs     LF42C
00131Er 2                       dey
00131Er 2               LF42C:
00131Er 2                       rts
00131Er 2               
00131Er 2               ; ----------------------------------------------------------------------------
00131Er 2               GET_UPPER:
00131Er 2                       lda     INPUTBUFFERX,x
00131Er 2               LF430:
00131Er 2                       cmp     #'a'
00131Er 2                       bcc     LF43A
00131Er 2                       cmp     #'z'+1
00131Er 2                       bcs     LF43A
00131Er 2               LF438:
00131Er 2                       sbc     #$1F
00131Er 2               LF43A:
00131Er 2                       rts
00131Er 2               
00131Er 2               ; ----------------------------------------------------------------------------
00131Er 2               GETLN:
00131Er 2                       ldx     #$5D
00131Er 2               LF43D:
00131Er 2                       txa
00131Er 2                       and     #$7F
00131Er 2                       cmp     $0340
00131Er 2                       beq     LF44D
00131Er 2                       sta     $0340
00131Er 2                       lda     #$03
00131Er 2                       jsr     LDE48
00131Er 2               LF44D:
00131Er 2                       jsr     LDE7F
00131Er 2                       bne     RTS4
00131Er 2                       cpx     #$80
00131Er 2                       bcc     LF44D
00131Er 2               RTS4:
00131Er 2                       rts
00131Er 2               
00131Er 2               ; ----------------------------------------------------------------------------
00131Er 2               LF457:
00131Er 2                       lda     TXTTAB
00131Er 2                       ldx     TXTTAB+1
00131Er 2               LF45B:
00131Er 2                       sta     JMPADRS+1
00131Er 2                       stx     JMPADRS+2
00131Er 2                       ldy     #$01
00131Er 2                       lda     (JMPADRS+1),y
00131Er 2                       beq     LF438
00131Er 2                       iny
00131Er 2                       iny
00131Er 2                       lda     (JMPADRS+1),y
00131Er 2                       dey
00131Er 2                       cmp     LINNUM+1
00131Er 2                       bne     LF472
00131Er 2                       lda     (JMPADRS+1),y
00131Er 2                       cmp     LINNUM
00131Er 2               LF472:
00131Er 2                       bcs     LF43A
00131Er 2                       dey
00131Er 2                       lda     (JMPADRS+1),y
00131Er 2                       tax
00131Er 2                       dey
00131Er 2                       lda     (JMPADRS+1),y
00131Er 2                       bcc     LF45B
00131Er 2               LF47D:
00131Er 2                       jmp     (JMPADRS+1)
00131Er 2               .endif
00131Er 2               
00131Er 1               .include "poke.s"
00131Er 2               .segment "CODE"
00131Er 2               
00131Er 2               .ifndef CONFIG_NO_POKE
00131Er 2               ; ----------------------------------------------------------------------------
00131Er 2               ; EVALUATE "EXP1,EXP2"
00131Er 2               ;
00131Er 2               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
00131Er 2               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
00131Er 2               ; ----------------------------------------------------------------------------
00131Er 2               GTNUM:
00131Er 2  20 rr rr             jsr     FRMNUM
001321r 2  20 rr rr             jsr     GETADR
001324r 2               
001324r 2               ; ----------------------------------------------------------------------------
001324r 2               ; EVALUATE ",EXPRESSION"
001324r 2               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
001324r 2               ; ----------------------------------------------------------------------------
001324r 2               COMBYTE:
001324r 2  20 rr rr             jsr     CHKCOM
001327r 2  4C rr rr             jmp     GETBYT
00132Ar 2               
00132Ar 2               ; ----------------------------------------------------------------------------
00132Ar 2               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
00132Ar 2               ; ----------------------------------------------------------------------------
00132Ar 2               GETADR:
00132Ar 2  A5 B5                lda     FACSIGN
00132Cr 2                 .ifdef APPLE
00132Cr 2                       nop ; PATCH
00132Cr 2                       nop
00132Cr 2                 .else
00132Cr 2  30 9C                bmi     GOIQ
00132Er 2                 .endif
00132Er 2  A5 B0                lda     FAC
001330r 2  C9 91                cmp     #$91
001332r 2  B0 96                bcs     GOIQ
001334r 2  20 rr rr             jsr     QINT
001337r 2  A5 B3                lda     FAC_LAST-1
001339r 2  A4 B4                ldy     FAC_LAST
00133Br 2  84 11                sty     LINNUM
00133Dr 2  85 12                sta     LINNUM+1
00133Fr 2  60                   rts
001340r 2               
001340r 2               ; ----------------------------------------------------------------------------
001340r 2               ; "PEEK" FUNCTION
001340r 2               ; ----------------------------------------------------------------------------
001340r 2               PEEK:
001340r 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
001340r 2                       lda     LINNUM+1
001340r 2                       pha
001340r 2                       lda     LINNUM
001340r 2                       pha
001340r 2               .endif
001340r 2  20 rr rr             jsr     GETADR
001343r 2  A0 00                ldy     #$00
001345r 2               .ifdef CBM1
001345r 2               ; disallow PEEK between $C000 and $DFFF
001345r 2                       cmp     #$C0
001345r 2                       bcc     LD6F3
001345r 2                       cmp     #$E1
001345r 2                       bcc     LD6F6
001345r 2               LD6F3:
001345r 2               .endif
001345r 2               .ifdef CBM2
001345r 2               		nop ; patch that disables the compares above
001345r 2               		nop
001345r 2               		nop
001345r 2               		nop
001345r 2               		nop
001345r 2               		nop
001345r 2               		nop
001345r 2               		nop
001345r 2               .endif
001345r 2  B1 11                lda     (LINNUM),y
001347r 2  A8                   tay
001348r 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
001348r 2                       pla
001348r 2                       sta     LINNUM
001348r 2                       pla
001348r 2                       sta     LINNUM+1
001348r 2               .endif
001348r 2               LD6F6:
001348r 2  4C rr rr             jmp     SNGFLT
00134Br 2               
00134Br 2               ; ----------------------------------------------------------------------------
00134Br 2               ; "POKE" STATEMENT
00134Br 2               ; ----------------------------------------------------------------------------
00134Br 2               POKE:
00134Br 2  20 rr rr             jsr     GTNUM
00134Er 2  8A                   txa
00134Fr 2  A0 00                ldy     #$00
001351r 2  91 11                sta     (LINNUM),y
001353r 2  60                   rts
001354r 2               
001354r 2               ; ----------------------------------------------------------------------------
001354r 2               ; "WAIT" STATEMENT
001354r 2               ; ----------------------------------------------------------------------------
001354r 2               WAIT:
001354r 2  20 rr rr             jsr     GTNUM
001357r 2  86 98                stx     FORPNT
001359r 2  A2 00                ldx     #$00
00135Br 2  20 C8 00             jsr     CHRGOT
00135Er 2               .ifdef CONFIG_EASTER_EGG
00135Er 2                       beq     EASTER_EGG
00135Er 2               .else
00135Er 2  F0 03                beq     L3628
001360r 2               .endif
001360r 2  20 rr rr             jsr     COMBYTE
001363r 2               L3628:
001363r 2  86 99                stx     FORPNT+1
001365r 2  A0 00                ldy     #$00
001367r 2               L362C:
001367r 2  B1 11                lda     (LINNUM),y
001369r 2  45 99                eor     FORPNT+1
00136Br 2  25 98                and     FORPNT
00136Dr 2  F0 F8                beq     L362C
00136Fr 2               RTS3:
00136Fr 2  60                   rts
001370r 2               .endif
001370r 2               
001370r 1               .include "float.s"
001370r 2               .segment "CODE"
001370r 2               
001370r 2               TEMP1X = TEMP1+(5-BYTES_FP)
001370r 2               
001370r 2               ; ----------------------------------------------------------------------------
001370r 2               ; ADD 0.5 TO FAC
001370r 2               ; ----------------------------------------------------------------------------
001370r 2               FADDH:
001370r 2  A9 rr                lda     #<CON_HALF
001372r 2  A0 rr                ldy     #>CON_HALF
001374r 2  4C rr rr             jmp     FADD
001377r 2               
001377r 2               ; ----------------------------------------------------------------------------
001377r 2               ; FAC = (Y,A) - FAC
001377r 2               ; ----------------------------------------------------------------------------
001377r 2               FSUB:
001377r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
00137Ar 2               
00137Ar 2               ; ----------------------------------------------------------------------------
00137Ar 2               ; FAC = ARG - FAC
00137Ar 2               ; ----------------------------------------------------------------------------
00137Ar 2               FSUBT:
00137Ar 2  A5 B5                lda     FACSIGN
00137Cr 2  49 FF                eor     #$FF
00137Er 2  85 B5                sta     FACSIGN
001380r 2  45 BD                eor     ARGSIGN
001382r 2  85 BE                sta     SGNCPR
001384r 2  A5 B0                lda     FAC
001386r 2  4C rr rr             jmp     FADDT
001389r 2               
001389r 2               ; ----------------------------------------------------------------------------
001389r 2               ; Commodore BASIC V2 Easter Egg
001389r 2               ; ----------------------------------------------------------------------------
001389r 2               .ifdef CONFIG_EASTER_EGG
001389r 2               EASTER_EGG:
001389r 2                       lda     LINNUM
001389r 2                       cmp     #<6502
001389r 2                       bne     L3628
001389r 2                       lda     LINNUM+1
001389r 2                       sbc     #>6502
001389r 2                       bne     L3628
001389r 2                       sta     LINNUM
001389r 2                       tay
001389r 2                       lda     #$80
001389r 2                       sta     LINNUM+1
001389r 2               LD758:
001389r 2                       ldx     #$0A
001389r 2               LD75A:
001389r 2                       lda     MICROSOFT-1,x
001389r 2                       and     #$3F
001389r 2                       sta     (LINNUM),y
001389r 2                       iny
001389r 2                       bne     LD766
001389r 2                       inc     LINNUM+1
001389r 2               LD766:
001389r 2                       dex
001389r 2                       bne     LD75A
001389r 2                       dec     FORPNT
001389r 2                       bne     LD758
001389r 2                       rts
001389r 2               .endif
001389r 2               
001389r 2               ; ----------------------------------------------------------------------------
001389r 2               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
001389r 2               ; ----------------------------------------------------------------------------
001389r 2               FADD1:
001389r 2  20 rr rr             jsr     SHIFT_RIGHT
00138Cr 2  90 3C                bcc     FADD3
00138Er 2               
00138Er 2               ; ----------------------------------------------------------------------------
00138Er 2               ; FAC = (Y,A) + FAC
00138Er 2               ; ----------------------------------------------------------------------------
00138Er 2               FADD:
00138Er 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001391r 2               
001391r 2               ; ----------------------------------------------------------------------------
001391r 2               ; FAC = ARG + FAC
001391r 2               ; ----------------------------------------------------------------------------
001391r 2               FADDT:
001391r 2  D0 03                bne     L365B
001393r 2  4C rr rr             jmp     COPY_ARG_TO_FAC
001396r 2               L365B:
001396r 2  A6 BF                ldx     FACEXTENSION
001398r 2  86 A5                stx     ARGEXTENSION
00139Ar 2  A2 B8                ldx     #ARG
00139Cr 2  A5 B8                lda     ARG
00139Er 2               FADD2:
00139Er 2  A8                   tay
00139Fr 2               .ifdef KBD
00139Fr 2                       beq     RTS4
00139Fr 2               .else
00139Fr 2  F0 CE                beq     RTS3
0013A1r 2               .endif
0013A1r 2  38                   sec
0013A2r 2  E5 B0                sbc     FAC
0013A4r 2  F0 24                beq     FADD3
0013A6r 2  90 12                bcc     L367F
0013A8r 2  84 B0                sty     FAC
0013AAr 2  A4 BD                ldy     ARGSIGN
0013ACr 2  84 B5                sty     FACSIGN
0013AEr 2  49 FF                eor     #$FF
0013B0r 2  69 00                adc     #$00
0013B2r 2  A0 00                ldy     #$00
0013B4r 2  84 A5                sty     ARGEXTENSION
0013B6r 2  A2 B0                ldx     #FAC
0013B8r 2  D0 04                bne     L3683
0013BAr 2               L367F:
0013BAr 2  A0 00                ldy     #$00
0013BCr 2  84 BF                sty     FACEXTENSION
0013BEr 2               L3683:
0013BEr 2  C9 F9                cmp     #$F9
0013C0r 2  30 C7                bmi     FADD1
0013C2r 2  A8                   tay
0013C3r 2  A5 BF                lda     FACEXTENSION
0013C5r 2  56 01                lsr     1,x
0013C7r 2  20 rr rr             jsr     SHIFT_RIGHT4
0013CAr 2               FADD3:
0013CAr 2  24 BE                bit     SGNCPR
0013CCr 2  10 57                bpl     FADD4
0013CEr 2  A0 B0                ldy     #FAC
0013D0r 2  E0 B8                cpx     #ARG
0013D2r 2  F0 02                beq     L369B
0013D4r 2  A0 B8                ldy     #ARG
0013D6r 2               L369B:
0013D6r 2  38                   sec
0013D7r 2  49 FF                eor     #$FF
0013D9r 2  65 A5                adc     ARGEXTENSION
0013DBr 2  85 BF                sta     FACEXTENSION
0013DDr 2               .ifndef CONFIG_SMALL
0013DDr 2  B9 04 00             lda     4,y
0013E0r 2  F5 04                sbc     4,x
0013E2r 2  85 B4                sta     FAC+4
0013E4r 2               .endif
0013E4r 2  B9 03 00             lda     3,y
0013E7r 2  F5 03                sbc     3,x
0013E9r 2  85 B3                sta     FAC+3
0013EBr 2  B9 02 00             lda     2,y
0013EEr 2  F5 02                sbc     2,x
0013F0r 2  85 B2                sta     FAC+2
0013F2r 2  B9 01 00             lda     1,y
0013F5r 2  F5 01                sbc     1,x
0013F7r 2  85 B1                sta     FAC+1
0013F9r 2               
0013F9r 2               ; ----------------------------------------------------------------------------
0013F9r 2               ; NORMALIZE VALUE IN FAC
0013F9r 2               ; ----------------------------------------------------------------------------
0013F9r 2               NORMALIZE_FAC1:
0013F9r 2  B0 03                bcs     NORMALIZE_FAC2
0013FBr 2  20 rr rr             jsr     COMPLEMENT_FAC
0013FEr 2               NORMALIZE_FAC2:
0013FEr 2  A0 00                ldy     #$00
001400r 2  98                   tya
001401r 2  18                   clc
001402r 2               L36C7:
001402r 2  A6 B1                ldx     FAC+1
001404r 2  D0 4A                bne     NORMALIZE_FAC4
001406r 2  A6 B2                ldx     FAC+2
001408r 2  86 B1                stx     FAC+1
00140Ar 2  A6 B3                ldx     FAC+3
00140Cr 2  86 B2                stx     FAC+2
00140Er 2               .ifdef CONFIG_SMALL
00140Er 2                       ldx     FACEXTENSION
00140Er 2                       stx     FAC+3
00140Er 2               .else
00140Er 2  A6 B4                ldx     FAC+4
001410r 2  86 B3                stx     FAC+3
001412r 2  A6 BF                ldx     FACEXTENSION
001414r 2  86 B4                stx     FAC+4
001416r 2               .endif
001416r 2  84 BF                sty     FACEXTENSION
001418r 2  69 08                adc     #$08
00141Ar 2               .ifdef CONFIG_2B
00141Ar 2               ; bugfix?
00141Ar 2               ; fix does not exist on AppleSoft 2
00141Ar 2                       cmp     #(MANTISSA_BYTES+1)*8
00141Ar 2               .else
00141Ar 2  C9 20                cmp     #MANTISSA_BYTES*8
00141Cr 2               .endif
00141Cr 2  D0 E4                bne     L36C7
00141Er 2               
00141Er 2               ; ----------------------------------------------------------------------------
00141Er 2               ; SET FAC = 0
00141Er 2               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
00141Er 2               ; ----------------------------------------------------------------------------
00141Er 2               ZERO_FAC:
00141Er 2  A9 00                lda     #$00
001420r 2               STA_IN_FAC_SIGN_AND_EXP:
001420r 2  85 B0                sta     FAC
001422r 2               STA_IN_FAC_SIGN:
001422r 2  85 B5                sta     FACSIGN
001424r 2  60                   rts
001425r 2               
001425r 2               ; ----------------------------------------------------------------------------
001425r 2               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
001425r 2               ; ----------------------------------------------------------------------------
001425r 2               FADD4:
001425r 2  65 A5                adc     ARGEXTENSION
001427r 2  85 BF                sta     FACEXTENSION
001429r 2               .ifndef CONFIG_SMALL
001429r 2  A5 B4                lda     FAC+4
00142Br 2  65 BC                adc     ARG+4
00142Dr 2  85 B4                sta     FAC+4
00142Fr 2               .endif
00142Fr 2  A5 B3                lda     FAC+3
001431r 2  65 BB                adc     ARG+3
001433r 2  85 B3                sta     FAC+3
001435r 2  A5 B2                lda     FAC+2
001437r 2  65 BA                adc     ARG+2
001439r 2  85 B2                sta     FAC+2
00143Br 2  A5 B1                lda     FAC+1
00143Dr 2  65 B9                adc     ARG+1
00143Fr 2  85 B1                sta     FAC+1
001441r 2  4C rr rr             jmp     NORMALIZE_FAC5
001444r 2               
001444r 2               ; ----------------------------------------------------------------------------
001444r 2               ; FINISH NORMALIZING FAC
001444r 2               ; ----------------------------------------------------------------------------
001444r 2               NORMALIZE_FAC3:
001444r 2  69 01                adc     #$01
001446r 2  06 BF                asl     FACEXTENSION
001448r 2               .ifndef CONFIG_SMALL
001448r 2  26 B4                rol     FAC+4
00144Ar 2               .endif
00144Ar 2  26 B3                rol     FAC+3
00144Cr 2  26 B2                rol     FAC+2
00144Er 2  26 B1                rol     FAC+1
001450r 2               NORMALIZE_FAC4:
001450r 2  10 F2                bpl     NORMALIZE_FAC3
001452r 2  38                   sec
001453r 2  E5 B0                sbc     FAC
001455r 2  B0 C7                bcs     ZERO_FAC
001457r 2  49 FF                eor     #$FF
001459r 2  69 01                adc     #$01
00145Br 2  85 B0                sta     FAC
00145Dr 2               NORMALIZE_FAC5:
00145Dr 2  90 0E                bcc     L3764
00145Fr 2               NORMALIZE_FAC6:
00145Fr 2  E6 B0                inc     FAC
001461r 2  F0 42                beq     OVERFLOW
001463r 2               .ifndef CONFIG_ROR_WORKAROUND
001463r 2  66 B1                ror     FAC+1
001465r 2  66 B2                ror     FAC+2
001467r 2  66 B3                ror     FAC+3
001469r 2                 .ifndef CONFIG_SMALL
001469r 2  66 B4                ror     FAC+4
00146Br 2                 .endif
00146Br 2  66 BF                ror     FACEXTENSION
00146Dr 2               .else
00146Dr 2                       lda     #$00
00146Dr 2                       bcc     L372E
00146Dr 2                       lda     #$80
00146Dr 2               L372E:
00146Dr 2                       lsr     FAC+1
00146Dr 2                       ora     FAC+1
00146Dr 2                       sta     FAC+1
00146Dr 2                       lda     #$00
00146Dr 2                       bcc     L373A
00146Dr 2                       lda     #$80
00146Dr 2               L373A:
00146Dr 2                       lsr     FAC+2
00146Dr 2                       ora     FAC+2
00146Dr 2                       sta     FAC+2
00146Dr 2                       lda     #$00
00146Dr 2                       bcc     L3746
00146Dr 2                       lda     #$80
00146Dr 2               L3746:
00146Dr 2                       lsr     FAC+3
00146Dr 2                       ora     FAC+3
00146Dr 2                       sta     FAC+3
00146Dr 2                       lda     #$00
00146Dr 2                       bcc     L3752
00146Dr 2                       lda     #$80
00146Dr 2               L3752:
00146Dr 2                       lsr     FAC+4
00146Dr 2                       ora     FAC+4
00146Dr 2                       sta     FAC+4
00146Dr 2                       lda     #$00
00146Dr 2                       bcc     L375E
00146Dr 2                       lda     #$80
00146Dr 2               L375E:
00146Dr 2                       lsr     FACEXTENSION
00146Dr 2                       ora     FACEXTENSION
00146Dr 2                       sta     FACEXTENSION
00146Dr 2               .endif
00146Dr 2               L3764:
00146Dr 2  60                   rts
00146Er 2               
00146Er 2               ; ----------------------------------------------------------------------------
00146Er 2               ; 2'S COMPLEMENT OF FAC
00146Er 2               ; ----------------------------------------------------------------------------
00146Er 2               COMPLEMENT_FAC:
00146Er 2  A5 B5                lda     FACSIGN
001470r 2  49 FF                eor     #$FF
001472r 2  85 B5                sta     FACSIGN
001474r 2               
001474r 2               ; ----------------------------------------------------------------------------
001474r 2               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
001474r 2               ; ----------------------------------------------------------------------------
001474r 2               COMPLEMENT_FAC_MANTISSA:
001474r 2  A5 B1                lda     FAC+1
001476r 2  49 FF                eor     #$FF
001478r 2  85 B1                sta     FAC+1
00147Ar 2  A5 B2                lda     FAC+2
00147Cr 2  49 FF                eor     #$FF
00147Er 2  85 B2                sta     FAC+2
001480r 2  A5 B3                lda     FAC+3
001482r 2  49 FF                eor     #$FF
001484r 2  85 B3                sta     FAC+3
001486r 2               .ifndef CONFIG_SMALL
001486r 2  A5 B4                lda     FAC+4
001488r 2  49 FF                eor     #$FF
00148Ar 2  85 B4                sta     FAC+4
00148Cr 2               .endif
00148Cr 2  A5 BF                lda     FACEXTENSION
00148Er 2  49 FF                eor     #$FF
001490r 2  85 BF                sta     FACEXTENSION
001492r 2  E6 BF                inc     FACEXTENSION
001494r 2  D0 0E                bne     RTS12
001496r 2               
001496r 2               ; ----------------------------------------------------------------------------
001496r 2               ; INCREMENT FAC MANTISSA
001496r 2               ; ----------------------------------------------------------------------------
001496r 2               INCREMENT_FAC_MANTISSA:
001496r 2               .ifndef CONFIG_SMALL
001496r 2  E6 B4                inc     FAC+4
001498r 2  D0 0A                bne     RTS12
00149Ar 2               .endif
00149Ar 2  E6 B3                inc     FAC+3
00149Cr 2  D0 06                bne     RTS12
00149Er 2  E6 B2                inc     FAC+2
0014A0r 2  D0 02                bne     RTS12
0014A2r 2  E6 B1                inc     FAC+1
0014A4r 2               RTS12:
0014A4r 2  60                   rts
0014A5r 2               OVERFLOW:
0014A5r 2  A2 45                ldx     #ERR_OVERFLOW
0014A7r 2  4C rr rr             jmp     ERROR
0014AAr 2               
0014AAr 2               ; ----------------------------------------------------------------------------
0014AAr 2               ; SHIFT 1,X THRU 5,X RIGHT
0014AAr 2               ; (A) = NEGATIVE OF SHIFT COUNT
0014AAr 2               ; (X) = POINTER TO BYTES TO BE SHIFTED
0014AAr 2               ;
0014AAr 2               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
0014AAr 2               ; ----------------------------------------------------------------------------
0014AAr 2               SHIFT_RIGHT1:
0014AAr 2  A2 74                ldx     #RESULT-1
0014ACr 2               SHIFT_RIGHT2:
0014ACr 2               .ifdef CONFIG_SMALL
0014ACr 2                       ldy     3,x
0014ACr 2               .else
0014ACr 2  B4 04                ldy     4,x
0014AEr 2               .endif
0014AEr 2  84 BF                sty     FACEXTENSION
0014B0r 2               .ifndef CONFIG_SMALL
0014B0r 2  B4 03                ldy     3,x
0014B2r 2  94 04                sty     4,x
0014B4r 2               .endif
0014B4r 2  B4 02                ldy     2,x
0014B6r 2  94 03                sty     3,x
0014B8r 2  B4 01                ldy     1,x
0014BAr 2  94 02                sty     2,x
0014BCr 2  A4 B7                ldy     SHIFTSIGNEXT
0014BEr 2  94 01                sty     1,x
0014C0r 2               
0014C0r 2               ; ----------------------------------------------------------------------------
0014C0r 2               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
0014C0r 2               ; ----------------------------------------------------------------------------
0014C0r 2               SHIFT_RIGHT:
0014C0r 2  69 08                adc     #$08
0014C2r 2  30 E8                bmi     SHIFT_RIGHT2
0014C4r 2  F0 E6                beq     SHIFT_RIGHT2
0014C6r 2  E9 08                sbc     #$08
0014C8r 2  A8                   tay
0014C9r 2  A5 BF                lda     FACEXTENSION
0014CBr 2  B0 14                bcs     SHIFT_RIGHT5
0014CDr 2               .ifndef CONFIG_ROR_WORKAROUND
0014CDr 2               LB588:
0014CDr 2  16 01                asl     1,x
0014CFr 2  90 02                bcc     LB58E
0014D1r 2  F6 01                inc     1,x
0014D3r 2               LB58E:
0014D3r 2  76 01                ror     1,x
0014D5r 2  76 01                ror     1,x
0014D7r 2               
0014D7r 2               ; ----------------------------------------------------------------------------
0014D7r 2               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
0014D7r 2               ; ----------------------------------------------------------------------------
0014D7r 2               SHIFT_RIGHT4:
0014D7r 2  76 02                ror     2,x
0014D9r 2  76 03                ror     3,x
0014DBr 2                 .ifndef CONFIG_SMALL
0014DBr 2  76 04                ror     4,x
0014DDr 2                 .endif
0014DDr 2  6A                   ror     a
0014DEr 2  C8                   iny
0014DFr 2  D0 EC                bne     LB588
0014E1r 2               .else
0014E1r 2               L37C4:
0014E1r 2                       pha
0014E1r 2                       lda     1,x
0014E1r 2                       and     #$80
0014E1r 2                       lsr     1,x
0014E1r 2                       ora     1,x
0014E1r 2                       sta     1,x
0014E1r 2                       .byte   $24
0014E1r 2               SHIFT_RIGHT4:
0014E1r 2                       pha
0014E1r 2                       lda     #$00
0014E1r 2                       bcc     L37D7
0014E1r 2                       lda     #$80
0014E1r 2               L37D7:
0014E1r 2                       lsr     2,x
0014E1r 2                       ora     2,x
0014E1r 2                       sta     2,x
0014E1r 2                       lda     #$00
0014E1r 2                       bcc     L37E3
0014E1r 2                       lda     #$80
0014E1r 2               L37E3:
0014E1r 2                       lsr     3,x
0014E1r 2                       ora     3,x
0014E1r 2                       sta     3,x
0014E1r 2                       lda     #$00
0014E1r 2                       bcc     L37EF
0014E1r 2                       lda     #$80
0014E1r 2               L37EF:
0014E1r 2                       lsr     4,x
0014E1r 2                       ora     4,x
0014E1r 2                       sta     4,x
0014E1r 2                       pla
0014E1r 2                       php
0014E1r 2                       lsr     a
0014E1r 2                       plp
0014E1r 2                       bcc     L37FD
0014E1r 2                       ora     #$80
0014E1r 2               L37FD:
0014E1r 2                       iny
0014E1r 2                       bne     L37C4
0014E1r 2               .endif
0014E1r 2               SHIFT_RIGHT5:
0014E1r 2  18                   clc
0014E2r 2  60                   rts
0014E3r 2               
0014E3r 2               ; ----------------------------------------------------------------------------
0014E3r 2               .ifdef CONFIG_SMALL
0014E3r 2               CON_ONE:
0014E3r 2                       .byte   $81,$00,$00,$00
0014E3r 2               POLY_LOG:
0014E3r 2               		.byte	$02
0014E3r 2               		.byte   $80,$19,$56,$62
0014E3r 2               		.byte   $80,$76,$22,$F3
0014E3r 2               		.byte   $82,$38,$AA,$40
0014E3r 2               CON_SQR_HALF:
0014E3r 2               		.byte   $80,$35,$04,$F3
0014E3r 2               CON_SQR_TWO:
0014E3r 2               		.byte   $81,$35,$04,$F3
0014E3r 2               CON_NEG_HALF:
0014E3r 2               		.byte   $80,$80,$00,$00
0014E3r 2               CON_LOG_TWO:
0014E3r 2               		.byte   $80,$31,$72,$18
0014E3r 2               .else
0014E3r 2               CON_ONE:
0014E3r 2  81 00 00 00          .byte   $81,$00,$00,$00,$00
0014E7r 2  00           
0014E8r 2               POLY_LOG:
0014E8r 2  03                   .byte   $03
0014E9r 2  7F 5E 56 CB  		.byte   $7F,$5E,$56,$CB,$79
0014EDr 2  79           
0014EEr 2  80 13 9B 0B  		.byte   $80,$13,$9B,$0B,$64
0014F2r 2  64           
0014F3r 2  80 76 38 93  		.byte   $80,$76,$38,$93,$16
0014F7r 2  16           
0014F8r 2  82 38 AA 3B          .byte   $82,$38,$AA,$3B,$20
0014FCr 2  20           
0014FDr 2               CON_SQR_HALF:
0014FDr 2  80 35 04 F3          .byte   $80,$35,$04,$F3,$34
001501r 2  34           
001502r 2               CON_SQR_TWO:
001502r 2  81 35 04 F3          .byte   $81,$35,$04,$F3,$34
001506r 2  34           
001507r 2               CON_NEG_HALF:
001507r 2  80 80 00 00          .byte   $80,$80,$00,$00,$00
00150Br 2  00           
00150Cr 2               CON_LOG_TWO:
00150Cr 2  80 31 72 17          .byte   $80,$31,$72,$17,$F8
001510r 2  F8           
001511r 2               .endif
001511r 2               
001511r 2               ; ----------------------------------------------------------------------------
001511r 2               ; "LOG" FUNCTION
001511r 2               ; ----------------------------------------------------------------------------
001511r 2               LOG:
001511r 2  20 rr rr             jsr     SIGN
001514r 2  F0 02                beq     GIQ
001516r 2  10 03                bpl     LOG2
001518r 2               GIQ:
001518r 2  4C rr rr             jmp     IQERR
00151Br 2               LOG2:
00151Br 2  A5 B0                lda     FAC
00151Dr 2  E9 7F                sbc     #$7F
00151Fr 2  48                   pha
001520r 2  A9 80                lda     #$80
001522r 2  85 B0                sta     FAC
001524r 2  A9 rr                lda     #<CON_SQR_HALF
001526r 2  A0 rr                ldy     #>CON_SQR_HALF
001528r 2  20 rr rr             jsr     FADD
00152Br 2  A9 rr                lda     #<CON_SQR_TWO
00152Dr 2  A0 rr                ldy     #>CON_SQR_TWO
00152Fr 2  20 rr rr             jsr     FDIV
001532r 2  A9 rr                lda     #<CON_ONE
001534r 2  A0 rr                ldy     #>CON_ONE
001536r 2  20 rr rr             jsr     FSUB
001539r 2  A9 rr                lda     #<POLY_LOG
00153Br 2  A0 rr                ldy     #>POLY_LOG
00153Dr 2  20 rr rr             jsr     POLYNOMIAL_ODD
001540r 2  A9 rr                lda     #<CON_NEG_HALF
001542r 2  A0 rr                ldy     #>CON_NEG_HALF
001544r 2  20 rr rr             jsr     FADD
001547r 2  68                   pla
001548r 2  20 rr rr             jsr     ADDACC
00154Br 2  A9 rr                lda     #<CON_LOG_TWO
00154Dr 2  A0 rr                ldy     #>CON_LOG_TWO
00154Fr 2               
00154Fr 2               ; ----------------------------------------------------------------------------
00154Fr 2               ; FAC = (Y,A) * FAC
00154Fr 2               ; ----------------------------------------------------------------------------
00154Fr 2               FMULT:
00154Fr 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001552r 2               
001552r 2               ; ----------------------------------------------------------------------------
001552r 2               ; FAC = ARG * FAC
001552r 2               ; ----------------------------------------------------------------------------
001552r 2               FMULTT:
001552r 2               .ifndef CONFIG_11
001552r 2                       beq     L3903
001552r 2               .else
001552r 2  D0 03 4C rr          jeq     L3903
001556r 2  rr           
001557r 2               .endif
001557r 2  20 rr rr             jsr     ADD_EXPONENTS
00155Ar 2  A9 00                lda     #$00
00155Cr 2  85 75                sta     RESULT
00155Er 2  85 76                sta     RESULT+1
001560r 2  85 77                sta     RESULT+2
001562r 2               .ifndef CONFIG_SMALL
001562r 2  85 78                sta     RESULT+3
001564r 2               .endif
001564r 2  A5 BF                lda     FACEXTENSION
001566r 2  20 rr rr             jsr     MULTIPLY1
001569r 2               .ifndef CONFIG_SMALL
001569r 2  A5 B4                lda     FAC+4
00156Br 2  20 rr rr             jsr     MULTIPLY1
00156Er 2               .endif
00156Er 2  A5 B3                lda     FAC+3
001570r 2  20 rr rr             jsr     MULTIPLY1
001573r 2  A5 B2                lda     FAC+2
001575r 2  20 rr rr             jsr     MULTIPLY1
001578r 2  A5 B1                lda     FAC+1
00157Ar 2  20 rr rr             jsr     MULTIPLY2
00157Dr 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
001580r 2               
001580r 2               ; ----------------------------------------------------------------------------
001580r 2               ; MULTIPLY ARG BY (A) INTO RESULT
001580r 2               ; ----------------------------------------------------------------------------
001580r 2               MULTIPLY1:
001580r 2  D0 03                bne     MULTIPLY2
001582r 2  4C rr rr             jmp     SHIFT_RIGHT1
001585r 2               MULTIPLY2:
001585r 2  4A                   lsr     a
001586r 2  09 80                ora     #$80
001588r 2               L38A7:
001588r 2  A8                   tay
001589r 2  90 19                bcc     L38C3
00158Br 2  18                   clc
00158Cr 2               .ifndef CONFIG_SMALL
00158Cr 2  A5 78                lda     RESULT+3
00158Er 2  65 BC                adc     ARG+4
001590r 2  85 78                sta     RESULT+3
001592r 2               .endif
001592r 2  A5 77                lda     RESULT+2
001594r 2  65 BB                adc     ARG+3
001596r 2  85 77                sta     RESULT+2
001598r 2  A5 76                lda     RESULT+1
00159Ar 2  65 BA                adc     ARG+2
00159Cr 2  85 76                sta     RESULT+1
00159Er 2  A5 75                lda     RESULT
0015A0r 2  65 B9                adc     ARG+1
0015A2r 2  85 75                sta     RESULT
0015A4r 2               L38C3:
0015A4r 2               .ifndef CONFIG_ROR_WORKAROUND
0015A4r 2  66 75                ror     RESULT
0015A6r 2  66 76                ror     RESULT+1
0015A8r 2               .ifdef APPLE_BAD_BYTE
0015A8r 2               ; this seems to be a bad byte in the dump
0015A8r 2               		.byte	RESULT+2,RESULT+2 ; XXX BUG!
0015A8r 2               .else
0015A8r 2  66 77                ror     RESULT+2
0015AAr 2               .endif
0015AAr 2               .ifndef CONFIG_SMALL
0015AAr 2  66 78                ror     RESULT+3
0015ACr 2               .endif
0015ACr 2  66 BF                ror     FACEXTENSION
0015AEr 2               .else
0015AEr 2                       lda     #$00
0015AEr 2                       bcc     L38C9
0015AEr 2                       lda     #$80
0015AEr 2               L38C9:
0015AEr 2                       lsr     RESULT
0015AEr 2                       ora     RESULT
0015AEr 2                       sta     RESULT
0015AEr 2                       lda     #$00
0015AEr 2                       bcc     L38D5
0015AEr 2                       lda     #$80
0015AEr 2               L38D5:
0015AEr 2                       lsr     RESULT+1
0015AEr 2                       ora     RESULT+1
0015AEr 2                       sta     RESULT+1
0015AEr 2                       lda     #$00
0015AEr 2                       bcc     L38E1
0015AEr 2                       lda     #$80
0015AEr 2               L38E1:
0015AEr 2                       lsr     RESULT+2
0015AEr 2                       ora     RESULT+2
0015AEr 2                       sta     RESULT+2
0015AEr 2                       lda     #$00
0015AEr 2                       bcc     L38ED
0015AEr 2                       lda     #$80
0015AEr 2               L38ED:
0015AEr 2                       lsr     RESULT+3
0015AEr 2                       ora     RESULT+3
0015AEr 2                       sta     RESULT+3
0015AEr 2                       lda     #$00
0015AEr 2                       bcc     L38F9
0015AEr 2                       lda     #$80
0015AEr 2               L38F9:
0015AEr 2                       lsr     FACEXTENSION
0015AEr 2                       ora     FACEXTENSION
0015AEr 2                       sta     FACEXTENSION
0015AEr 2               .endif
0015AEr 2  98                   tya
0015AFr 2  4A                   lsr     a
0015B0r 2  D0 D6                bne     L38A7
0015B2r 2               L3903:
0015B2r 2  60                   rts
0015B3r 2               
0015B3r 2               ; ----------------------------------------------------------------------------
0015B3r 2               ; UNPACK NUMBER AT (Y,A) INTO ARG
0015B3r 2               ; ----------------------------------------------------------------------------
0015B3r 2               LOAD_ARG_FROM_YA:
0015B3r 2  85 71                sta     INDEX
0015B5r 2  84 72                sty     INDEX+1
0015B7r 2  A0 04                ldy     #BYTES_FP-1
0015B9r 2               .ifndef CONFIG_SMALL
0015B9r 2  B1 71                lda     (INDEX),y
0015BBr 2  85 BC                sta     ARG+4
0015BDr 2  88                   dey
0015BEr 2               .endif
0015BEr 2  B1 71                lda     (INDEX),y
0015C0r 2  85 BB                sta     ARG+3
0015C2r 2  88                   dey
0015C3r 2  B1 71                lda     (INDEX),y
0015C5r 2  85 BA                sta     ARG+2
0015C7r 2  88                   dey
0015C8r 2  B1 71                lda     (INDEX),y
0015CAr 2  85 BD                sta     ARGSIGN
0015CCr 2  45 B5                eor     FACSIGN
0015CEr 2  85 BE                sta     SGNCPR
0015D0r 2  A5 BD                lda     ARGSIGN
0015D2r 2  09 80                ora     #$80
0015D4r 2  85 B9                sta     ARG+1
0015D6r 2  88                   dey
0015D7r 2  B1 71                lda     (INDEX),y
0015D9r 2  85 B8                sta     ARG
0015DBr 2  A5 B0                lda     FAC
0015DDr 2  60                   rts
0015DEr 2               
0015DEr 2               ; ----------------------------------------------------------------------------
0015DEr 2               ; ADD EXPONENTS OF ARG AND FAC
0015DEr 2               ; (CALLED BY FMULT AND FDIV)
0015DEr 2               ;
0015DEr 2               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
0015DEr 2               ; ----------------------------------------------------------------------------
0015DEr 2               ADD_EXPONENTS:
0015DEr 2  A5 B8                lda     ARG
0015E0r 2               ADD_EXPONENTS1:
0015E0r 2  F0 1F                beq     ZERO
0015E2r 2  18                   clc
0015E3r 2  65 B0                adc     FAC
0015E5r 2  90 04                bcc     L393C
0015E7r 2  30 1D                bmi     JOV
0015E9r 2  18                   clc
0015EAr 2  2C                   .byte   $2C
0015EBr 2               L393C:
0015EBr 2  10 14                bpl     ZERO
0015EDr 2  69 80                adc     #$80
0015EFr 2  85 B0                sta     FAC
0015F1r 2  D0 03                bne     L3947
0015F3r 2  4C rr rr             jmp     STA_IN_FAC_SIGN
0015F6r 2               L3947:
0015F6r 2  A5 BE                lda     SGNCPR
0015F8r 2  85 B5                sta     FACSIGN
0015FAr 2  60                   rts
0015FBr 2               
0015FBr 2               ; ----------------------------------------------------------------------------
0015FBr 2               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
0015FBr 2               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
0015FBr 2               ; CALLED FROM "EXP" FUNCTION
0015FBr 2               ; ----------------------------------------------------------------------------
0015FBr 2               OUTOFRNG:
0015FBr 2  A5 B5                lda     FACSIGN
0015FDr 2  49 FF                eor     #$FF
0015FFr 2  30 05                bmi     JOV
001601r 2               
001601r 2               ; ----------------------------------------------------------------------------
001601r 2               ; POP RETURN ADDRESS AND SET FAC=0
001601r 2               ; ----------------------------------------------------------------------------
001601r 2               ZERO:
001601r 2  68                   pla
001602r 2  68                   pla
001603r 2  4C rr rr             jmp     ZERO_FAC
001606r 2               JOV:
001606r 2  4C rr rr             jmp     OVERFLOW
001609r 2               
001609r 2               ; ----------------------------------------------------------------------------
001609r 2               ; MULTIPLY FAC BY 10
001609r 2               ; ----------------------------------------------------------------------------
001609r 2               MUL10:
001609r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
00160Cr 2  AA                   tax
00160Dr 2  F0 10                beq     L3970
00160Fr 2  18                   clc
001610r 2  69 02                adc     #$02
001612r 2  B0 F2                bcs     JOV
001614r 2               LD9BF:
001614r 2  A2 00                ldx     #$00
001616r 2  86 BE                stx     SGNCPR
001618r 2  20 rr rr             jsr     FADD2
00161Br 2  E6 B0                inc     FAC
00161Dr 2  F0 E7                beq     JOV
00161Fr 2               L3970:
00161Fr 2  60                   rts
001620r 2               
001620r 2               ; ----------------------------------------------------------------------------
001620r 2               CONTEN:
001620r 2               .ifdef CONFIG_SMALL
001620r 2                       .byte   $84,$20,$00,$00
001620r 2               .else
001620r 2  84 20 00 00          .byte   $84,$20,$00,$00,$00
001624r 2  00           
001625r 2               .endif
001625r 2               
001625r 2               ; ----------------------------------------------------------------------------
001625r 2               ; DIVIDE FAC BY 10
001625r 2               ; ----------------------------------------------------------------------------
001625r 2               DIV10:
001625r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001628r 2  A9 rr                lda     #<CONTEN
00162Ar 2  A0 rr                ldy     #>CONTEN
00162Cr 2  A2 00                ldx     #$00
00162Er 2               
00162Er 2               ; ----------------------------------------------------------------------------
00162Er 2               ; FAC = ARG / (Y,A)
00162Er 2               ; ----------------------------------------------------------------------------
00162Er 2               DIV:
00162Er 2  86 BE                stx     SGNCPR
001630r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001633r 2  4C rr rr             jmp     FDIVT
001636r 2               
001636r 2               ; ----------------------------------------------------------------------------
001636r 2               ; FAC = (Y,A) / FAC
001636r 2               ; ----------------------------------------------------------------------------
001636r 2               FDIV:
001636r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001639r 2               
001639r 2               ; ----------------------------------------------------------------------------
001639r 2               ; FAC = ARG / FAC
001639r 2               ; ----------------------------------------------------------------------------
001639r 2               FDIVT:
001639r 2  F0 76                beq     L3A02
00163Br 2  20 rr rr             jsr     ROUND_FAC
00163Er 2  A9 00                lda     #$00
001640r 2  38                   sec
001641r 2  E5 B0                sbc     FAC
001643r 2  85 B0                sta     FAC
001645r 2  20 rr rr             jsr     ADD_EXPONENTS
001648r 2  E6 B0                inc     FAC
00164Ar 2  F0 BA                beq     JOV
00164Cr 2  A2 FC                ldx     #<-MANTISSA_BYTES
00164Er 2  A9 01                lda     #$01
001650r 2               L39A1:
001650r 2  A4 B9                ldy     ARG+1
001652r 2  C4 B1                cpy     FAC+1
001654r 2  D0 10                bne     L39B7
001656r 2  A4 BA                ldy     ARG+2
001658r 2  C4 B2                cpy     FAC+2
00165Ar 2  D0 0A                bne     L39B7
00165Cr 2  A4 BB                ldy     ARG+3
00165Er 2  C4 B3                cpy     FAC+3
001660r 2               .ifndef CONFIG_SMALL
001660r 2  D0 04                bne     L39B7
001662r 2  A4 BC                ldy     ARG+4
001664r 2  C4 B4                cpy     FAC+4
001666r 2               .endif
001666r 2               L39B7:
001666r 2  08                   php
001667r 2  2A                   rol     a
001668r 2  90 09                bcc     L39C4
00166Ar 2  E8                   inx
00166Br 2  95 78                sta     RESULT_LAST-1,x
00166Dr 2  F0 32                beq     L39F2
00166Fr 2  10 34                bpl     L39F6
001671r 2  A9 01                lda     #$01
001673r 2               L39C4:
001673r 2  28                   plp
001674r 2  B0 0E                bcs     L39D5
001676r 2               L39C7:
001676r 2  06 BC                asl     ARG_LAST
001678r 2               .ifndef CONFIG_SMALL
001678r 2  26 BB                rol     ARG+3
00167Ar 2               .endif
00167Ar 2  26 BA                rol     ARG+2
00167Cr 2  26 B9                rol     ARG+1
00167Er 2  B0 E6                bcs     L39B7
001680r 2  30 CE                bmi     L39A1
001682r 2  10 E2                bpl     L39B7
001684r 2               L39D5:
001684r 2  A8                   tay
001685r 2               .ifndef CONFIG_SMALL
001685r 2  A5 BC                lda     ARG+4
001687r 2  E5 B4                sbc     FAC+4
001689r 2  85 BC                sta     ARG+4
00168Br 2               .endif
00168Br 2  A5 BB                lda     ARG+3
00168Dr 2  E5 B3                sbc     FAC+3
00168Fr 2  85 BB                sta     ARG+3
001691r 2  A5 BA                lda     ARG+2
001693r 2  E5 B2                sbc     FAC+2
001695r 2  85 BA                sta     ARG+2
001697r 2  A5 B9                lda     ARG+1
001699r 2  E5 B1                sbc     FAC+1
00169Br 2  85 B9                sta     ARG+1
00169Dr 2  98                   tya
00169Er 2  4C rr rr             jmp     L39C7
0016A1r 2               L39F2:
0016A1r 2  A9 40                lda     #$40
0016A3r 2  D0 CE                bne     L39C4
0016A5r 2               L39F6:
0016A5r 2  0A                   asl     a
0016A6r 2  0A                   asl     a
0016A7r 2  0A                   asl     a
0016A8r 2  0A                   asl     a
0016A9r 2  0A                   asl     a
0016AAr 2  0A                   asl     a
0016ABr 2  85 BF                sta     FACEXTENSION
0016ADr 2  28                   plp
0016AEr 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
0016B1r 2               L3A02:
0016B1r 2  A2 85                ldx     #ERR_ZERODIV
0016B3r 2  4C rr rr             jmp     ERROR
0016B6r 2               
0016B6r 2               ; ----------------------------------------------------------------------------
0016B6r 2               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
0016B6r 2               ; ----------------------------------------------------------------------------
0016B6r 2               COPY_RESULT_INTO_FAC:
0016B6r 2  A5 75                lda     RESULT
0016B8r 2  85 B1                sta     FAC+1
0016BAr 2  A5 76                lda     RESULT+1
0016BCr 2  85 B2                sta     FAC+2
0016BEr 2  A5 77                lda     RESULT+2
0016C0r 2  85 B3                sta     FAC+3
0016C2r 2               .ifndef CONFIG_SMALL
0016C2r 2  A5 78                lda     RESULT+3
0016C4r 2  85 B4                sta     FAC+4
0016C6r 2               .endif
0016C6r 2  4C rr rr             jmp     NORMALIZE_FAC2
0016C9r 2               
0016C9r 2               ; ----------------------------------------------------------------------------
0016C9r 2               ; UNPACK (Y,A) INTO FAC
0016C9r 2               ; ----------------------------------------------------------------------------
0016C9r 2               LOAD_FAC_FROM_YA:
0016C9r 2  85 71                sta     INDEX
0016CBr 2  84 72                sty     INDEX+1
0016CDr 2  A0 04                ldy     #MANTISSA_BYTES
0016CFr 2               .ifndef CONFIG_SMALL
0016CFr 2  B1 71                lda     (INDEX),y
0016D1r 2  85 B4                sta     FAC+4
0016D3r 2  88                   dey
0016D4r 2               .endif
0016D4r 2  B1 71                lda     (INDEX),y
0016D6r 2  85 B3                sta     FAC+3
0016D8r 2  88                   dey
0016D9r 2  B1 71                lda     (INDEX),y
0016DBr 2  85 B2                sta     FAC+2
0016DDr 2  88                   dey
0016DEr 2  B1 71                lda     (INDEX),y
0016E0r 2  85 B5                sta     FACSIGN
0016E2r 2  09 80                ora     #$80
0016E4r 2  85 B1                sta     FAC+1
0016E6r 2  88                   dey
0016E7r 2  B1 71                lda     (INDEX),y
0016E9r 2  85 B0                sta     FAC
0016EBr 2  84 BF                sty     FACEXTENSION
0016EDr 2  60                   rts
0016EEr 2               
0016EEr 2               ; ----------------------------------------------------------------------------
0016EEr 2               ; ROUND FAC, STORE IN TEMP2
0016EEr 2               ; ----------------------------------------------------------------------------
0016EEr 2               STORE_FAC_IN_TEMP2_ROUNDED:
0016EEr 2  A2 AB                ldx     #TEMP2
0016F0r 2  2C                   .byte   $2C
0016F1r 2               
0016F1r 2               ; ----------------------------------------------------------------------------
0016F1r 2               ; ROUND FAC, STORE IN TEMP1
0016F1r 2               ; ----------------------------------------------------------------------------
0016F1r 2               STORE_FAC_IN_TEMP1_ROUNDED:
0016F1r 2  A2 A6                ldx     #TEMP1X
0016F3r 2  A0 00                ldy     #$00
0016F5r 2  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
0016F7r 2               
0016F7r 2               ; ----------------------------------------------------------------------------
0016F7r 2               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
0016F7r 2               ; ----------------------------------------------------------------------------
0016F7r 2               SETFOR:
0016F7r 2  A6 98                ldx     FORPNT
0016F9r 2  A4 99                ldy     FORPNT+1
0016FBr 2               
0016FBr 2               ; ----------------------------------------------------------------------------
0016FBr 2               ; ROUND FAC, AND STORE AT (Y,X)
0016FBr 2               ; ----------------------------------------------------------------------------
0016FBr 2               STORE_FAC_AT_YX_ROUNDED:
0016FBr 2  20 rr rr             jsr     ROUND_FAC
0016FEr 2  86 71                stx     INDEX
001700r 2  84 72                sty     INDEX+1
001702r 2  A0 04                ldy     #MANTISSA_BYTES
001704r 2               .ifndef CONFIG_SMALL
001704r 2  A5 B4                lda     FAC+4
001706r 2  91 71                sta     (INDEX),y
001708r 2  88                   dey
001709r 2               .endif
001709r 2  A5 B3                lda     FAC+3
00170Br 2  91 71                sta     (INDEX),y
00170Dr 2  88                   dey
00170Er 2  A5 B2                lda     FAC+2
001710r 2  91 71                sta     (INDEX),y
001712r 2  88                   dey
001713r 2  A5 B5                lda     FACSIGN
001715r 2  09 7F                ora     #$7F
001717r 2  25 B1                and     FAC+1
001719r 2  91 71                sta     (INDEX),y
00171Br 2  88                   dey
00171Cr 2  A5 B0                lda     FAC
00171Er 2  91 71                sta     (INDEX),y
001720r 2  84 BF                sty     FACEXTENSION
001722r 2  60                   rts
001723r 2               
001723r 2               ; ----------------------------------------------------------------------------
001723r 2               ; COPY ARG INTO FAC
001723r 2               ; ----------------------------------------------------------------------------
001723r 2               COPY_ARG_TO_FAC:
001723r 2  A5 BD                lda     ARGSIGN
001725r 2               MFA:
001725r 2  85 B5                sta     FACSIGN
001727r 2  A2 05                ldx     #BYTES_FP
001729r 2               L3A7A:
001729r 2  B5 B7                lda     SHIFTSIGNEXT,x
00172Br 2  95 AF                sta     EXPSGN,x
00172Dr 2  CA                   dex
00172Er 2  D0 F9                bne     L3A7A
001730r 2  86 BF                stx     FACEXTENSION
001732r 2  60                   rts
001733r 2               
001733r 2               ; ----------------------------------------------------------------------------
001733r 2               ; ROUND FAC AND COPY TO ARG
001733r 2               ; ----------------------------------------------------------------------------
001733r 2               COPY_FAC_TO_ARG_ROUNDED:
001733r 2  20 rr rr             jsr     ROUND_FAC
001736r 2               MAF:
001736r 2  A2 06                ldx     #BYTES_FP+1
001738r 2               L3A89:
001738r 2  B5 AF                lda     EXPSGN,x
00173Ar 2  95 B7                sta     SHIFTSIGNEXT,x
00173Cr 2  CA                   dex
00173Dr 2  D0 F9                bne     L3A89
00173Fr 2  86 BF                stx     FACEXTENSION
001741r 2               RTS14:
001741r 2  60                   rts
001742r 2               
001742r 2               ; ----------------------------------------------------------------------------
001742r 2               ; ROUND FAC USING EXTENSION BYTE
001742r 2               ; ----------------------------------------------------------------------------
001742r 2               ROUND_FAC:
001742r 2  A5 B0                lda     FAC
001744r 2  F0 FB                beq     RTS14
001746r 2  06 BF                asl     FACEXTENSION
001748r 2  90 F7                bcc     RTS14
00174Ar 2               
00174Ar 2               ; ----------------------------------------------------------------------------
00174Ar 2               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
00174Ar 2               ; ----------------------------------------------------------------------------
00174Ar 2               INCREMENT_MANTISSA:
00174Ar 2  20 rr rr             jsr     INCREMENT_FAC_MANTISSA
00174Dr 2  D0 F2                bne     RTS14
00174Fr 2  4C rr rr             jmp     NORMALIZE_FAC6
001752r 2               
001752r 2               ; ----------------------------------------------------------------------------
001752r 2               ; TEST FAC FOR ZERO AND SIGN
001752r 2               ;
001752r 2               ; FAC > 0, RETURN +1
001752r 2               ; FAC = 0, RETURN  0
001752r 2               ; FAC < 0, RETURN -1
001752r 2               ; ----------------------------------------------------------------------------
001752r 2               SIGN:
001752r 2  A5 B0                lda     FAC
001754r 2  F0 09                beq     RTS15
001756r 2               L3AA7:
001756r 2  A5 B5                lda     FACSIGN
001758r 2               SIGN2:
001758r 2  2A                   rol     a
001759r 2  A9 FF                lda     #$FF
00175Br 2  B0 02                bcs     RTS15
00175Dr 2  A9 01                lda     #$01
00175Fr 2               RTS15:
00175Fr 2  60                   rts
001760r 2               
001760r 2               ; ----------------------------------------------------------------------------
001760r 2               ; "SGN" FUNCTION
001760r 2               ; ----------------------------------------------------------------------------
001760r 2               SGN:
001760r 2  20 rr rr             jsr     SIGN
001763r 2               
001763r 2               ; ----------------------------------------------------------------------------
001763r 2               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
001763r 2               ; ----------------------------------------------------------------------------
001763r 2               FLOAT:
001763r 2  85 B1                sta     FAC+1
001765r 2  A9 00                lda     #$00
001767r 2  85 B2                sta     FAC+2
001769r 2  A2 88                ldx     #$88
00176Br 2               
00176Br 2               ; ----------------------------------------------------------------------------
00176Br 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00176Br 2               ; (X) = EXPONENT
00176Br 2               ; ----------------------------------------------------------------------------
00176Br 2               FLOAT1:
00176Br 2  A5 B1                lda     FAC+1
00176Dr 2  49 FF                eor     #$FF
00176Fr 2  2A                   rol     a
001770r 2               
001770r 2               ; ----------------------------------------------------------------------------
001770r 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
001770r 2               ; (X) = EXPONENT
001770r 2               ; C=0 TO MAKE VALUE NEGATIVE
001770r 2               ; C=1 TO MAKE VALUE POSITIVE
001770r 2               ; ----------------------------------------------------------------------------
001770r 2               FLOAT2:
001770r 2  A9 00                lda     #$00
001772r 2               .ifndef CONFIG_SMALL
001772r 2  85 B4                sta     FAC+4
001774r 2               .endif
001774r 2  85 B3                sta     FAC+3
001776r 2               LDB21:
001776r 2  86 B0                stx     FAC
001778r 2  85 BF                sta     FACEXTENSION
00177Ar 2  85 B5                sta     FACSIGN
00177Cr 2  4C rr rr             jmp     NORMALIZE_FAC1
00177Fr 2               
00177Fr 2               ; ----------------------------------------------------------------------------
00177Fr 2               ; "ABS" FUNCTION
00177Fr 2               ; ----------------------------------------------------------------------------
00177Fr 2               ABS:
00177Fr 2  46 B5                lsr     FACSIGN
001781r 2  60                   rts
001782r 2               
001782r 2               ; ----------------------------------------------------------------------------
001782r 2               ; COMPARE FAC WITH PACKED # AT (Y,A)
001782r 2               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
001782r 2               ; ----------------------------------------------------------------------------
001782r 2               FCOMP:
001782r 2  85 73                sta     DEST
001784r 2               
001784r 2               ; ----------------------------------------------------------------------------
001784r 2               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
001784r 2               ; "DEST" ALREADY SET UP
001784r 2               ; ----------------------------------------------------------------------------
001784r 2               FCOMP2:
001784r 2  84 74                sty     DEST+1
001786r 2  A0 00                ldy     #$00
001788r 2  B1 73                lda     (DEST),y
00178Ar 2  C8                   iny
00178Br 2  AA                   tax
00178Cr 2  F0 C4                beq     SIGN
00178Er 2  B1 73                lda     (DEST),y
001790r 2  45 B5                eor     FACSIGN
001792r 2  30 C2                bmi     L3AA7
001794r 2  E4 B0                cpx     FAC
001796r 2  D0 21                bne     L3B0A
001798r 2  B1 73                lda     (DEST),y
00179Ar 2  09 80                ora     #$80
00179Cr 2  C5 B1                cmp     FAC+1
00179Er 2  D0 19                bne     L3B0A
0017A0r 2  C8                   iny
0017A1r 2  B1 73                lda     (DEST),y
0017A3r 2  C5 B2                cmp     FAC+2
0017A5r 2  D0 12                bne     L3B0A
0017A7r 2  C8                   iny
0017A8r 2               .ifndef CONFIG_SMALL
0017A8r 2  B1 73                lda     (DEST),y
0017AAr 2  C5 B3                cmp     FAC+3
0017ACr 2  D0 0B                bne     L3B0A
0017AEr 2  C8                   iny
0017AFr 2               .endif
0017AFr 2  A9 7F                lda     #$7F
0017B1r 2  C5 BF                cmp     FACEXTENSION
0017B3r 2  B1 73                lda     (DEST),y
0017B5r 2  E5 B4                sbc     FAC_LAST
0017B7r 2  F0 28                beq     L3B32
0017B9r 2               L3B0A:
0017B9r 2  A5 B5                lda     FACSIGN
0017BBr 2  90 02                bcc     L3B10
0017BDr 2  49 FF                eor     #$FF
0017BFr 2               L3B10:
0017BFr 2  4C rr rr             jmp     SIGN2
0017C2r 2               
0017C2r 2               ; ----------------------------------------------------------------------------
0017C2r 2               ; QUICK INTEGER FUNCTION
0017C2r 2               ;
0017C2r 2               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
0017C2r 2               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
0017C2r 2               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
0017C2r 2               ;
0017C2r 2               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
0017C2r 2               ; ----------------------------------------------------------------------------
0017C2r 2               QINT:
0017C2r 2  A5 B0                lda     FAC
0017C4r 2  F0 4A                beq     QINT3
0017C6r 2  38                   sec
0017C7r 2  E9 A0                sbc     #120+8*BYTES_FP
0017C9r 2  24 B5                bit     FACSIGN
0017CBr 2  10 09                bpl     L3B27
0017CDr 2  AA                   tax
0017CEr 2  A9 FF                lda     #$FF
0017D0r 2  85 B7                sta     SHIFTSIGNEXT
0017D2r 2  20 rr rr             jsr     COMPLEMENT_FAC_MANTISSA
0017D5r 2  8A                   txa
0017D6r 2               L3B27:
0017D6r 2  A2 B0                ldx     #FAC
0017D8r 2  C9 F9                cmp     #$F9
0017DAr 2  10 06                bpl     QINT2
0017DCr 2  20 rr rr             jsr     SHIFT_RIGHT
0017DFr 2  84 B7                sty     SHIFTSIGNEXT
0017E1r 2               L3B32:
0017E1r 2  60                   rts
0017E2r 2               QINT2:
0017E2r 2  A8                   tay
0017E3r 2  A5 B5                lda     FACSIGN
0017E5r 2  29 80                and     #$80
0017E7r 2  46 B1                lsr     FAC+1
0017E9r 2  05 B1                ora     FAC+1
0017EBr 2  85 B1                sta     FAC+1
0017EDr 2  20 rr rr             jsr     SHIFT_RIGHT4
0017F0r 2  84 B7                sty     SHIFTSIGNEXT
0017F2r 2  60                   rts
0017F3r 2               
0017F3r 2               ; ----------------------------------------------------------------------------
0017F3r 2               ; "INT" FUNCTION
0017F3r 2               ;
0017F3r 2               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
0017F3r 2               ; AND THEN REFLOATS THE INTEGER.
0017F3r 2               ; ----------------------------------------------------------------------------
0017F3r 2               INT:
0017F3r 2  A5 B0                lda     FAC
0017F5r 2  C9 A0                cmp     #120+8*BYTES_FP
0017F7r 2  B0 20                bcs     RTS17
0017F9r 2  20 rr rr             jsr     QINT
0017FCr 2  84 BF                sty     FACEXTENSION
0017FEr 2  A5 B5                lda     FACSIGN
001800r 2  84 B5                sty     FACSIGN
001802r 2  49 80                eor     #$80
001804r 2  2A                   rol     a
001805r 2  A9 A0                lda     #120+8*BYTES_FP
001807r 2  85 B0                sta     FAC
001809r 2  A5 B4                lda     FAC_LAST
00180Br 2  85 5B                sta     CHARAC
00180Dr 2  4C rr rr             jmp     NORMALIZE_FAC1
001810r 2               QINT3:
001810r 2  85 B1                sta     FAC+1
001812r 2  85 B2                sta     FAC+2
001814r 2  85 B3                sta     FAC+3
001816r 2               .ifndef CONFIG_SMALL
001816r 2  85 B4                sta     FAC+4
001818r 2               .endif
001818r 2  A8                   tay
001819r 2               RTS17:
001819r 2  60                   rts
00181Ar 2               
00181Ar 2               ; ----------------------------------------------------------------------------
00181Ar 2               ; CONVERT STRING TO FP VALUE IN FAC
00181Ar 2               ;
00181Ar 2               ; STRING POINTED TO BY TXTPTR
00181Ar 2               ; FIRST CHAR ALREADY SCANNED BY CHRGET
00181Ar 2               ; (A) = FIRST CHAR, C=0 IF DIGIT.
00181Ar 2               ; ----------------------------------------------------------------------------
00181Ar 2               FIN:
00181Ar 2  A0 00                ldy     #$00
00181Cr 2  A2 0A                ldx     #SERLEN-TMPEXP
00181Er 2               L3B6F:
00181Er 2  94 AC                sty     TMPEXP,x
001820r 2  CA                   dex
001821r 2  10 FB                bpl     L3B6F
001823r 2  90 0F                bcc     FIN2
001825r 2  C9 2D                cmp     #$2D
001827r 2  D0 04                bne     L3B7E
001829r 2  86 B6                stx     SERLEN
00182Br 2  F0 04                beq     FIN1
00182Dr 2               L3B7E:
00182Dr 2  C9 2B                cmp     #$2B
00182Fr 2  D0 05                bne     FIN3
001831r 2               FIN1:
001831r 2  20 C2 00             jsr     CHRGET
001834r 2               FIN2:
001834r 2  90 5B                bcc     FIN9
001836r 2               FIN3:
001836r 2  C9 2E                cmp     #$2E
001838r 2  F0 2E                beq     FIN10
00183Ar 2  C9 45                cmp     #$45
00183Cr 2  D0 30                bne     FIN7
00183Er 2  20 C2 00             jsr     CHRGET
001841r 2  90 17                bcc     FIN5
001843r 2  C9 A5                cmp     #TOKEN_MINUS
001845r 2  F0 0E                beq     L3BA6
001847r 2  C9 2D                cmp     #$2D
001849r 2  F0 0A                beq     L3BA6
00184Br 2  C9 A4                cmp     #TOKEN_PLUS
00184Dr 2  F0 08                beq     FIN4
00184Fr 2  C9 2B                cmp     #$2B
001851r 2  F0 04                beq     FIN4
001853r 2  D0 07                bne     FIN6
001855r 2               L3BA6:
001855r 2               .ifndef CONFIG_ROR_WORKAROUND
001855r 2  66 AF                ror     EXPSGN
001857r 2               .else
001857r 2                       lda     #$00
001857r 2                       bcc     L3BAC
001857r 2                       lda     #$80
001857r 2               L3BAC:
001857r 2                       lsr     EXPSGN
001857r 2                       ora     EXPSGN
001857r 2                       sta     EXPSGN
001857r 2               .endif
001857r 2               FIN4:
001857r 2  20 C2 00             jsr     CHRGET
00185Ar 2               FIN5:
00185Ar 2  90 5C                bcc     GETEXP
00185Cr 2               FIN6:
00185Cr 2  24 AF                bit     EXPSGN
00185Er 2  10 0E                bpl     FIN7
001860r 2  A9 00                lda     #$00
001862r 2  38                   sec
001863r 2  E5 AD                sbc     EXPON
001865r 2  4C rr rr             jmp     FIN8
001868r 2               
001868r 2               ; ----------------------------------------------------------------------------
001868r 2               ; FOUND A DECIMAL POINT
001868r 2               ; ----------------------------------------------------------------------------
001868r 2               FIN10:
001868r 2               .ifndef CONFIG_ROR_WORKAROUND
001868r 2  66 AE                ror     LOWTR
00186Ar 2               .else
00186Ar 2                       lda     #$00
00186Ar 2                       bcc     L3BC9
00186Ar 2                       lda     #$80
00186Ar 2               L3BC9:
00186Ar 2                       lsr     LOWTR
00186Ar 2                       ora     LOWTR
00186Ar 2                       sta     LOWTR
00186Ar 2               .endif
00186Ar 2  24 AE                bit     LOWTR
00186Cr 2  50 C3                bvc     FIN1
00186Er 2               
00186Er 2               ; ----------------------------------------------------------------------------
00186Er 2               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
00186Er 2               ; ----------------------------------------------------------------------------
00186Er 2               FIN7:
00186Er 2  A5 AD                lda     EXPON
001870r 2               FIN8:
001870r 2  38                   sec
001871r 2  E5 AC                sbc     INDX
001873r 2  85 AD                sta     EXPON
001875r 2  F0 12                beq     L3BEE
001877r 2  10 09                bpl     L3BE7
001879r 2               L3BDE:
001879r 2  20 rr rr             jsr     DIV10
00187Cr 2  E6 AD                inc     EXPON
00187Er 2  D0 F9                bne     L3BDE
001880r 2  F0 07                beq     L3BEE
001882r 2               L3BE7:
001882r 2  20 rr rr             jsr     MUL10
001885r 2  C6 AD                dec     EXPON
001887r 2  D0 F9                bne     L3BE7
001889r 2               L3BEE:
001889r 2  A5 B6                lda     SERLEN
00188Br 2  30 01                bmi     L3BF3
00188Dr 2  60                   rts
00188Er 2               L3BF3:
00188Er 2  4C rr rr             jmp     NEGOP
001891r 2               
001891r 2               ; ----------------------------------------------------------------------------
001891r 2               ; ACCUMULATE A DIGIT INTO FAC
001891r 2               ; ----------------------------------------------------------------------------
001891r 2               FIN9:
001891r 2  48                   pha
001892r 2  24 AE                bit     LOWTR
001894r 2  10 02                bpl     L3BFD
001896r 2  E6 AC                inc     INDX
001898r 2               L3BFD:
001898r 2  20 rr rr             jsr     MUL10
00189Br 2  68                   pla
00189Cr 2  38                   sec
00189Dr 2  E9 30                sbc     #$30
00189Fr 2  20 rr rr             jsr     ADDACC
0018A2r 2  4C rr rr             jmp     FIN1
0018A5r 2               
0018A5r 2               ; ----------------------------------------------------------------------------
0018A5r 2               ; ADD (A) TO FAC
0018A5r 2               ; ----------------------------------------------------------------------------
0018A5r 2               ADDACC:
0018A5r 2  48                   pha
0018A6r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
0018A9r 2  68                   pla
0018AAr 2  20 rr rr             jsr     FLOAT
0018ADr 2  A5 BD                lda     ARGSIGN
0018AFr 2  45 B5                eor     FACSIGN
0018B1r 2  85 BE                sta     SGNCPR
0018B3r 2  A6 B0                ldx     FAC
0018B5r 2  4C rr rr             jmp     FADDT
0018B8r 2               
0018B8r 2               ; ----------------------------------------------------------------------------
0018B8r 2               ; ACCUMULATE DIGIT OF EXPONENT
0018B8r 2               ; ----------------------------------------------------------------------------
0018B8r 2               GETEXP:
0018B8r 2  A5 AD                lda     EXPON
0018BAr 2  C9 0A                cmp     #MAX_EXPON
0018BCr 2  90 09                bcc     L3C2C
0018BEr 2               .ifdef CONFIG_10A
0018BEr 2  A9 64                lda     #$64
0018C0r 2               .endif
0018C0r 2  24 AF                bit     EXPSGN
0018C2r 2               .ifdef CONFIG_10A
0018C2r 2  30 11                bmi     L3C3A
0018C4r 2               .else
0018C4r 2                       bmi     LDC70
0018C4r 2               .endif
0018C4r 2  4C rr rr             jmp     OVERFLOW
0018C7r 2               LDC70:
0018C7r 2               .ifndef CONFIG_10A
0018C7r 2                       lda     #$0B
0018C7r 2               .endif
0018C7r 2               L3C2C:
0018C7r 2  0A                   asl     a
0018C8r 2  0A                   asl     a
0018C9r 2  18                   clc
0018CAr 2  65 AD                adc     EXPON
0018CCr 2  0A                   asl     a
0018CDr 2  18                   clc
0018CEr 2  A0 00                ldy     #$00
0018D0r 2  71 C9                adc     (TXTPTR),y
0018D2r 2  38                   sec
0018D3r 2  E9 30                sbc     #$30
0018D5r 2               L3C3A:
0018D5r 2  85 AD                sta     EXPON
0018D7r 2  4C rr rr             jmp     FIN4
0018DAr 2               
0018DAr 2               ; ----------------------------------------------------------------------------
0018DAr 2               .ifdef CONFIG_SMALL
0018DAr 2               ; these values are /1000 of what the labels say
0018DAr 2               CON_99999999_9:
0018DAr 2                       .byte   $91,$43,$4F,$F8
0018DAr 2               CON_999999999:
0018DAr 2               		.byte   $94,$74,$23,$F7
0018DAr 2               CON_BILLION:
0018DAr 2                       .byte   $94,$74,$24,$00
0018DAr 2               .else
0018DAr 2               CON_99999999_9:
0018DAr 2  9B 3E BC 1F          .byte   $9B,$3E,$BC,$1F,$FD
0018DEr 2  FD           
0018DFr 2               CON_999999999:
0018DFr 2               .ifndef CONFIG_10A
0018DFr 2                       .byte   $9E,$6E,$6B,$27,$FE
0018DFr 2               .else
0018DFr 2  9E 6E 6B 27          .byte   $9E,$6E,$6B,$27,$FD
0018E3r 2  FD           
0018E4r 2               .endif
0018E4r 2               CON_BILLION:
0018E4r 2  9E 6E 6B 28          .byte   $9E,$6E,$6B,$28,$00
0018E8r 2  00           
0018E9r 2               .endif
0018E9r 2               
0018E9r 2               ; ----------------------------------------------------------------------------
0018E9r 2               ; PRINT "IN <LINE #>"
0018E9r 2               ; ----------------------------------------------------------------------------
0018E9r 2               INPRT:
0018E9r 2               .ifdef KBD
0018E9r 2                       jsr     LFE0B
0018E9r 2                       .byte	" in"
0018E9r 2                       .byte	0
0018E9r 2               .else
0018E9r 2  A9 rr                lda     #<QT_IN
0018EBr 2  A0 rr                ldy     #>QT_IN
0018EDr 2  20 rr rr             jsr     GOSTROUT2
0018F0r 2               .endif
0018F0r 2  A5 89                lda     CURLIN+1
0018F2r 2  A6 88                ldx     CURLIN
0018F4r 2               
0018F4r 2               ; ----------------------------------------------------------------------------
0018F4r 2               ; PRINT A,X AS DECIMAL INTEGER
0018F4r 2               ; ----------------------------------------------------------------------------
0018F4r 2               LINPRT:
0018F4r 2  85 B1                sta     FAC+1
0018F6r 2  86 B2                stx     FAC+2
0018F8r 2  A2 90                ldx     #$90
0018FAr 2  38                   sec
0018FBr 2  20 rr rr             jsr     FLOAT2
0018FEr 2  20 rr rr             jsr     FOUT
001901r 2               GOSTROUT2:
001901r 2  4C rr rr             jmp     STROUT
001904r 2               
001904r 2               ; ----------------------------------------------------------------------------
001904r 2               ; CONVERT (FAC) TO STRING STARTING AT STACK
001904r 2               ; RETURN WITH (Y,A) POINTING AT STRING
001904r 2               ; ----------------------------------------------------------------------------
001904r 2               FOUT:
001904r 2  A0 01                ldy     #$01
001906r 2               
001906r 2               ; ----------------------------------------------------------------------------
001906r 2               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
001906r 2               ; SO THAT RESULT STRING STARTS AT STACK-1
001906r 2               ; (THIS IS USED AS A FLAG)
001906r 2               ; ----------------------------------------------------------------------------
001906r 2               FOUT1:
001906r 2  A9 20                lda     #$20
001908r 2  24 B5                bit     FACSIGN
00190Ar 2  10 02                bpl     L3C73
00190Cr 2  A9 2D                lda     #$2D
00190Er 2               L3C73:
00190Er 2  99 FF 00             sta     $FF,y
001911r 2  85 B5                sta     FACSIGN
001913r 2  84 C0                sty     STRNG2
001915r 2  C8                   iny
001916r 2  A9 30                lda     #$30
001918r 2  A6 B0                ldx     FAC
00191Ar 2  D0 03                bne     L3C84
00191Cr 2  4C rr rr             jmp     FOUT4
00191Fr 2               L3C84:
00191Fr 2  A9 00                lda     #$00
001921r 2  E0 80                cpx     #$80
001923r 2  F0 02                beq     L3C8C
001925r 2  B0 09                bcs     L3C95
001927r 2               L3C8C:
001927r 2  A9 rr                lda     #<CON_BILLION
001929r 2  A0 rr                ldy     #>CON_BILLION
00192Br 2  20 rr rr             jsr     FMULT
00192Er 2               .ifdef CONFIG_SMALL
00192Er 2                       lda     #<-6 ; exponent adjustment
00192Er 2               .else
00192Er 2  A9 F7                lda     #%11110111
001930r 2               .endif
001930r 2               L3C95:
001930r 2  85 AC                sta     INDX
001932r 2               ; ----------------------------------------------------------------------------
001932r 2               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
001932r 2               ; ----------------------------------------------------------------------------
001932r 2               L3C97:
001932r 2  A9 rr                lda     #<CON_999999999
001934r 2  A0 rr                ldy     #>CON_999999999
001936r 2  20 rr rr             jsr     FCOMP
001939r 2  F0 1E                beq     L3CBE
00193Br 2  10 12                bpl     L3CB4
00193Dr 2               L3CA2:
00193Dr 2  A9 rr                lda     #<CON_99999999_9
00193Fr 2  A0 rr                ldy     #>CON_99999999_9
001941r 2  20 rr rr             jsr     FCOMP
001944r 2  F0 02                beq     L3CAD
001946r 2  10 0E                bpl     L3CBB
001948r 2               L3CAD:
001948r 2  20 rr rr             jsr     MUL10
00194Br 2  C6 AC                dec     INDX
00194Dr 2  D0 EE                bne     L3CA2
00194Fr 2               L3CB4:
00194Fr 2  20 rr rr             jsr     DIV10
001952r 2  E6 AC                inc     INDX
001954r 2  D0 DC                bne     L3C97
001956r 2               L3CBB:
001956r 2  20 rr rr             jsr     FADDH
001959r 2               L3CBE:
001959r 2  20 rr rr             jsr     QINT
00195Cr 2               ; ----------------------------------------------------------------------------
00195Cr 2               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
00195Cr 2               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
00195Cr 2               ;
00195Cr 2               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
00195Cr 2               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
00195Cr 2               ; ----------------------------------------------------------------------------
00195Cr 2  A2 01                ldx     #$01
00195Er 2  A5 AC                lda     INDX
001960r 2  18                   clc
001961r 2  69 0A                adc     #3*BYTES_FP-5
001963r 2  30 09                bmi     L3CD3
001965r 2  C9 0B                cmp     #3*BYTES_FP-4
001967r 2  B0 06                bcs     L3CD4
001969r 2  69 FF                adc     #$FF
00196Br 2  AA                   tax
00196Cr 2  A9 02                lda     #$02
00196Er 2               L3CD3:
00196Er 2  38                   sec
00196Fr 2               L3CD4:
00196Fr 2  E9 02                sbc     #$02
001971r 2  85 AD                sta     EXPON
001973r 2  86 AC                stx     INDX
001975r 2  8A                   txa
001976r 2  F0 02                beq     L3CDF
001978r 2  10 13                bpl     L3CF2
00197Ar 2               L3CDF:
00197Ar 2  A4 C0                ldy     STRNG2
00197Cr 2  A9 2E                lda     #$2E
00197Er 2  C8                   iny
00197Fr 2  99 FF 00             sta     $FF,y
001982r 2  8A                   txa
001983r 2  F0 06                beq     L3CF0
001985r 2  A9 30                lda     #$30
001987r 2  C8                   iny
001988r 2  99 FF 00             sta     $FF,y
00198Br 2               L3CF0:
00198Br 2  84 C0                sty     STRNG2
00198Dr 2               ; ----------------------------------------------------------------------------
00198Dr 2               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
00198Dr 2               ; ----------------------------------------------------------------------------
00198Dr 2               L3CF2:
00198Dr 2  A0 00                ldy     #$00
00198Fr 2               LDD3A:
00198Fr 2  A2 80                ldx     #$80
001991r 2               L3CF6:
001991r 2  A5 B4                lda     FAC_LAST
001993r 2  18                   clc
001994r 2               .ifndef CONFIG_SMALL
001994r 2  79 rr rr             adc     DECTBL+3,y
001997r 2  85 B4                sta     FAC+4
001999r 2  A5 B3                lda     FAC+3
00199Br 2               .endif
00199Br 2  79 rr rr             adc     DECTBL+2,y
00199Er 2  85 B3                sta     FAC+3
0019A0r 2  A5 B2                lda     FAC+2
0019A2r 2  79 rr rr             adc     DECTBL+1,y
0019A5r 2  85 B2                sta     FAC+2
0019A7r 2  A5 B1                lda     FAC+1
0019A9r 2  79 rr rr             adc     DECTBL,y
0019ACr 2  85 B1                sta     FAC+1
0019AEr 2  E8                   inx
0019AFr 2  B0 04                bcs     L3D1A
0019B1r 2  10 DE                bpl     L3CF6
0019B3r 2  30 02                bmi     L3D1C
0019B5r 2               L3D1A:
0019B5r 2  30 DA                bmi     L3CF6
0019B7r 2               L3D1C:
0019B7r 2  8A                   txa
0019B8r 2  90 04                bcc     L3D23
0019BAr 2  49 FF                eor     #$FF
0019BCr 2  69 0A                adc     #$0A
0019BEr 2               L3D23:
0019BEr 2  69 2F                adc     #$2F
0019C0r 2  C8                   iny
0019C1r 2  C8                   iny
0019C2r 2  C8                   iny
0019C3r 2               .ifndef CONFIG_SMALL
0019C3r 2  C8                   iny
0019C4r 2               .endif
0019C4r 2  84 96                sty     VARPNT
0019C6r 2  A4 C0                ldy     STRNG2
0019C8r 2  C8                   iny
0019C9r 2  AA                   tax
0019CAr 2  29 7F                and     #$7F
0019CCr 2  99 FF 00             sta     $FF,y
0019CFr 2  C6 AC                dec     INDX
0019D1r 2  D0 06                bne     L3D3E
0019D3r 2  A9 2E                lda     #$2E
0019D5r 2  C8                   iny
0019D6r 2  99 FF 00             sta     $FF,y
0019D9r 2               L3D3E:
0019D9r 2  84 C0                sty     STRNG2
0019DBr 2  A4 96                ldy     VARPNT
0019DDr 2  8A                   txa
0019DEr 2  49 FF                eor     #$FF
0019E0r 2  29 80                and     #$80
0019E2r 2  AA                   tax
0019E3r 2  C0 24                cpy     #DECTBL_END-DECTBL
0019E5r 2               .ifdef CONFIG_CBM_ALL
0019E5r 2                       beq     LDD96
0019E5r 2                       cpy     #$3C ; XXX
0019E5r 2               .endif
0019E5r 2  D0 AA                bne     L3CF6
0019E7r 2               ; ----------------------------------------------------------------------------
0019E7r 2               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
0019E7r 2               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
0019E7r 2               ; DECIMAL POINT.
0019E7r 2               ; ----------------------------------------------------------------------------
0019E7r 2               LDD96:
0019E7r 2  A4 C0                ldy     STRNG2
0019E9r 2               L3D4E:
0019E9r 2  B9 FF 00             lda     $FF,y
0019ECr 2  88                   dey
0019EDr 2  C9 30                cmp     #$30
0019EFr 2  F0 F8                beq     L3D4E
0019F1r 2  C9 2E                cmp     #$2E
0019F3r 2  F0 01                beq     L3D5B
0019F5r 2  C8                   iny
0019F6r 2               L3D5B:
0019F6r 2  A9 2B                lda     #$2B
0019F8r 2  A6 AD                ldx     EXPON
0019FAr 2  F0 2E                beq     L3D8F
0019FCr 2  10 08                bpl     L3D6B
0019FEr 2  A9 00                lda     #$00
001A00r 2  38                   sec
001A01r 2  E5 AD                sbc     EXPON
001A03r 2  AA                   tax
001A04r 2  A9 2D                lda     #$2D
001A06r 2               L3D6B:
001A06r 2  99 01 01             sta     STACK+1,y
001A09r 2  A9 45                lda     #$45
001A0Br 2  99 00 01             sta     STACK,y
001A0Er 2  8A                   txa
001A0Fr 2  A2 2F                ldx     #$2F
001A11r 2  38                   sec
001A12r 2               L3D77:
001A12r 2  E8                   inx
001A13r 2  E9 0A                sbc     #$0A
001A15r 2  B0 FB                bcs     L3D77
001A17r 2  69 3A                adc     #$3A
001A19r 2  99 03 01             sta     STACK+3,y
001A1Cr 2  8A                   txa
001A1Dr 2  99 02 01             sta     STACK+2,y
001A20r 2  A9 00                lda     #$00
001A22r 2  99 04 01             sta     STACK+4,y
001A25r 2  F0 08                beq     L3D94
001A27r 2               FOUT4:
001A27r 2  99 FF 00             sta     $FF,y
001A2Ar 2               L3D8F:
001A2Ar 2  A9 00                lda     #$00
001A2Cr 2  99 00 01             sta     STACK,y
001A2Fr 2               L3D94:
001A2Fr 2  A9 00                lda     #$00
001A31r 2  A0 01                ldy     #$01
001A33r 2  60                   rts
001A34r 2               
001A34r 2               ; ----------------------------------------------------------------------------
001A34r 2               CON_HALF:
001A34r 2               .ifdef CONFIG_SMALL
001A34r 2                       .byte   $80,$00,$00,$00
001A34r 2               .else
001A34r 2  80 00 00 00          .byte   $80,$00,$00,$00,$00
001A38r 2  00           
001A39r 2               .endif
001A39r 2               
001A39r 2               ; ----------------------------------------------------------------------------
001A39r 2               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
001A39r 2               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
001A39r 2               ; ----------------------------------------------------------------------------
001A39r 2               DECTBL:
001A39r 2               .ifdef CONFIG_SMALL
001A39r 2                       .byte   $FE,$79,$60 ; -100000
001A39r 2               		.byte	$00,$27,$10 ; 10000
001A39r 2               		.byte	$FF,$FC,$18 ; -1000
001A39r 2               		.byte	$00,$00,$64 ; 100
001A39r 2               		.byte	$FF,$FF,$F6 ; -10
001A39r 2               		.byte	$00,$00,$01 ; 1
001A39r 2               .else
001A39r 2  FA 0A 1F 00  		.byte	$FA,$0A,$1F,$00	; -100000000
001A3Dr 2  00 98 96 80  		.byte	$00,$98,$96,$80	; 10000000
001A41r 2  FF F0 BD C0  		.byte	$FF,$F0,$BD,$C0	; -1000000
001A45r 2  00 01 86 A0  		.byte	$00,$01,$86,$A0	; 100000
001A49r 2  FF FF D8 F0  		.byte	$FF,$FF,$D8,$F0	; -10000
001A4Dr 2  00 00 03 E8  		.byte   $00,$00,$03,$E8	; 1000
001A51r 2  FF FF FF 9C  		.byte	$FF,$FF,$FF,$9C	; -100
001A55r 2  00 00 00 0A  		.byte   $00,$00,$00,$0A	; 10
001A59r 2  FF FF FF FF  		.byte	$FF,$FF,$FF,$FF	; -1
001A5Dr 2               .endif
001A5Dr 2               DECTBL_END:
001A5Dr 2               .ifdef CONFIG_CBM_ALL
001A5Dr 2               		.byte	$FF,$DF,$0A,$80 ; TI$
001A5Dr 2               		.byte	$00,$03,$4B,$C0
001A5Dr 2               		.byte	$FF,$FF,$73,$60
001A5Dr 2               		.byte	$00,$00,$0E,$10
001A5Dr 2               		.byte	$FF,$FF,$FD,$A8
001A5Dr 2               		.byte	$00,$00,$00,$3C
001A5Dr 2               .endif
001A5Dr 2               .ifdef CONFIG_2
001A5Dr 2               C_ZERO = CON_HALF + 2
001A5Dr 2               .endif
001A5Dr 2               
001A5Dr 2               ; ----------------------------------------------------------------------------
001A5Dr 2               ; "SQR" FUNCTION
001A5Dr 2               ; ----------------------------------------------------------------------------
001A5Dr 2               SQR:
001A5Dr 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001A60r 2  A9 rr                lda     #<CON_HALF
001A62r 2  A0 rr                ldy     #>CON_HALF
001A64r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001A67r 2               
001A67r 2               ; ----------------------------------------------------------------------------
001A67r 2               ; EXPONENTIATION OPERATION
001A67r 2               ;
001A67r 2               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
001A67r 2               ; ----------------------------------------------------------------------------
001A67r 2               FPWRT:
001A67r 2  F0 70                beq     EXP
001A69r 2  A5 B8                lda     ARG
001A6Br 2  D0 03                bne     L3DD5
001A6Dr 2  4C rr rr             jmp     STA_IN_FAC_SIGN_AND_EXP
001A70r 2               L3DD5:
001A70r 2  A2 9D                ldx     #TEMP3
001A72r 2  A0 00                ldy     #$00
001A74r 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
001A77r 2  A5 BD                lda     ARGSIGN
001A79r 2  10 0F                bpl     L3DEF
001A7Br 2  20 rr rr             jsr     INT
001A7Er 2  A9 9D                lda     #TEMP3
001A80r 2  A0 00                ldy     #$00
001A82r 2  20 rr rr             jsr     FCOMP
001A85r 2  D0 03                bne     L3DEF
001A87r 2  98                   tya
001A88r 2  A4 5B                ldy     CHARAC
001A8Ar 2               L3DEF:
001A8Ar 2  20 rr rr             jsr     MFA
001A8Dr 2  98                   tya
001A8Er 2  48                   pha
001A8Fr 2  20 rr rr             jsr     LOG
001A92r 2  A9 9D                lda     #TEMP3
001A94r 2  A0 00                ldy     #$00
001A96r 2  20 rr rr             jsr     FMULT
001A99r 2  20 rr rr             jsr     EXP
001A9Cr 2  68                   pla
001A9Dr 2  4A                   lsr     a
001A9Er 2  90 0A                bcc     L3E0F
001AA0r 2               
001AA0r 2               ; ----------------------------------------------------------------------------
001AA0r 2               ; NEGATE VALUE IN FAC
001AA0r 2               ; ----------------------------------------------------------------------------
001AA0r 2               NEGOP:
001AA0r 2  A5 B0                lda     FAC
001AA2r 2  F0 06                beq     L3E0F
001AA4r 2  A5 B5                lda     FACSIGN
001AA6r 2  49 FF                eor     #$FF
001AA8r 2  85 B5                sta     FACSIGN
001AAAr 2               L3E0F:
001AAAr 2  60                   rts
001AABr 2               
001AABr 2               ; ----------------------------------------------------------------------------
001AABr 2               .ifdef CONFIG_SMALL
001AABr 2               CON_LOG_E:
001AABr 2                       .byte   $81,$38,$AA,$3B
001AABr 2               POLY_EXP:
001AABr 2               		.byte	$06
001AABr 2               		.byte	$74,$63,$90,$8C
001AABr 2               		.byte	$77,$23,$0C,$AB
001AABr 2               		.byte	$7A,$1E,$94,$00
001AABr 2               		.byte	$7C,$63,$42,$80
001AABr 2               		.byte	$7E,$75,$FE,$D0
001AABr 2               		.byte	$80,$31,$72,$15
001AABr 2               		.byte	$81,$00,$00,$00
001AABr 2               .else
001AABr 2               CON_LOG_E:
001AABr 2  81 38 AA 3B          .byte   $81,$38,$AA,$3B,$29
001AAFr 2  29           
001AB0r 2               POLY_EXP:
001AB0r 2  07                   .byte   $07
001AB1r 2  71 34 58 3E  		.byte	$71,$34,$58,$3E,$56
001AB5r 2  56           
001AB6r 2  74 16 7E B3  		.byte	$74,$16,$7E,$B3,$1B
001ABAr 2  1B           
001ABBr 2  77 2F EE E3  		.byte	$77,$2F,$EE,$E3,$85
001ABFr 2  85           
001AC0r 2  7A 1D 84 1C          .byte   $7A,$1D,$84,$1C,$2A
001AC4r 2  2A           
001AC5r 2  7C 63 59 58  		.byte	$7C,$63,$59,$58,$0A
001AC9r 2  0A           
001ACAr 2  7E 75 FD E7  		.byte	$7E,$75,$FD,$E7,$C6
001ACEr 2  C6           
001ACFr 2  80 31 72 18  		.byte	$80,$31,$72,$18,$10
001AD3r 2  10           
001AD4r 2  81 00 00 00  		.byte	$81,$00,$00,$00,$00
001AD8r 2  00           
001AD9r 2               .endif
001AD9r 2               
001AD9r 2               ; ----------------------------------------------------------------------------
001AD9r 2               ; "EXP" FUNCTION
001AD9r 2               ;
001AD9r 2               ; FAC = E ^ FAC
001AD9r 2               ; ----------------------------------------------------------------------------
001AD9r 2               EXP:
001AD9r 2  A9 rr                lda     #<CON_LOG_E
001ADBr 2  A0 rr                ldy     #>CON_LOG_E
001ADDr 2  20 rr rr             jsr     FMULT
001AE0r 2  A5 BF                lda     FACEXTENSION
001AE2r 2  69 50                adc     #$50
001AE4r 2  90 03                bcc     L3E4E
001AE6r 2  20 rr rr             jsr     INCREMENT_MANTISSA
001AE9r 2               L3E4E:
001AE9r 2  85 A5                sta     ARGEXTENSION
001AEBr 2  20 rr rr             jsr     MAF
001AEEr 2  A5 B0                lda     FAC
001AF0r 2  C9 88                cmp     #$88
001AF2r 2  90 03                bcc     L3E5C
001AF4r 2               L3E59:
001AF4r 2  20 rr rr             jsr     OUTOFRNG
001AF7r 2               L3E5C:
001AF7r 2  20 rr rr             jsr     INT
001AFAr 2  A5 5B                lda     CHARAC
001AFCr 2  18                   clc
001AFDr 2  69 81                adc     #$81
001AFFr 2  F0 F3                beq     L3E59
001B01r 2  38                   sec
001B02r 2  E9 01                sbc     #$01
001B04r 2  48                   pha
001B05r 2  A2 05                ldx     #BYTES_FP
001B07r 2               L3E6C:
001B07r 2  B5 B8                lda     ARG,x
001B09r 2  B4 B0                ldy     FAC,x
001B0Br 2  95 B0                sta     FAC,x
001B0Dr 2  94 B8                sty     ARG,x
001B0Fr 2  CA                   dex
001B10r 2  10 F5                bpl     L3E6C
001B12r 2  A5 A5                lda     ARGEXTENSION
001B14r 2  85 BF                sta     FACEXTENSION
001B16r 2  20 rr rr             jsr     FSUBT
001B19r 2  20 rr rr             jsr     NEGOP
001B1Cr 2  A9 rr                lda     #<POLY_EXP
001B1Er 2  A0 rr                ldy     #>POLY_EXP
001B20r 2  20 rr rr             jsr     POLYNOMIAL
001B23r 2  A9 00                lda     #$00
001B25r 2  85 BE                sta     SGNCPR
001B27r 2  68                   pla
001B28r 2  20 rr rr             jsr     ADD_EXPONENTS1
001B2Br 2  60                   rts
001B2Cr 2               
001B2Cr 2               ; ----------------------------------------------------------------------------
001B2Cr 2               ; ODD POLYNOMIAL SUBROUTINE
001B2Cr 2               ;
001B2Cr 2               ; F(X) = X * P(X^2)
001B2Cr 2               ;
001B2Cr 2               ; WHERE:  X IS VALUE IN FAC
001B2Cr 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001B2Cr 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001B2Cr 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001B2Cr 2               ;
001B2Cr 2               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
001B2Cr 2               ; ----------------------------------------------------------------------------
001B2Cr 2               POLYNOMIAL_ODD:
001B2Cr 2  85 C0                sta     STRNG2
001B2Er 2  84 C1                sty     STRNG2+1
001B30r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001B33r 2  A9 A6                lda     #TEMP1X
001B35r 2  20 rr rr             jsr     FMULT
001B38r 2  20 rr rr             jsr     SERMAIN
001B3Br 2  A9 A6                lda     #TEMP1X
001B3Dr 2  A0 00                ldy     #$00
001B3Fr 2  4C rr rr             jmp     FMULT
001B42r 2               
001B42r 2               ; ----------------------------------------------------------------------------
001B42r 2               ; NORMAL POLYNOMIAL SUBROUTINE
001B42r 2               ;
001B42r 2               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
001B42r 2               ;
001B42r 2               ; WHERE:  X IS VALUE IN FAC
001B42r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001B42r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001B42r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001B42r 2               ; ----------------------------------------------------------------------------
001B42r 2               POLYNOMIAL:
001B42r 2  85 C0                sta     STRNG2
001B44r 2  84 C1                sty     STRNG2+1
001B46r 2               SERMAIN:
001B46r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP2_ROUNDED
001B49r 2  B1 C0                lda     (STRNG2),y
001B4Br 2  85 B6                sta     SERLEN
001B4Dr 2  A4 C0                ldy     STRNG2
001B4Fr 2  C8                   iny
001B50r 2  98                   tya
001B51r 2  D0 02                bne     L3EBA
001B53r 2  E6 C1                inc     STRNG2+1
001B55r 2               L3EBA:
001B55r 2  85 C0                sta     STRNG2
001B57r 2  A4 C1                ldy     STRNG2+1
001B59r 2               L3EBE:
001B59r 2  20 rr rr             jsr     FMULT
001B5Cr 2  A5 C0                lda     STRNG2
001B5Er 2  A4 C1                ldy     STRNG2+1
001B60r 2  18                   clc
001B61r 2  69 05                adc     #BYTES_FP
001B63r 2  90 01                bcc     L3ECB
001B65r 2  C8                   iny
001B66r 2               L3ECB:
001B66r 2  85 C0                sta     STRNG2
001B68r 2  84 C1                sty     STRNG2+1
001B6Ar 2  20 rr rr             jsr     FADD
001B6Dr 2  A9 AB                lda     #TEMP2
001B6Fr 2  A0 00                ldy     #$00
001B71r 2  C6 B6                dec     SERLEN
001B73r 2  D0 E4                bne     L3EBE
001B75r 2               RTS19:
001B75r 2  60                   rts
001B76r 2               
001B76r 1               .include "chrget.s"
001B76r 2               .segment "CHRGET"
000000r 2               RAMSTART1:
000000r 2               GENERIC_CHRGET:
000000r 2  E6 C9                inc     TXTPTR
000002r 2  D0 02                bne     GENERIC_CHRGOT
000004r 2  E6 CA                inc     TXTPTR+1
000006r 2               GENERIC_CHRGOT:
000006r 2               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
000006r 2  AD 60 EA             lda     $EA60
000009r 2               .ifdef KBD
000009r 2                       jsr     LF430
000009r 2               .endif
000009r 2  C9 3A                cmp     #$3A
00000Br 2  B0 0A                bcs     L4058
00000Dr 2               GENERIC_CHRGOT2:
00000Dr 2  C9 20                cmp     #$20
00000Fr 2  F0 EF                beq     GENERIC_CHRGET
000011r 2  38                   sec
000012r 2  E9 30                sbc     #$30
000014r 2  38                   sec
000015r 2  E9 D0                sbc     #$D0
000017r 2               L4058:
000017r 2  60                   rts
000018r 2               
000018r 1               .include "rnd.s"
000018r 2               .segment "CODE"
001B76r 2               
001B76r 2               ; ----------------------------------------------------------------------------
001B76r 2               ; "RND" FUNCTION
001B76r 2               ; ----------------------------------------------------------------------------
001B76r 2               
001B76r 2               .ifdef KBD
001B76r 2               RND:
001B76r 2                       ldx     #$10
001B76r 2                       jsr     SIGN
001B76r 2                       beq     LFC26
001B76r 2                       bmi     LFC10
001B76r 2                       lda     RNDSEED
001B76r 2                       ldy     RNDSEED+1
001B76r 2               LFBFA:
001B76r 2                       sta     FAC+2
001B76r 2                       sty     FAC+1
001B76r 2               LFBFE:
001B76r 2                       asl     a
001B76r 2                       asl     a
001B76r 2                       eor     FAC+2
001B76r 2                       asl     a
001B76r 2                       eor     FAC+1
001B76r 2                       asl     a
001B76r 2                       asl     a
001B76r 2                       asl     a
001B76r 2                       asl     a
001B76r 2                       eor     FAC+1
001B76r 2                       asl     a
001B76r 2                       rol     FAC+2
001B76r 2                       rol     FAC+1
001B76r 2               LFC10:
001B76r 2                       lda     FAC+2
001B76r 2                       dex
001B76r 2                       bne     LFBFE
001B76r 2                       sta     RNDSEED
001B76r 2                       sta     FAC+3
001B76r 2                       lda     FAC+1
001B76r 2                       sta     RNDSEED+1
001B76r 2                       lda     #$80
001B76r 2                       sta     FAC
001B76r 2                       stx     FACSIGN
001B76r 2                       jmp     NORMALIZE_FAC2
001B76r 2               LFC26:
001B76r 2                       ldy     $03CA
001B76r 2                       lda     $03C7
001B76r 2                       ora     #$01
001B76r 2               GOMOVMF:
001B76r 2                       bne     LFBFA
001B76r 2                       .byte   $F0
001B76r 2               .else
001B76r 2               ; <<< THESE ARE MISSING ONE BYTE FOR FP VALUES >>>
001B76r 2               ; (non CONFIG_SMALL)
001B76r 2               CONRND1:
001B76r 2  98 35 44 7A          .byte   $98,$35,$44,$7A
001B7Ar 2               CONRND2:
001B7Ar 2  68 28 B1 46          .byte   $68,$28,$B1,$46
001B7Er 2               RND:
001B7Er 2  20 rr rr             jsr     SIGN
001B81r 2               .ifdef CONFIG_CBM_ALL
001B81r 2                       bmi     L3F01
001B81r 2                       bne     LDF63
001B81r 2                       lda     ENTROPY
001B81r 2                       sta     FAC+1
001B81r 2                       lda     ENTROPY+4
001B81r 2                       sta     FAC+2
001B81r 2                       lda     ENTROPY+1
001B81r 2                       sta     FAC+3
001B81r 2                       lda     ENTROPY+5
001B81r 2                       sta     FAC+4
001B81r 2                       jmp     LDF88
001B81r 2               LDF63:
001B81r 2               .else
001B81r 2  AA                   tax
001B82r 2  30 18                bmi     L3F01
001B84r 2               .endif
001B84r 2  A9 DA                lda     #<RNDSEED
001B86r 2  A0 00                ldy     #>RNDSEED
001B88r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001B8Br 2               .ifndef CONFIG_CBM_ALL
001B8Br 2  8A                   txa
001B8Cr 2  F0 E7                beq     RTS19
001B8Er 2               .endif
001B8Er 2  A9 rr                lda     #<CONRND1
001B90r 2  A0 rr                ldy     #>CONRND1
001B92r 2  20 rr rr             jsr     FMULT
001B95r 2  A9 rr                lda     #<CONRND2
001B97r 2  A0 rr                ldy     #>CONRND2
001B99r 2  20 rr rr             jsr     FADD
001B9Cr 2               L3F01:
001B9Cr 2  A6 B4                ldx     FAC_LAST
001B9Er 2  A5 B1                lda     FAC+1
001BA0r 2  85 B4                sta     FAC_LAST
001BA2r 2  86 B1                stx     FAC+1
001BA4r 2               .ifdef CONFIG_CBM_ALL
001BA4r 2                       ldx     FAC+2
001BA4r 2                       lda     FAC+3
001BA4r 2                       sta     FAC+2
001BA4r 2                       stx     FAC+3
001BA4r 2               LDF88:
001BA4r 2               .endif
001BA4r 2  A9 00                lda     #$00
001BA6r 2  85 B5                sta     FACSIGN
001BA8r 2  A5 B0                lda     FAC
001BAAr 2  85 BF                sta     FACEXTENSION
001BACr 2  A9 80                lda     #$80
001BAEr 2  85 B0                sta     FAC
001BB0r 2  20 rr rr             jsr     NORMALIZE_FAC2
001BB3r 2  A2 DA                ldx     #<RNDSEED
001BB5r 2  A0 00                ldy     #>RNDSEED
001BB7r 2               GOMOVMF:
001BB7r 2  4C rr rr             jmp     STORE_FAC_AT_YX_ROUNDED
001BBAr 2               .endif
001BBAr 2               
001BBAr 2               .segment "CHRGET"
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               ; INITIAL VALUE FOR RANDOM NUMBER, ALSO COPIED
000018r 2               ; IN ALONG WITH CHRGET, BUT ERRONEOUSLY:
000018r 2               ; <<< THE LAST BYTE IS NOT COPIED >>>
000018r 2               ; (on all non-CONFIG_SMALL)
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               GENERIC_RNDSEED:
000018r 2               .ifndef KBD
000018r 2               ; random number seed
000018r 2                 .ifdef CONFIG_SMALL
000018r 2                       .byte   $80,$4F,$C7,$52
000018r 2                 .else
000018r 2                   .ifdef CONFIG_11
000018r 2  80 4F C7 52          .byte   $80,$4F,$C7,$52,$58
00001Cr 2  58           
00001Dr 2                   .else
00001Dr 2                       .byte   $80,$4F,$C7,$52,$59
00001Dr 2                   .endif
00001Dr 2                 .endif
00001Dr 2               .endif
00001Dr 2               GENERIC_CHRGET_END:
00001Dr 2               
00001Dr 1               .include "trig.s"
00001Dr 2               .segment "CODE"
001BBAr 2               
001BBAr 2               SIN_COS_TAN_ATN:
001BBAr 2               ; ----------------------------------------------------------------------------
001BBAr 2               ; "COS" FUNCTION
001BBAr 2               ; ----------------------------------------------------------------------------
001BBAr 2               COS:
001BBAr 2  A9 rr                lda     #<CON_PI_HALF
001BBCr 2  A0 rr                ldy     #>CON_PI_HALF
001BBEr 2  20 rr rr             jsr     FADD
001BC1r 2               
001BC1r 2               ; ----------------------------------------------------------------------------
001BC1r 2               ; "SIN" FUNCTION
001BC1r 2               ; ----------------------------------------------------------------------------
001BC1r 2               SIN:
001BC1r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001BC4r 2  A9 rr                lda     #<CON_PI_DOUB
001BC6r 2  A0 rr                ldy     #>CON_PI_DOUB
001BC8r 2  A6 BD                ldx     ARGSIGN
001BCAr 2  20 rr rr             jsr     DIV
001BCDr 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001BD0r 2  20 rr rr             jsr     INT
001BD3r 2  A9 00                lda     #$00
001BD5r 2  85 BE                sta     STRNG1
001BD7r 2  20 rr rr             jsr     FSUBT
001BDAr 2               ; ----------------------------------------------------------------------------
001BDAr 2               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
001BDAr 2               ;
001BDAr 2               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
001BDAr 2               ;
001BDAr 2               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
001BDAr 2               ; ----------------------------------------------------------------------------
001BDAr 2  A9 rr                lda     #<QUARTER
001BDCr 2  A0 rr                ldy     #>QUARTER
001BDEr 2  20 rr rr             jsr     FSUB
001BE1r 2  A5 B5                lda     FACSIGN
001BE3r 2  48                   pha
001BE4r 2  10 0D                bpl     SIN1
001BE6r 2  20 rr rr             jsr     FADDH
001BE9r 2  A5 B5                lda     FACSIGN
001BEBr 2  30 09                bmi     L3F5B
001BEDr 2  A5 64                lda     CPRMASK
001BEFr 2  49 FF                eor     #$FF
001BF1r 2  85 64                sta     CPRMASK
001BF3r 2               ; ----------------------------------------------------------------------------
001BF3r 2               ; IF FALL THRU, RANGE IS 0...1/2
001BF3r 2               ; IF BRANCH HERE, RANGE IS 0...1/4
001BF3r 2               ; ----------------------------------------------------------------------------
001BF3r 2               SIN1:
001BF3r 2  20 rr rr             jsr     NEGOP
001BF6r 2               ; ----------------------------------------------------------------------------
001BF6r 2               ; IF FALL THRU, RANGE IS -1/2...0
001BF6r 2               ; IF BRANCH HERE, RANGE IS -1/4...0
001BF6r 2               ; ----------------------------------------------------------------------------
001BF6r 2               L3F5B:
001BF6r 2  A9 rr                lda     #<QUARTER
001BF8r 2  A0 rr                ldy     #>QUARTER
001BFAr 2  20 rr rr             jsr     FADD
001BFDr 2  68                   pla
001BFEr 2  10 03                bpl     L3F68
001C00r 2  20 rr rr             jsr     NEGOP
001C03r 2               L3F68:
001C03r 2  A9 rr                lda     #<POLY_SIN
001C05r 2  A0 rr                ldy     #>POLY_SIN
001C07r 2  4C rr rr             jmp     POLYNOMIAL_ODD
001C0Ar 2               
001C0Ar 2               ; ----------------------------------------------------------------------------
001C0Ar 2               ; "TAN" FUNCTION
001C0Ar 2               ;
001C0Ar 2               ; COMPUTE TAN(X) = SIN(X) / COS(X)
001C0Ar 2               ; ----------------------------------------------------------------------------
001C0Ar 2               TAN:
001C0Ar 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001C0Dr 2  A9 00                lda     #$00
001C0Fr 2  85 64                sta     CPRMASK
001C11r 2  20 rr rr             jsr     SIN
001C14r 2  A2 9D                ldx     #TEMP3
001C16r 2  A0 00                ldy     #$00
001C18r 2  20 rr rr             jsr     GOMOVMF
001C1Br 2  A9 A6                lda     #TEMP1+(5-BYTES_FP)
001C1Dr 2  A0 00                ldy     #$00
001C1Fr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001C22r 2  A9 00                lda     #$00
001C24r 2  85 B5                sta     FACSIGN
001C26r 2  A5 64                lda     CPRMASK
001C28r 2  20 rr rr             jsr     TAN1
001C2Br 2  A9 9D                lda     #TEMP3
001C2Dr 2  A0 00                ldy     #$00
001C2Fr 2  4C rr rr             jmp     FDIV
001C32r 2               TAN1:
001C32r 2  48                   pha
001C33r 2  4C rr rr             jmp     SIN1
001C36r 2               
001C36r 2               ; ----------------------------------------------------------------------------
001C36r 2               .ifdef CONFIG_SMALL
001C36r 2               CON_PI_HALF:
001C36r 2                       .byte   $81,$49,$0F,$DB
001C36r 2               CON_PI_DOUB:
001C36r 2                       .byte   $83,$49,$0F,$DB
001C36r 2               QUARTER:
001C36r 2                       .byte   $7F,$00,$00,$00
001C36r 2               POLY_SIN:
001C36r 2                       .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
001C36r 2                       .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
001C36r 2                       .byte   $E1,$83,$49,$0F,$DB
001C36r 2               .else
001C36r 2               CON_PI_HALF:
001C36r 2  81 49 0F DA          .byte   $81,$49,$0F,$DA,$A2
001C3Ar 2  A2           
001C3Br 2               CON_PI_DOUB:
001C3Br 2  83 49 0F DA          .byte   $83,$49,$0F,$DA,$A2
001C3Fr 2  A2           
001C40r 2               QUARTER:
001C40r 2  7F 00 00 00          .byte   $7F,$00,$00,$00,$00
001C44r 2  00           
001C45r 2               POLY_SIN:
001C45r 2  05 84 E6 1A          .byte   $05,$84,$E6,$1A,$2D,$1B,$86,$28
001C49r 2  2D 1B 86 28  
001C4Dr 2  07 FB F8 87          .byte   $07,$FB,$F8,$87,$99,$68,$89,$01
001C51r 2  99 68 89 01  
001C55r 2  87 23 35 DF          .byte   $87,$23,$35,$DF,$E1,$86,$A5,$5D
001C59r 2  E1 86 A5 5D  
001C5Dr 2  E7 28 83 49          .byte   $E7,$28,$83,$49,$0F,$DA,$A2
001C61r 2  0F DA A2     
001C64r 2                 .ifndef CONFIG_11
001C64r 2               ; no easter egg text before BASIC 1.1
001C64r 2                 .elseif !.def(CONFIG_2A)
001C64r 2               ; ASCII encoded easter egg
001C64r 2               MICROSOFT:
001C64r 2  A6 D3 C1 C8          .byte   $A6,$D3,$C1,$C8,$D4,$C8,$D5,$C4
001C68r 2  D4 C8 D5 C4  
001C6Cr 2  CE CA                .byte   $CE,$CA
001C6Er 2                 .else
001C6Er 2               ; PET encoded easter egg text since CBM2
001C6Er 2               MICROSOFT:
001C6Er 2                       .byte   $A1,$54,$46,$8F,$13,$8F,$52,$43
001C6Er 2                       .byte   $89,$CD
001C6Er 2                 .endif
001C6Er 2               .endif
001C6Er 2               
001C6Er 2               ; ----------------------------------------------------------------------------
001C6Er 2               ; "ATN" FUNCTION
001C6Er 2               ; ----------------------------------------------------------------------------
001C6Er 2               ATN:
001C6Er 2  A5 B5                lda     FACSIGN
001C70r 2  48                   pha
001C71r 2  10 03                bpl     L3FDB
001C73r 2  20 rr rr             jsr     NEGOP
001C76r 2               L3FDB:
001C76r 2  A5 B0                lda     FAC
001C78r 2  48                   pha
001C79r 2  C9 81                cmp     #$81
001C7Br 2  90 07                bcc     L3FE9
001C7Dr 2  A9 rr                lda     #<CON_ONE
001C7Fr 2  A0 rr                ldy     #>CON_ONE
001C81r 2  20 rr rr             jsr     FDIV
001C84r 2               ; ----------------------------------------------------------------------------
001C84r 2               ; 0 <= X <= 1
001C84r 2               ; 0 <= ATN(X) <= PI/8
001C84r 2               ; ----------------------------------------------------------------------------
001C84r 2               L3FE9:
001C84r 2  A9 rr                lda     #<POLY_ATN
001C86r 2  A0 rr                ldy     #>POLY_ATN
001C88r 2  20 rr rr             jsr     POLYNOMIAL_ODD
001C8Br 2  68                   pla
001C8Cr 2  C9 81                cmp     #$81
001C8Er 2  90 07                bcc     L3FFC
001C90r 2  A9 rr                lda     #<CON_PI_HALF
001C92r 2  A0 rr                ldy     #>CON_PI_HALF
001C94r 2  20 rr rr             jsr     FSUB
001C97r 2               L3FFC:
001C97r 2  68                   pla
001C98r 2  10 03                bpl     L4002
001C9Ar 2  4C rr rr             jmp     NEGOP
001C9Dr 2               L4002:
001C9Dr 2  60                   rts
001C9Er 2               
001C9Er 2               ; ----------------------------------------------------------------------------
001C9Er 2               POLY_ATN:
001C9Er 2               .ifdef CONFIG_SMALL
001C9Er 2                       .byte   $08
001C9Er 2               		.byte	$78,$3A,$C5,$37
001C9Er 2               		.byte	$7B,$83,$A2,$5C
001C9Er 2               		.byte	$7C,$2E,$DD,$4D
001C9Er 2               		.byte	$7D,$99,$B0,$1E
001C9Er 2               		.byte	$7D,$59,$ED,$24
001C9Er 2               		.byte	$7E,$91,$72,$00
001C9Er 2               		.byte	$7E,$4C,$B9,$73
001C9Er 2               		.byte	$7F,$AA,$AA,$53
001C9Er 2               		.byte	$81,$00,$00,$00
001C9Er 2               .else
001C9Er 2  0B                   .byte   $0B
001C9Fr 2  76 B3 83 BD  		.byte	$76,$B3,$83,$BD,$D3
001CA3r 2  D3           
001CA4r 2  79 1E F4 A6  		.byte	$79,$1E,$F4,$A6,$F5
001CA8r 2  F5           
001CA9r 2  7B 83 FC B0  		.byte	$7B,$83,$FC,$B0,$10
001CADr 2  10           
001CAEr 2  7C 0C 1F 67          .byte   $7C,$0C,$1F,$67,$CA
001CB2r 2  CA           
001CB3r 2  7C DE 53 CB  		.byte	$7C,$DE,$53,$CB,$C1
001CB7r 2  C1           
001CB8r 2  7D 14 64 70  		.byte	$7D,$14,$64,$70,$4C
001CBCr 2  4C           
001CBDr 2  7D B7 EA 51  		.byte	$7D,$B7,$EA,$51,$7A
001CC1r 2  7A           
001CC2r 2  7D 63 30 88  		.byte	$7D,$63,$30,$88,$7E
001CC6r 2  7E           
001CC7r 2  7E 92 44 99  		.byte	$7E,$92,$44,$99,$3A
001CCBr 2  3A           
001CCCr 2  7E 4C CC 91  		.byte	$7E,$4C,$CC,$91,$C7
001CD0r 2  C7           
001CD1r 2  7F AA AA AA  		.byte	$7F,$AA,$AA,$AA,$13
001CD5r 2  13           
001CD6r 2  81 00 00 00          .byte   $81,$00,$00,$00,$00
001CDAr 2  00           
001CDBr 2               .endif
001CDBr 2               
001CDBr 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
001CDBr 2  00           		.byte	$00 ; XXX
001CDCr 2               .endif
001CDCr 2               
001CDCr 1               .include "init.s"
001CDCr 2               .segment "INIT"
000000r 2               
000000r 2               .ifdef KBD
000000r 2               FNDLIN2:
000000r 2                       php
000000r 2                       jmp     FNDLIN
000000r 2               .endif
000000r 2               
000000r 2               ; ----------------------------------------------------------------------------
000000r 2               PR_WRITTEN_BY:
000000r 2               .ifndef KBD
000000r 2                 .ifndef CONFIG_CBM_ALL
000000r 2  A9 rr                lda     #<QT_WRITTEN_BY
000002r 2  A0 rr                ldy     #>QT_WRITTEN_BY
000004r 2  20 rr rr             jsr     STROUT
000007r 2                 .endif
000007r 2               .endif
000007r 2               COLD_START:
000007r 2               .ifdef KBD
000007r 2                       lda     #<LFD81
000007r 2                       sta     $03A0
000007r 2                       lda     #>LFD81
000007r 2                       sta     $03A1
000007r 2                       lda     #$20
000007r 2                       sta     $0480
000007r 2                       lda     $0352
000007r 2                       sta     $04
000007r 2                       lda     $0353
000007r 2                       sta     $05
000007r 2               .else
000007r 2                 .ifndef CBM2
000007r 2  A2 FF                ldx     #$FF
000009r 2  86 89                stx     CURLIN+1
00000Br 2                 .endif
00000Br 2                 .ifdef CONFIG_NO_INPUTBUFFER_ZP
00000Br 2                       ldx     #$FB
00000Br 2                 .endif
00000Br 2  9A                   txs
00000Cr 2                 .ifndef CONFIG_CBM_ALL
00000Cr 2  A9 rr                lda     #<COLD_START
00000Er 2  A0 rr                ldy     #>COLD_START
000010r 2  85 01                sta     GORESTART+1
000012r 2  84 02                sty     GORESTART+2
000014r 2  85 04                sta     GOSTROUT+1
000016r 2  84 05                sty     GOSTROUT+2
000018r 2  A9 rr                lda     #<AYINT
00001Ar 2  A0 rr                ldy     #>AYINT
00001Cr 2  85 06                sta     GOAYINT
00001Er 2  84 07                sty     GOAYINT+1
000020r 2  A9 rr                lda     #<GIVAYF
000022r 2  A0 rr                ldy     #>GIVAYF
000024r 2  85 08                sta     GOGIVEAYF
000026r 2  84 09                sty     GOGIVEAYF+1
000028r 2                 .endif
000028r 2  A9 4C                lda     #$4C
00002Ar 2                 .ifdef CONFIG_CBM_ALL
00002Ar 2                       sta     JMPADRS
00002Ar 2                 .endif
00002Ar 2  85 00                sta     GORESTART
00002Cr 2                 .ifndef CONFIG_CBM_ALL
00002Cr 2  85 03                sta     GOSTROUT
00002Er 2  85 A3                sta     JMPADRS
000030r 2                 .endif
000030r 2                 .if (!.def(CONFIG_RAM)) && (!.def(CONFIG_CBM_ALL))
000030r 2  85 0A                sta     USR
000032r 2                 .endif
000032r 2               
000032r 2                 .ifndef CONFIG_RAM
000032r 2                   .ifdef APPLE
000032r 2                         lda     #<USR_FUNC
000032r 2                         ldy     #>USR_FUNC
000032r 2                   .else
000032r 2  A9 rr                  lda     #<IQERR
000034r 2  A0 rr                  ldy     #>IQERR
000036r 2                   .endif
000036r 2  85 0B                  sta     USR+1
000038r 2  84 0C                  sty     USR+2
00003Ar 2                 .endif
00003Ar 2                 .ifndef CBM1
00003Ar 2  A9 48                lda     #WIDTH
00003Cr 2  85 0F                sta     Z17
00003Er 2  A9 38                lda     #WIDTH2
000040r 2  85 10                sta     Z18
000042r 2                 .endif
000042r 2               .endif
000042r 2               
000042r 2               ; All non-CONFIG_SMALL versions of BASIC have
000042r 2               ; the same bug here: While the number of bytes
000042r 2               ; to be copied is correct for CONFIG_SMALL,
000042r 2               ; it is one byte short on non-CONFIG_SMALL:
000042r 2               ; It seems the "ldx" value below has been
000042r 2               ; hardcoded. So on these configurations,
000042r 2               ; the last byte of GENERIC_RNDSEED, which
000042r 2               ; is 5 bytes instead of 4, does not get copied -
000042r 2               ; which is nothing major, because it is just
000042r 2               ; the least significant 8 bits of the mantissa
000042r 2               ; of the random number seed.
000042r 2               ; KBD added three bytes to CHRGET and removed
000042r 2               ; the random number seed, but only adjusted
000042r 2               ; the number of bytes by adding 3 - this
000042r 2               ; copies four bytes too many, which is no
000042r 2               ; problem.
000042r 2               .ifdef CONFIG_SMALL
000042r 2                 .ifdef KBD
000042r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET+4
000042r 2                 .else
000042r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
000042r 2                 .endif
000042r 2               .else
000042r 2  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET-1 ; XXX
000044r 2               .endif
000044r 2               L4098:
000044r 2  BD rr rr             lda     GENERIC_CHRGET-1,x
000047r 2  95 C1                sta     CHRGET-1,x
000049r 2  CA                   dex
00004Ar 2  D0 F8                bne     L4098
00004Cr 2               .ifdef CONFIG_2
00004Cr 2                       lda     #$03
00004Cr 2                       sta     DSCLEN
00004Cr 2               .endif
00004Cr 2               .ifndef KBD
00004Cr 2  8A                   txa
00004Dr 2  85 B7                sta     SHIFTSIGNEXT
00004Fr 2                 .ifdef CONFIG_CBM_ALL
00004Fr 2                       sta     CURDVC
00004Fr 2                 .endif
00004Fr 2  85 67                sta     LASTPT+1
000051r 2                 .if .defined(CONFIG_NULL) || .defined(CONFIG_PRINTNULLS)
000051r 2  85 0D                sta     Z15
000053r 2                 .endif
000053r 2                 .ifndef CONFIG_11
000053r 2                       sta     POSX
000053r 2                 .endif
000053r 2  48                   pha
000054r 2  85 65                sta     Z14
000056r 2                 .ifndef CBM2
000056r 2                   .ifndef MICROTAN
000056r 2  A9 03                lda     #$03
000058r 2  85 A2                sta     DSCLEN
00005Ar 2                   .endif
00005Ar 2                   .ifndef CONFIG_11
00005Ar 2                       lda     #$2C
00005Ar 2                       sta     LINNUM+1
00005Ar 2                   .endif
00005Ar 2  20 rr rr             jsr     CRDO
00005Dr 2                 .endif
00005Dr 2                 .ifdef CBM2
00005Dr 2                       inx
00005Dr 2                       stx     INPUTBUFFER-3
00005Dr 2                       stx     INPUTBUFFER-4
00005Dr 2                 .endif
00005Dr 2                 .ifdef APPLE
00005Dr 2                       lda     #$01
00005Dr 2                       sta     INPUTBUFFER-3
00005Dr 2                       sta     INPUTBUFFER-4
00005Dr 2                 .endif
00005Dr 2  A2 68                ldx     #TEMPST
00005Fr 2  86 65                stx     TEMPPT
000061r 2               .ifndef CONFIG_CBM_ALL
000061r 2  A9 rr                lda     #<QT_MEMORY_SIZE
000063r 2  A0 rr                ldy     #>QT_MEMORY_SIZE
000065r 2  20 rr rr             jsr     STROUT
000068r 2                 .ifdef APPLE
000068r 2                       jsr     INLINX
000068r 2                 .else
000068r 2  20 rr rr             jsr     NXIN
00006Br 2                 .endif
00006Br 2  86 C9                stx     TXTPTR
00006Dr 2  84 CA                sty     TXTPTR+1
00006Fr 2  20 C2 00             jsr     CHRGET
000072r 2  C9 41                cmp     #$41
000074r 2  F0 8A                beq     PR_WRITTEN_BY
000076r 2  A8                   tay
000077r 2  D0 21                bne     L40EE
000079r 2               .endif
000079r 2               .ifndef CBM2
000079r 2  A9 00                lda     #<RAMSTART2
00007Br 2               .endif
00007Br 2  A0 03                ldy     #>RAMSTART2
00007Dr 2               .ifdef CONFIG_2
00007Dr 2                       sta     TXTTAB
00007Dr 2                       sty     TXTTAB+1
00007Dr 2               .endif
00007Dr 2  85 11                sta     LINNUM
00007Fr 2  84 12                sty     LINNUM+1
000081r 2               .ifdef CBM2
000081r 2               		tay
000081r 2               .else
000081r 2  A0 00                ldy     #$00
000083r 2               .endif
000083r 2               L40D7:
000083r 2  E6 11                inc     LINNUM
000085r 2  D0 02                bne     L40DD
000087r 2  E6 12                inc     LINNUM+1
000089r 2               .ifdef CBM1
000089r 2               ; CBM: hard RAM top limit is $8000
000089r 2                       lda     LINNUM+1
000089r 2                       cmp     #$80
000089r 2                       beq     L40FA
000089r 2               .endif
000089r 2               .ifdef CBM2
000089r 2               ; optimized version of the CBM1 code
000089r 2                       bmi     L40FA
000089r 2               .endif
000089r 2               L40DD:
000089r 2               .ifdef CONFIG_2
000089r 2                       lda     #$55 ; 01010101 / 10101010
000089r 2               .else
000089r 2  A9 92                lda     #$92 ; 10010010 / 00100100
00008Br 2               .endif
00008Br 2  91 11                sta     (LINNUM),y
00008Dr 2  D1 11                cmp     (LINNUM),y
00008Fr 2  D0 15                bne     L40FA
000091r 2  0A                   asl     a
000092r 2  91 11                sta     (LINNUM),y
000094r 2  D1 11                cmp     (LINNUM),y
000096r 2               .ifdef CONFIG_CBM_ALL
000096r 2                       beq     L40D7
000096r 2               .else
000096r 2                 .ifndef CONFIG_11
000096r 2                       beq     L40D7; old: faster
000096r 2                       bne     L40FA
000096r 2                 .else
000096r 2  D0 0E                bne     L40FA; new: slower
000098r 2  F0 E9                beq     L40D7
00009Ar 2                 .endif
00009Ar 2               L40EE:
00009Ar 2  20 C8 00             jsr     CHRGOT
00009Dr 2  20 rr rr             jsr     LINGET
0000A0r 2  A8                   tay
0000A1r 2  F0 03                beq     L40FA
0000A3r 2  4C rr rr             jmp     SYNERR
0000A6r 2               .endif
0000A6r 2               L40FA:
0000A6r 2  A5 11                lda     LINNUM
0000A8r 2  A4 12                ldy     LINNUM+1
0000AAr 2  85 86                sta     MEMSIZ
0000ACr 2  84 87                sty     MEMSIZ+1
0000AEr 2               .ifndef MICROTAN
0000AEr 2  85 82                sta     FRETOP
0000B0r 2  84 83                sty     FRETOP+1
0000B2r 2               .endif
0000B2r 2               L4106:
0000B2r 2               .ifndef CONFIG_CBM_ALL
0000B2r 2                 .ifdef APPLE
0000B2r 2                       lda     #$FF
0000B2r 2                       jmp     L2829
0000B2r 2                       .word	STROUT ; PATCH!
0000B2r 2                       jsr     NXIN
0000B2r 2                 .else
0000B2r 2  A9 rr                lda     #<QT_TERMINAL_WIDTH
0000B4r 2  A0 rr                ldy     #>QT_TERMINAL_WIDTH
0000B6r 2  20 rr rr             jsr     STROUT
0000B9r 2  20 rr rr             jsr     NXIN
0000BCr 2                 .endif
0000BCr 2  86 C9                stx     TXTPTR
0000BEr 2  84 CA                sty     TXTPTR+1
0000C0r 2  20 C2 00             jsr     CHRGET
0000C3r 2  A8                   tay
0000C4r 2  F0 1C                beq     L4136
0000C6r 2  20 rr rr             jsr     LINGET
0000C9r 2  A5 12                lda     LINNUM+1
0000CBr 2  D0 E5                bne     L4106
0000CDr 2  A5 11                lda     LINNUM
0000CFr 2  C9 10                cmp     #$10
0000D1r 2  90 DF                bcc     L4106
0000D3r 2               L2829:
0000D3r 2  85 0F                sta     Z17
0000D5r 2               L4129:
0000D5r 2  E9 0E                sbc     #$0E
0000D7r 2  B0 FC                bcs     L4129
0000D9r 2  49 FF                eor     #$FF
0000DBr 2  E9 0C                sbc     #$0C
0000DDr 2  18                   clc
0000DEr 2  65 0F                adc     Z17
0000E0r 2  85 10                sta     Z18
0000E2r 2               .endif
0000E2r 2               L4136:
0000E2r 2               .ifdef CONFIG_RAM
0000E2r 2                       lda     #<QT_WANT
0000E2r 2                       ldy     #>QT_WANT
0000E2r 2                       jsr     STROUT
0000E2r 2                       jsr     NXIN
0000E2r 2                       stx     TXTPTR
0000E2r 2                       sty     TXTPTR+1
0000E2r 2                       jsr     CHRGET
0000E2r 2                       ldx     #<RAMSTART1
0000E2r 2                       ldy     #>RAMSTART1
0000E2r 2                       cmp     #'Y'
0000E2r 2                       beq     L4183
0000E2r 2                       cmp     #'A'
0000E2r 2                       beq     L4157
0000E2r 2                       cmp     #'N'
0000E2r 2                       bne     L4136
0000E2r 2               L4157:
0000E2r 2                       ldx     #<IQERR
0000E2r 2                       ldy     #>IQERR
0000E2r 2                       stx     UNFNC_ATN
0000E2r 2                       sty     UNFNC_ATN+1
0000E2r 2                       ldx     #<ATN	; overwrite starting
0000E2r 2                       ldy     #>ATN	; with ATN
0000E2r 2                       cmp     #'A'
0000E2r 2                       beq     L4183
0000E2r 2                       ldx     #<IQERR
0000E2r 2                       ldy     #>IQERR
0000E2r 2                       stx     UNFNC_COS
0000E2r 2                       sty     UNFNC_COS+1
0000E2r 2                       stx     UNFNC_TAN
0000E2r 2                       sty     UNFNC_TAN+1
0000E2r 2                       stx     UNFNC_SIN
0000E2r 2                       sty     UNFNC_SIN+1
0000E2r 2                       ldx     #<SIN_COS_TAN_ATN	; overwrite
0000E2r 2                       ldy     #>SIN_COS_TAN_ATN	; all of trig.s
0000E2r 2               L4183:
0000E2r 2               .else
0000E2r 2  A2 00                ldx     #<RAMSTART2
0000E4r 2  A0 03                ldy     #>RAMSTART2
0000E6r 2               .endif
0000E6r 2  86 7A                stx     TXTTAB
0000E8r 2  84 7B                sty     TXTTAB+1
0000EAr 2  A0 00                ldy     #$00
0000ECr 2  98                   tya
0000EDr 2  91 7A                sta     (TXTTAB),y
0000EFr 2  E6 7A                inc     TXTTAB
0000F1r 2               .ifndef CBM2
0000F1r 2  D0 02                bne     L4192
0000F3r 2  E6 7B                inc     TXTTAB+1
0000F5r 2               L4192:
0000F5r 2               .endif
0000F5r 2               .if CONFIG_SCRTCH_ORDER = 1
0000F5r 2                       jsr     SCRTCH
0000F5r 2               .endif
0000F5r 2  A5 7A                lda     TXTTAB
0000F7r 2  A4 7B                ldy     TXTTAB+1
0000F9r 2  20 rr rr             jsr     REASON
0000FCr 2               .ifdef CBM2
0000FCr 2                       lda     #<QT_BASIC
0000FCr 2                       ldy     #>QT_BASIC
0000FCr 2                       jsr     STROUT
0000FCr 2               .else
0000FCr 2  20 rr rr             jsr     CRDO
0000FFr 2               .endif
0000FFr 2  A5 86                lda     MEMSIZ
000101r 2  38                   sec
000102r 2  E5 7A                sbc     TXTTAB
000104r 2  AA                   tax
000105r 2  A5 87                lda     MEMSIZ+1
000107r 2  E5 7B                sbc     TXTTAB+1
000109r 2  20 rr rr             jsr     LINPRT
00010Cr 2  A9 rr                lda     #<QT_BYTES_FREE
00010Er 2  A0 rr                ldy     #>QT_BYTES_FREE
000110r 2  20 rr rr             jsr     STROUT
000113r 2               .if CONFIG_SCRTCH_ORDER = 2
000113r 2                       jsr     SCRTCH
000113r 2               .endif
000113r 2               .ifdef CONFIG_CBM_ALL
000113r 2                       jmp     RESTART
000113r 2               .else
000113r 2  A9 rr                lda     #<STROUT
000115r 2  A0 rr                ldy     #>STROUT
000117r 2  85 04                sta     GOSTROUT+1
000119r 2  84 05                sty     GOSTROUT+2
00011Br 2                 .if CONFIG_SCRTCH_ORDER = 3
00011Br 2  20 rr rr              jsr     SCRTCH
00011Er 2                 .endif
00011Er 2  A9 rr                lda     #<RESTART
000120r 2  A0 rr                ldy     #>RESTART
000122r 2  85 01                sta     GORESTART+1
000124r 2  84 02                sty     GORESTART+2
000126r 2  6C 01 00             jmp     (GORESTART+1)
000129r 2               .endif
000129r 2               
000129r 2                 .if .def(CONFIG_RAM) || .def(OSI)
000129r 2               ; OSI is compiled for ROM, but includes
000129r 2               ; this unused string
000129r 2               QT_WANT:
000129r 2  57 41 4E 54          .byte   "WANT SIN-COS-TAN-ATN"
00012Dr 2  20 53 49 4E  
000131r 2  2D 43 4F 53  
00013Dr 2  00                   .byte   0
00013Er 2                 .endif
00013Er 2               QT_WRITTEN_BY:
00013Er 2                 .ifndef CONFIG_CBM_ALL
00013Er 2                   .ifdef APPLE
00013Er 2               		asc80 "COPYRIGHT 1977 BY MICROSOFT CO"
00013Er 2               		.byte	CR,0
00013Er 2                   .else
00013Er 2  0D 0A 0C             .byte   CR,LF,$0C ; FORM FEED
000141r 2                     .ifndef CONFIG_11
000141r 2                       .byte   "WRITTEN BY RICHARD W. WEILAND."
000141r 2               
000141r 2                     .endif
000141r 2  0D 0A 00             .byte   CR,LF,0
000144r 2                   .endif
000144r 2               QT_MEMORY_SIZE:
000144r 2  4D 45 4D 4F          .byte   "MEMORY SIZE"
000148r 2  52 59 20 53  
00014Cr 2  49 5A 45     
00014Fr 2  00                   .byte   0
000150r 2               QT_TERMINAL_WIDTH:
000150r 2  54 45 52 4D          .byte   "TERMINAL WIDTH"
000154r 2  49 4E 41 4C  
000158r 2  20 57 49 44  
00015Er 2  00                   .byte   0
00015Fr 2                 .endif
00015Fr 2               QT_BYTES_FREE:
00015Fr 2  20 42 59 54          .byte   " BYTES FREE"
000163r 2  45 53 20 46  
000167r 2  52 45 45     
00016Ar 2                 .ifdef CBM1
00016Ar 2                 .elseif .def(CBM2)
00016Ar 2                       .byte   CR,0
00016Ar 2                 .elseif .def(APPLE)
00016Ar 2                       .byte   0
00016Ar 2                 .else
00016Ar 2  0D 0A 0D 0A          .byte   CR,LF,CR,LF
00016Er 2                 .endif
00016Er 2               QT_BASIC:
00016Er 2                 .ifdef OSI
00016Er 2  2A 2A 20 5A          .byte   "** Zebra MSBASIC **"
000172r 2  65 62 72 61  
000176r 2  20 4D 53 42  
000181r 2                 .endif
000181r 2                 .ifdef KIM
000181r 2                       .byte   "MOS TECH 6502 BASIC V1.1"
000181r 2                 .endif
000181r 2                 .ifdef MICROTAN
000181r 2                       .byte   "MICROTAN BASIC"
000181r 2                 .endif
000181r 2                 .ifdef CBM1
000181r 2                       .byte   $13 ; HOME
000181r 2                       .byte   "*** COMMODORE BASIC ***"
000181r 2                       .byte   $11,$11,$11,0 ; DOWN/DOWN/DOWN
000181r 2                 .endif
000181r 2                 .ifdef CBM2
000181r 2                       .byte   "### COMMODORE BASIC ###"
000181r 2                       .byte   CR,CR,0
000181r 2                 .endif
000181r 2                 .ifdef APPLE
000181r 2                       .byte   LF,CR,LF
000181r 2               		.byte	"APPLE BASIC V1.1"
000181r 2                 .endif
000181r 2                 .ifndef CONFIG_CBM_ALL
000181r 2  0D 0A                .byte   CR,LF
000183r 2                   .ifdef MICROTAN
000183r 2                       .byte   "(C) 1980 MICROSOFT"
000183r 2                   .else
000183r 2  28 43 29 20          .byte   "(C) 1980 MICROSOFT"
000187r 2  31 39 38 30  
00018Br 2  20 4D 49 43  
000195r 2                   .endif
000195r 2  0D 00                .byte   CR,0
000197r 2                 .endif
000197r 2               .endif
000197r 2               
000197r 1               .include "extra.s"
000197r 2               .segment "EXTRA"
000000r 2               
000000r 2               .ifdef KIM
000000r 2               .include "kim_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_CBM1_PATCHES
000000r 2               .include "cbm1_patches.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef KBD
000000r 2               .include "kbd_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef OSI
000000r 2               .include "osi_extra.s"
000000r 3               .segment "EXTRA"
000000r 3               
000000r 3               .include "CFFA1_API.s"
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ; CFFA1_API.s  Version 1.0 - 05/22/2007
000000r 4               ;
000000r 4               ; Equates for calling the CFFA1 API -- Firmware version 1.0 ($01)
000000r 4               ;------------------------------------------------------------------------------
000000r 4               
000000r 4               CFFA1_ID1           = $AFDC   ; contains $CF when CFFA1 card is present
000000r 4               CFFA1_ID2           = $AFDD   ; contains $FA when CFFA1 card is present
000000r 4               
000000r 4               FirmwareVersion     = $01
000000r 4               
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ; Entry points to the CFFA1 firmware:
000000r 4               ;
000000r 4               ; MenuExitToMonitor
000000r 4               ;   JMP here to display the CFFA1 menu.
000000r 4               ;   Quit puts the user into the monitor.
000000r 4               ;
000000r 4               ; MenuExitToBASIC
000000r 4               ;   JMP here to display the CFFA1 menu.
000000r 4               ;   Quit puts the user into BASIC.
000000r 4               ;
000000r 4               ; Menu
000000r 4               ;   JSR here to display the CFFA1 menu.
000000r 4               ;   Quit returns control to your code.
000000r 4               ;
000000r 4               ; CFBlockDriver
000000r 4               ;   JSR here to read or write a block, after setting up pdCommandCode
000000r 4               ;   and other inputs (see below).
000000r 4               ;   Result:  CLC, A = 0
000000r 4               ;            SEC, A = error code
000000r 4               ;
000000r 4               ; CFFA1_API
000000r 4               ;   JSR here to call one of many functions provided by the firmware.
000000r 4               ;   See "Function selectors for CFFA1_API" below.
000000r 4               ;
000000r 4               ;------------------------------------------------------------------------------
000000r 4               MenuExitToMonitor   = $9000
000000r 4               MenuExitToBASIC     = $9003
000000r 4               Menu                = $9006
000000r 4               CFBlockDriver       = $9009
000000r 4               CFFA1_API           = $900C
000000r 4               
000000r 4               
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ; Inputs for CFBlockDriver - ProDOS block interface locations
000000r 4               ;------------------------------------------------------------------------------
000000r 4               pdCommandCode       = $42     ; see below
000000r 4               pdUnitNumber        = $43     ; always set this to 0 for firmware 1.0
000000r 4               pdIOBufferLow       = $44
000000r 4               pdIOBufferHigh      = $45
000000r 4               pdBlockNumberLow    = $46
000000r 4               pdBlockNumberHigh   = $47
000000r 4               
000000r 4               ;
000000r 4               ; Values for pdCommandCode
000000r 4               ;
000000r 4               PRODOS_STATUS       = $00
000000r 4               PRODOS_READ         = $01
000000r 4               PRODOS_WRITE        = $02
000000r 4               PRODOS_FORMAT       = $03
000000r 4               
000000r 4               
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ; Function selectors for CFFA1_API.
000000r 4               ;
000000r 4               ; Load one of these values into X:
000000r 4               ;
000000r 4               ;    ldx #CFFA1_xxxxx
000000r 4               ;    jsr API
000000r 4               ;
000000r 4               ; Result:  CLC, A = 0
000000r 4               ;          SEC, A = error code
000000r 4               ;
000000r 4               ; Certain functions have additional outputs, as described below.
000000r 4               ;
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ;
000000r 4               ; CFFA1_Version:
000000r 4               ;   Output: X = current firmware version
000000r 4               ;           Y = oldest compatible firmware version
000000r 4               ;
000000r 4               ; CFFA1_Menu:
000000r 4               ;   Result: Runs the CFFA1 menu and returns when the user chooses Quit.
000000r 4               ;
000000r 4               ; CFFA1_DisplayError:
000000r 4               ;   Input:  A = an error code
000000r 4               ;   Result: Prints out a carriage return, the 2-digit hex error code,
000000r 4               ;           and a description of that error, if available.
000000r 4               ;
000000r 4               ; CFFA1_OpenDir:
000000r 4               ;   Input:  None (operates on the current prefix directory)
000000r 4               ;   Result: Prepares for one or more calls to ReadDir.
000000r 4               ;
000000r 4               ; CFFA1_ReadDir:
000000r 4               ;   Setup:  You have to call OpenDir before calling ReadDir.
000000r 4               ;   Result: If no error, EntryPtr points to the next occupied directory entry.
000000r 4               ;
000000r 4               ; CFFA1_FindDirEntry:
000000r 4               ;   Input:   Filename = name to search for
000000r 4               ;   Result:  If no error, EntryPtr points at the found item's directory entry.
000000r 4               ;
000000r 4               ; CFFA1_WriteFile:
000000r 4               ;   Input:  Filename = name for new file (will be replaced if it already exists)
000000r 4               ;           Destination = starting address
000000r 4               ;           FileSize = number of bytes to write
000000r 4               ;           Filetype = type for new file
000000r 4               ;           Auxtype = auxiliary type for new file
000000r 4               ;
000000r 4               ; CFFA1_ReadFile:
000000r 4               ;   Input:  Filename = file to read into memory
000000r 4               ;           Destination = starting address ($0000 to use the file's Auxtype value)
000000r 4               ;
000000r 4               ; CFFA1_SaveBASICFile:
000000r 4               ;   Input:  Filename
000000r 4               ;
000000r 4               ; CFFA1_LoadBASICFile:
000000r 4               ;   Input:  Filename
000000r 4               ;
000000r 4               ; CFFA1_Rename:
000000r 4               ;   Input:  OldFilename = original name
000000r 4               ;           Filename = new name
000000r 4               ;
000000r 4               ; CFFA1_Delete:
000000r 4               ;   Input:  Filename = file or empty directory to delete
000000r 4               ;
000000r 4               ; CFFA1_NewDirectoryAtRoot:
000000r 4               ;   Input:  Filename = name for new directory
000000r 4               ;
000000r 4               ; CFFA1_FormatDrive:
000000r 4               ;   Input:  Filename = name for new volume
000000r 4               ;           A = drive number (always set to 0 for firmware 1.0)
000000r 4               ;           Y = $77 (just to help avoid accidental formatting)
000000r 4               ;   Result: Disk volume is erased and given the specified name.
000000r 4               ;
000000r 4               ;------------------------------------------------------------------------------
000000r 4               CFFA1_Version            = $00
000000r 4               CFFA1_Menu               = $02
000000r 4               CFFA1_DisplayError       = $04
000000r 4               
000000r 4               CFFA1_OpenDir            = $10
000000r 4               CFFA1_ReadDir            = $12
000000r 4               CFFA1_FindDirEntry       = $14
000000r 4               
000000r 4               CFFA1_WriteFile          = $20
000000r 4               CFFA1_ReadFile           = $22
000000r 4               CFFA1_SaveBASICFile      = $24
000000r 4               CFFA1_LoadBASICFile      = $26
000000r 4               CFFA1_Rename             = $28
000000r 4               CFFA1_Delete             = $2A
000000r 4               CFFA1_NewDirectoryAtRoot = $2C
000000r 4               CFFA1_FormatDrive        = $2E
000000r 4               
000000r 4               
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ; Zero-page inputs and results for API functions
000000r 4               ;
000000r 4               ; Filename and OldFilename point to strings that begin with a length byte (from
000000r 4               ; 1 to 15), and each character must have its high bit off.  For example:
000000r 4               ;
000000r 4               ;    Filename   = $80     $280: 05  48  45  4C  4C  4F
000000r 4               ;    Filename+1 = $02              'H'  'E' 'L' 'L' 'O'
000000r 4               ;------------------------------------------------------------------------------
000000r 4               Destination         = $00                   ; 2 bytes
000000r 4               Filename            = Destination+2         ; 2 bytes
000000r 4               OldFilename         = Filename+2            ; 2 bytes
000000r 4               Filetype            = OldFilename+2         ; 1 byte
000000r 4               Auxtype             = Filetype+1            ; 2 bytes
000000r 4               FileSize            = Auxtype+2             ; 2 bytes
000000r 4               EntryPtr            = FileSize+2            ; 2 bytes
000000r 4               
000000r 4               
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ;
000000r 4               ; ProDOS low-level return codes
000000r 4               ;
000000r 4               ;------------------------------------------------------------------------------
000000r 4               PRODOS_NO_ERROR      = $00    ; No error
000000r 4               PRODOS_BADCMD        = $01    ; Bad Command (not implemented)
000000r 4               PRODOS_IO_ERROR      = $27    ; I/O error
000000r 4               PRODOS_NO_DEVICE     = $28    ; No Device Connected
000000r 4               PRODOS_WRITE_PROTECT = $2B    ; Write Protected
000000r 4               PRODOS_BADBLOCK      = $2D    ; Invalid block number requested
000000r 4               PRODOS_OFFLINE       = $2F    ; Device off-line
000000r 4               ;
000000r 4               ; High-level return codes
000000r 4               ;
000000r 4               eBadPathSyntax       = $40
000000r 4               eDirNotFound         = $44
000000r 4               eFileNotFound        = $46
000000r 4               eDuplicateFile       = $47
000000r 4               eVolumeFull          = $48
000000r 4               eDirectoryFull       = $49
000000r 4               eFileFormat          = $4A
000000r 4               eBadStrgType         = $4B
000000r 4               eFileLocked          = $4E
000000r 4               eNotProDOS           = $52
000000r 4               eBadBufferAddr       = $56
000000r 4               eBakedBitmap         = $5A
000000r 4               eUnknownBASICFormat  = $FE
000000r 4               eUnimplemented       = $FF
000000r 4               
000000r 4               
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ; ProDOS directory entry structure offsets
000000r 4               ;------------------------------------------------------------------------------
000000r 4               oFiletype           = $10
000000r 4               oKeyBlock           = $11
000000r 4               oBlockCount         = $13
000000r 4               oFileSize           = $15
000000r 4               oCreateDateTime     = $18
000000r 4               oVersion            = $1C
000000r 4               oMinVersion         = $1D
000000r 4               oAccess             = $1E
000000r 4               oAuxtype            = $1F
000000r 4               oModDateTime        = $21
000000r 4               oHeaderPointer      = $25
000000r 4               
000000r 4               oDirLinkPrevious    = $00
000000r 4               oDirLinkNext        = $02
000000r 4               oVolStorageType     = $04
000000r 4               oVolVersion         = $20
000000r 4               oVolAccess          = $22
000000r 4               oVolEntryLength     = $23
000000r 4               oVolEntriesPerBlock = $24
000000r 4               oVolFileCount       = $25
000000r 4               oVolBitmapNumber    = $27
000000r 4               oVolTotalBlocks     = $29
000000r 4               
000000r 4               ;
000000r 4               ; ProDOS Storage types
000000r 4               ;
000000r 4               kSeedling           = $10
000000r 4               kSapling            = $20
000000r 4               kTree               = $30
000000r 4               kExtended           = $50
000000r 4               kDirectory          = $D0
000000r 4               kSubdirHeader       = $E0
000000r 4               kVolume             = $F0
000000r 4               kStorageTypeMask    = $F0
000000r 4               
000000r 4               ;
000000r 4               ; Filetypes
000000r 4               ;
000000r 4               kFiletypeText       = $04
000000r 4               kFiletypeBinary     = $06
000000r 4               kFiletypeDirectory  = $0F
000000r 4               kFiletypeBASIC1     = $F1
000000r 4               kFiletypeBAS        = $FC
000000r 4               kFiletypeSYS        = $FF
000000r 4               
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ; end of CFFA1_API.s
000000r 4               ;------------------------------------------------------------------------------
000000r 4               
000000r 4               
000000r 3               
000000r 3                 ESC = $1B        ; Escape character
000000r 3               
000000r 3                 IN    = $6F00    ; Buffer used by GetLine. From $0200 through $027F (shared with Woz Mon)
000000r 3               
000000r 3                 DISKRES = $710D
000000r 3               
000000r 3                 ;SaveZeroPage    = $9140      ; Routines in CFFA1 firmware
000000r 3                 ;RestoreZeroPage = $9135
000000r 3               
000000r 3               SAVEZERO:
000000r 3               
000000r 3  A2 00                LDX #$00
000002r 3  B5 00        SZ1:    LDA $00,X
000004r 3  9D 00 6F             STA $6F00,X
000007r 3  8A                   TXA
000008r 3  C9 FF                CMP #$FF
00000Ar 3  F0 04                BEQ SZ2
00000Cr 3  E8                   INX
00000Dr 3  4C rr rr             JMP SZ1
000010r 3               
000010r 3               SZ2:
000010r 3  60                   RTS
000011r 3               
000011r 3               RESZERO:
000011r 3  A2 00                LDX #$00
000013r 3  BD 00 6F     RZ1:    LDA $6F00,X
000016r 3  95 00                STA $00,X
000018r 3  8A                   TXA
000019r 3  C9 FF                CMP #$FF
00001Br 3  F0 04                BEQ RZ2
00001Dr 3  E8                   INX
00001Er 3  4C rr rr             JMP RZ1
000021r 3               
000021r 3               RZ2:
000021r 3  60                   RTS
000022r 3               
000022r 3               
000022r 3               HEX2ASCII:
000022r 3  F8                   sed        ;2  @2
000023r 3  AA                   tax        ;2  @4
000024r 3  29 0F                and #$0F   ;2  @6
000026r 3  C9 0A                cmp #9+1   ;2  @8
000028r 3  69 30                adc #$30   ;2  @10
00002Ar 3  A8                   tay        ;2  @12
00002Br 3  8A                   txa        ;2  @14
00002Cr 3  4A                   lsr        ;2  @16
00002Dr 3  4A                   lsr        ;2  @18
00002Er 3  4A                   lsr        ;2  @20
00002Fr 3  4A                   lsr        ;2  @22
000030r 3  C9 0A                cmp #9+1   ;2  @24
000032r 3  69 30                adc #$30   ;2  @26
000034r 3  D8                   cld        ;2  @28
000035r 3  60                   RTS
000036r 3               
000036r 3               ;  A = MSN ASCII char
000036r 3               ;  Y = LSN ASCII char
000036r 3               
000036r 3               
000036r 3               MONCOUT:
000036r 3  8D 02 80             STA   $8002
000039r 3  60                   RTS
00003Ar 3               
00003Ar 3               ; Read key from keyboard.
00003Ar 3               MONRDKEY:
00003Ar 3  AD 01 80             LDA     $8001           ; keyboard status
00003Dr 3  C9 00                CMP     #$00
00003Fr 3  F0 F9                BEQ     MONRDKEY        ; branch until key pressed
000041r 3  C9 60                CMP #$60        ;*Is it Lower case
000043r 3  30 02                BMI   NEXT100   ;*Nope, just convert it
000045r 3  29 5F                AND #$5F        ;*If lower case, convert to Upper case
000047r 3                       ;LDA     $D010           ; keyboard data
000047r 3               NEXT100:
000047r 3  60                   RTS
000048r 3               
000048r 3               ; Check for presence of CFFA1 by testing for two ID bytes
000048r 3               CheckForCFFA1:
000048r 3                       ;LDA     CFFA1_ID1               ; First CFFA1 ID byte
000048r 3                       ;CMP     #$CF                    ; Should contain $CF
000048r 3                       ;BNE     NoCFFA1
000048r 3                       ;LDA     CFFA1_ID2               ; Second CFFA1 ID byte
000048r 3                       ;CMP     #$FA                    ; Should contain $FA
000048r 3                       ;BNE     NoCFFA1
000048r 3                       ;RTS
000048r 3               NoCFFA1:
000048r 3                       ;LDX     #<NoCFFA1String         ; Display error that no CFFA1 is present.
000048r 3                       ;LDY     #>NoCFFA1String
000048r 3                       ;JSR     PrintString
000048r 3                       ;PLA                             ; pop return address so we return to caller of calling routine
000048r 3                       ;PLA
000048r 3                	;RTS
000048r 3               
000048r 3               ; Implementation of LOAD using a CFFA1 flash interface if present.
000048r 3               ;==============================================
000048r 3               LOAD:
000048r 3                       ;JSR     CheckForCFFA1           ; returns to caller of this routine if not present
000048r 3               
000048r 3               ; Prompt user for filename to load
000048r 3               
000048r 3                       ;LDX     #<FilenameString
000048r 3                       ;LDY     #>FilenameString
000048r 3                       ;JSR     PrintString
000048r 3               
000048r 3               ; Get filename
000048r 3                      ;JSR     GetLine
000048r 3               
000048r 3               ; If user hit <Esc>, cancel the load
000048r 3                       ;BCS     Return1
000048r 3               
000048r 3               ; If filename was empty, call CFFA1 menu
000048r 3                       ;LDA     IN                     ; string length
000048r 3                       ;BNE     LoadFile               ; Was is zero length?
000048r 3                       ;JSR     Menu                   ; If so, call CFFA1 menu
000048r 3                       ;RTS                            ; and return
000048r 3               
000048r 3               ; Need to save the page zero locations used by the CFFA1 because they are also used by BASIC.
000048r 3               
000048r 3               LoadFile:
000048r 3  20 rr rr             JSR     RESZERO
00004Br 3               
00004Br 3               ; Call CFFA1 routines to load file.
00004Br 3               
00004Br 3                       ;LDA     #<IN                       ; Filename is in input buffer, length byte first.
00004Br 3                       ;STA     Filename
00004Br 3                       ;LDA     #>IN
00004Br 3                       ;STA     Filename+1
00004Br 3               
00004Br 3                       ;LDA     #$00                       ; Destination of $0000 means use file's Auxtype value
00004Br 3                       ;STA     Destination
00004Br 3                       ;STA     Destination+1
00004Br 3               
00004Br 3                       ;LDX     #CFFA1_ReadFile            ; Write the file
00004Br 3                       ;JSR     CFFA1_API
00004Br 3                       ;BCC     Restore1                   ; Branch if succeeded
00004Br 3                       ;LDX     #CFFA1_DisplayError        ; Otherwise display error message
00004Br 3                       ;JSR     CFFA1_API
00004Br 3               
00004Br 3               
00004Br 3  A9 00                LDA     #<RAMSTART2                ; Start address
00004Dr 3  8D 0D 71             STA  DISKRES
000050r 3               
000050r 3               
000050r 3  A9 03                LDA     #>RAMSTART2
000052r 3  8D 0E 71             STA  DISKRES+1
000055r 3               
000055r 3  A9 0E                LDA     #$0E
000057r 3  8D 0F 71             STA  DISKRES+2
00005Ar 3               
00005Ar 3  A9 01               LDA #$01
00005Cr 3  8D 05 80            STA  $8005
00005Fr 3               
00005Fr 3  A2 rr               LDX     #<LoadNextDiskString
000061r 3  A0 rr                LDY     #>LoadNextDiskString
000063r 3  20 rr rr             JSR     PrintString
000066r 3               
000066r 3  20 rr rr            JSR GetLine1
000069r 3               
000069r 3               
000069r 3               
000069r 3               ; Now restore the page zero locations
000069r 3               Restore1:
000069r 3  20 rr rr             JSR     RESZERO
00006Cr 3               
00006Cr 3               Return1:
00006Cr 3  60                   RTS
00006Dr 3               
00006Dr 3               ; Implementation of SAVE using a CFFA1 flash interface if present.
00006Dr 3               ;==============================================
00006Dr 3               SAVE:
00006Dr 3                       ;JSR     CheckForCFFA1
00006Dr 3               
00006Dr 3               ; Prompt user for filename to save
00006Dr 3               
00006Dr 3                       ;LDX     #<FilenameString
00006Dr 3                       ;LDY     #>FilenameString
00006Dr 3                       ;JSR     PrintString
00006Dr 3               
00006Dr 3               ; Get filename
00006Dr 3                       ;JSR     GetLine
00006Dr 3               
00006Dr 3               ; If user hit <Esc>, cancel the save
00006Dr 3                       ;BCS     Return2
00006Dr 3               
00006Dr 3               ; If filename was empty, call CFFA1 menu
00006Dr 3                       ;LDA     IN                     ; string length
00006Dr 3                       ;BNE     SaveFile               ; Was is zero length?
00006Dr 3                       ;JSR     Menu                   ; If so, call CFFA1 menu
00006Dr 3                       ;RTS                            ; and return
00006Dr 3               
00006Dr 3               
00006Dr 3               
00006Dr 3               ; Need to save the page zero locations used by the CFFA1 because they are also used by BASIC.
00006Dr 3               SaveFile:
00006Dr 3  20 rr rr             JSR     SAVEZERO
000070r 3               
000070r 3               ; Call CFFA1 routines to save file. Save memory from RAMSTART2 to
000070r 3               ; MEMSIZ.
000070r 3               
000070r 3                       ;LDA     #<IN                       ; Filename is in input buffer, length byte first.
000070r 3                       ;STA     Filename
000070r 3                       ;LDA     #>IN
000070r 3                       ;STA     Filename+1
000070r 3               
000070r 3               
000070r 3  A9 00                LDA     #<RAMSTART2                ; Start address
000072r 3  8D 0D 71             STA  $710D
000075r 3  A9 03                LDA     #>RAMSTART2
000077r 3  8D 0E 71             STA  $710E
00007Ar 3  A9 0E                LDA     #$0E
00007Cr 3  8D 0F 71             STA  $710F
00007Fr 3               
00007Fr 3  A9 00                LDA #$00
000081r 3  8D 05 80             STA  $8005
000084r 3               
000084r 3               
000084r 3  A9 00                LDA     #$00                ; Start address
000086r 3  8D 0D 71             STA  $710D
000089r 3  A9 60                LDA     #$60
00008Br 3  8D 0E 71             STA  $710E
00008Er 3  A9 01                LDA     #$01
000090r 3  8D 0F 71             STA  $710F
000093r 3  A9 01                LDA #$01
000095r 3  8D 05 80             STA  $8005
000098r 3               
000098r 3  AD 00 60             LDA $6000
00009Br 3  CD 00 03             CMP RAMSTART2
00009Er 3  D0 22                BNE ERROR_STR
0000A0r 3               
0000A0r 3  AD 01 60             LDA $6001
0000A3r 3  CD 01 03             CMP RAMSTART2+1
0000A6r 3  D0 1A                BNE ERROR_STR
0000A8r 3               
0000A8r 3  AD 02 60             LDA $6002
0000ABr 3  CD 02 03             CMP RAMSTART2+2
0000AEr 3  D0 12                BNE ERROR_STR
0000B0r 3               
0000B0r 3  A9 48                LDA #$48
0000B2r 3  8D 00 60             STA $6000
0000B5r 3               
0000B5r 3  A9 48                LDA #$48
0000B7r 3  8D 01 60             STA $6001
0000BAr 3               
0000BAr 3  A9 48                LDA #$48
0000BCr 3  8D 02 60             STA $6002
0000BFr 3               
0000BFr 3  4C rr rr             JMP NO_ERROR
0000C2r 3               
0000C2r 3                ERROR_STR:
0000C2r 3  A2 rr                LDX     #<SaveErrorString
0000C4r 3  A0 rr                LDY     #>SaveErrorString
0000C6r 3  20 rr rr             JSR     PrintString
0000C9r 3  60                   RTS
0000CAr 3               
0000CAr 3               NO_ERROR:
0000CAr 3                       ;SEC
0000CAr 3                       ;LDA     MEMSIZ                     ; Length is end address minus start address
0000CAr 3                       ;SBC     #$00
0000CAr 3                       ;STA     $7106
0000CAr 3               
0000CAr 3                       ;LDA     MEMSIZ+1
0000CAr 3                       ;SBC     #$03
0000CAr 3                       ;STA     $7107
0000CAr 3               
0000CAr 3                       ;LDX     #<UsedString
0000CAr 3                       ;LDY     #>UsedString
0000CAr 3                       ;JSR     PrintString
0000CAr 3               
0000CAr 3               
0000CAr 3               
0000CAr 3                       ;LDA     $7107
0000CAr 3                       ;JSR HEX2ASCII
0000CAr 3                       ;STA   $8002
0000CAr 3                       ;TYA
0000CAr 3                       ;STA   $8002
0000CAr 3                       ;LDA     $7106
0000CAr 3                       ;JSR HEX2ASCII
0000CAr 3                       ;STA   $8002
0000CAr 3                       ;TYA
0000CAr 3                       ;STA   $8002
0000CAr 3               
0000CAr 3  A2 rr                LDX     #<SaveNextDiskString
0000CCr 3  A0 rr                LDY     #>SaveNextDiskString
0000CEr 3  20 rr rr             JSR     PrintString
0000D1r 3               
0000D1r 3  20 rr rr             JSR     GetLine
0000D4r 3               
0000D4r 3                       ;LDA     #kFiletypeBinary           ; file type is binary
0000D4r 3                       ;STA     Filetype
0000D4r 3               
0000D4r 3                       ;LDA     Destination                ; Aux type is start address
0000D4r 3                       ;STA     Auxtype
0000D4r 3                       ;LDA     Destination+1
0000D4r 3                       ;STA     Auxtype+1
0000D4r 3               
0000D4r 3                       ;LDX     #CFFA1_WriteFile           ; Write the file
0000D4r 3                       ;JSR     CFFA1_API
0000D4r 3                       ;BCC     Restore2                   ; Branch if succeeded
0000D4r 3                       ;LDX     #CFFA1_DisplayError        ; Otherwise display error message
0000D4r 3                       ;JSR     CFFA1_API
0000D4r 3               
0000D4r 3               ; Now restore the page zero locations
0000D4r 3               Restore2:
0000D4r 3  20 rr rr             JSR     RESZERO
0000D7r 3               
0000D7r 3               Return2:
0000D7r 3  60                   RTS
0000D8r 3               
0000D8r 3               ; Print a string
0000D8r 3               ; Pass address of string in X (low) and Y (high).
0000D8r 3               ; String must be terminated in a null.
0000D8r 3               ; Cannot be longer than 256 characters.
0000D8r 3               ; Registers changed: A, Y
0000D8r 3               ;
0000D8r 3               PrintString:
0000D8r 3  86 A6                STX TEMP1
0000DAr 3  84 A7                STY TEMP1+1
0000DCr 3  A0 00                LDY #0
0000DEr 3  B1 A6        @loop:  LDA (TEMP1),Y
0000E0r 3  F0 06                BEQ done
0000E2r 3  20 rr rr             JSR MONCOUT
0000E5r 3  C8                   INY
0000E6r 3  D0 F6                BNE @loop       ; if doesn't branch, string is too long
0000E8r 3  60           done:   RTS
0000E9r 3               
0000E9r 3               ; String input routine.
0000E9r 3               ; Enter characters from the keyboard terminated in <Return> or <ESC>.
0000E9r 3               ; Characters are echoed.
0000E9r 3               ; Can be up to 127 characters.
0000E9r 3               ; Returns:
0000E9r 3               ;   Length stored at IN (doesn't include zero byte).
0000E9r 3               ;   Characters stored starting at IN+1 ($0201-$027F, same as Woz Monitor)
0000E9r 3               ;   String is terminated in a 0 byte.
0000E9r 3               ;   Carry set if user hit <Esc>, clear if used <Enter> or max string length reached.
0000E9r 3               ; Registers changed: A, X
0000E9r 3               GetLine:
0000E9r 3  A2 00                LDX  #0                 ; Initialize index into buffer
0000EBr 3               loop:
0000EBr 3  20 rr rr             JSR  MONRDKEY		; Get character from keyboard
0000EEr 3  29 7F                AND  #$7F               ; Convert to ASCII
0000F0r 3  C9 0D                CMP  #CR                ; <Enter> key pressed?
0000F2r 3  F0 11                BEQ  EnterPressed       ; If so, handle it
0000F4r 3  C9 1B                CMP  #ESC               ; <Esc> key pressed?
0000F6r 3  F0 32                BEQ  EscapePressed      ; If so, handle it
0000F8r 3  20 rr rr             JSR  MONCOUT            ; Echo the key pressed
0000FBr 3  9D 01 6F             STA  IN+1,X             ; Store character in buffer (skip first length byte)
0000FEr 3  E8                   INX                     ; Advance index into buffer
0000FFr 3  E0 7E                CPX  #$7E               ; Buffer full?
000101r 3  F0 02                BEQ  EnterPressed       ; If so, return as if <Enter> was pressed
000103r 3  D0 E6                BNE  loop               ; Always taken
000105r 3               EnterPressed:
000105r 3  18                   CLC                     ; Clear carry to indicate <Enter> pressed and fall through
000106r 3  AD 0D 71             LDA  DISKRES
000109r 3  69 A0                ADC #$A0
00010Br 3  8D 0D 71             STA DISKRES
00010Er 3  AD 0E 71             LDA  DISKRES+1
000111r 3  69 02                ADC #$02
000113r 3  8D 0E 71             STA DISKRES+1
000116r 3  A9 0E                LDA #$0E
000118r 3  8D 0F 71             STA DISKRES+2
00011Br 3  A9 00                LDA #$00
00011Dr 3  8D 05 80             STA  $8005
000120r 3  A2 rr                LDX     #<SaveFinishString
000122r 3  A0 rr                LDY     #>SaveFinishString
000124r 3  20 rr rr             JSR     PrintString
000127r 3               
000127r 3  4C rr rr             JMP loop
00012Ar 3               
00012Ar 3               EscapePressed:
00012Ar 3  A2 00                LDX  #0
00012Cr 3  A9 00                LDA  #0
00012Er 3                       ;STA  IN+1             ; Store 0 at end of buffer
00012Er 3                       ;STX  IN                 ; Store length of string
00012Er 3  60                   RTS                     ; Return
00012Fr 3               
00012Fr 3               ;=============================================================================================================
00012Fr 3               GetLine1:
00012Fr 3  A2 00                LDX  #0                 ; Initialize index into buffer
000131r 3               loop1:
000131r 3  20 rr rr             JSR  MONRDKEY		; Get character from keyboard
000134r 3  29 7F                AND  #$7F               ; Convert to ASCII
000136r 3  C9 0D                CMP  #CR                ; <Enter> key pressed?
000138r 3  F0 11                BEQ  EnterPressed1       ; If so, handle it
00013Ar 3  C9 1B                CMP  #ESC               ; <Esc> key pressed?
00013Cr 3  F0 32                BEQ  EscapePressed1      ; If so, handle it
00013Er 3  20 rr rr             JSR  MONCOUT            ; Echo the key pressed
000141r 3  9D 01 6F             STA  IN+1,X             ; Store character in buffer (skip first length byte)
000144r 3  E8                   INX                     ; Advance index into buffer
000145r 3  E0 7E                CPX  #$7E               ; Buffer full?
000147r 3  F0 02                BEQ  EnterPressed1       ; If so, return as if <Enter> was pressed
000149r 3  D0 E6                BNE  loop1               ; Always taken
00014Br 3               EnterPressed1:
00014Br 3  18                   CLC                     ; Clear carry to indicate <Enter> pressed and fall through
00014Cr 3  AD 0D 71             LDA  DISKRES
00014Fr 3  69 A0                ADC #$A0
000151r 3  8D 0D 71             STA DISKRES
000154r 3  AD 0E 71             LDA  DISKRES+1
000157r 3  69 02                ADC #$02
000159r 3  8D 0E 71             STA DISKRES+1
00015Cr 3  A9 0E                LDA #$0E
00015Er 3  8D 0F 71             STA DISKRES+2
000161r 3  A9 01                LDA #$01
000163r 3  8D 05 80             STA  $8005
000166r 3  A2 rr                LDX     #<LoadFinishString
000168r 3  A0 rr                LDY     #>LoadFinishString
00016Ar 3  20 rr rr             JSR     PrintString
00016Dr 3               
00016Dr 3  4C rr rr             JMP loop1
000170r 3               
000170r 3               EscapePressed1:
000170r 3  A2 00                LDX  #0
000172r 3  A9 00                LDA  #0
000174r 3  A0 00                LDY  #0
000176r 3                       ;STA  IN+1,X             ; Store 0 at end of buffer
000176r 3                       ;STX  IN                 ; Store length of string
000176r 3  60                   RTS                     ; Return
000177r 3               
000177r 3               
000177r 3               
000177r 3               NoCFFA1String:
000177r 3  3F 4E 4F 20    .byte "?NO CFFA1 ERROR",CR,0
00017Br 3  43 46 46 41  
00017Fr 3  31 20 45 52  
000188r 3               
000188r 3               SaveNextDiskString:
000188r 3  0A 3D 3D 3D    .byte LF,"===zDisk Save===",LF,"SAVE OK",LF,"Save to Next Disk?",LF,0
00018Cr 3  7A 44 69 73  
000190r 3  6B 20 53 61  
0001B6r 3                       ;123456789ABCDEFGHIJK
0001B6r 3               
0001B6r 3               LoadNextDiskString:
0001B6r 3  0A 3D 3D 3D    .byte LF,"===zDisk Load===",LF,"LOAD OK",LF,"Load from Next Disk?",LF,0
0001BAr 3  7A 44 69 73  
0001BEr 3  6B 20 4C 6F  
0001E6r 3                       ;123456789ABCDEFGHIJK
0001E6r 3               UsedString:
0001E6r 3  55 73 65 64  .byte "Used RAM:",0
0001EAr 3  20 52 41 4D  
0001EEr 3  3A 00        
0001F0r 3                       ;123456789ABCDEFGHIJK
0001F0r 3               
0001F0r 3               SaveFinishString:
0001F0r 3  53 41 56 45  .byte "SAVE OK,Next Disk?",LF,0
0001F4r 3  20 4F 4B 2C  
0001F8r 3  4E 65 78 74  
000204r 3                       ;123456789ABCDEFGHIJK
000204r 3               
000204r 3               LoadFinishString:
000204r 3  4C 4F 41 44  .byte "LOAD OK,Next Disk?",LF,0
000208r 3  20 4F 4B 2C  
00020Cr 3  4E 65 78 74  
000218r 3                       ;123456789ABCDEFGHIJK
000218r 3               
000218r 3               SaveErrorString:
000218r 3  53 61 76 65  .byte "Save Error!",LF,0
00021Cr 3  20 45 72 72  
000220r 3  6F 72 21 0A  
000225r 3                       ;123456789ABCDEFGHIJK
000225r 3               
000225r 3               
000225r 2               .endif
000225r 2               
000225r 2               .ifdef APPLE
000225r 2               .include "apple_extra.s"
000225r 2               .endif
000225r 2               
000225r 2               .ifdef MICROTAN
000225r 2               .include "microtan_extra.s"
000225r 2               .endif
000225r 2               
000225r 1               
