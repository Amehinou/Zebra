ca65 V2.18 - Ubuntu 2.18-1
Main file   : zebra_monitor.s
Current file: zebra_monitor.s

000000r 1               ;  The Mai Monitor for Zebra Homebrew Computer
000000r 1               ;  Written by @Earture in 2021 modified by
000000r 1               
000000r 1               
000000r 1               ; Lines with comments starting with "*" indicate code changes from the original WozMon.
000000r 1               
000000r 1               
000000r 1               
000000r 1               
000000r 1               KBD         = $8001          ; PIA.A keyboard input
000000r 1               KBDCR       = $8011
000000r 1               DSP         = $8002          ; PIA.B display output register
000000r 1               DSPCR       = $8012
000000r 1               
000000r 1               ; Page 0 Variables
000000r 1               
000000r 1               IN          = $0200          ;*Input buffer
000000r 1               XAML        = $24            ;*Index pointers
000000r 1               XAMH        = $25
000000r 1               STL         = $26
000000r 1               STH         = $27
000000r 1               L           = $28
000000r 1               H           = $29
000000r 1               YSAV        = $2A
000000r 1               MODE        = $2B
000000r 1               MSGL        = $2C
000000r 1               MSGH        = $2D
000000r 1               COUNTER     = $2E
000000r 1               
000000r 1               ; ZUTA
000000r 1               MARK         = $0A
000000r 1               OCTAVE       = $0B
000000r 1               NOTE         = $0C
000000r 1               
000000r 1               
000000r 1               
000000r 1                          .org $EBF1
00EBF1  1               
00EBF1  1               
00EBF1  1  D8           RESET:      CLD             ; Clear decimal arithmetic mode.
00EBF2  1  58                       CLI
00EBF3  1               
00EBF3  1               
00EBF3  1               
00EBF3  1  A9 FF                    LDA #$FF        ; clear screen
00EBF5  1  8D 20 80                 STA $8020
00EBF8  1               
00EBF8  1               
00EBF8  1               
00EBF8  1  A9 9A                    LDA #<MSG1
00EBFA  1  85 2C                    STA MSGL
00EBFC  1  A9 ED                    LDA #>MSG1
00EBFE  1  85 2D                    STA MSGH
00EC00  1  20 5E ED                 JSR SHWMSG      ;* Show Welcome.
00EC03  1               
00EC03  1  A9 9B        SOFTRESET:  LDA #$9B        ;* Auto escape.
00EC05  1  C9 88        NOTCR:      CMP #$88        ;* "<-"? Note this was changed to $88 which is the back space key.
00EC07  1  F0 19                    BEQ BACKSPACE   ; Yes.
00EC09  1  C9 9B                    CMP #$9B        ; ESC?
00EC0B  1  F0 03                    BEQ ESCAPE      ; Yes.
00EC0D  1  C8                       INY             ; Advance text index.
00EC0E  1  10 1F                    BPL NEXTCHAR    ; Auto ESC if >127.
00EC10  1  A9 94        ESCAPE:     LDA #<MSG_READY
00EC12  1  85 2C                    STA MSGL
00EC14  1  A9 ED                    LDA #>MSG_READY
00EC16  1  85 2D                    STA MSGH
00EC18  1  20 5E ED                 JSR SHWMSG      ;* Show Ready.
00EC1B  1  A9 0A        GETLINE:    LDA #$0A        ; CR.
00EC1D  1  20 2E ED                 JSR ECHO        ; Output it.
00EC20  1  A0 01                    LDY #$01        ; Initiallize text index.
00EC22  1  88           BACKSPACE:  DEY             ; Backup text index.
00EC23  1  30 F6                    BMI GETLINE     ; Beyond start of line, reinitialize.
00EC25  1  A9 A0                    LDA #$A0        ;*Space, overwrite the backspaced char.
00EC27  1  20 2E ED                 JSR ECHO
00EC2A  1  A9 FF                    LDA #$FF        ;*Backspace again to get to correct pos.========================
00EC2C  1  20 2E ED                 JSR ECHO
00EC2F  1               
00EC2F  1               
00EC2F  1               NEXTCHAR:
00EC2F  1  AD 01 80                 LDA KBD         ; Load character. B7 should be ‘1’.
00EC32  1  C9 00                    CMP #$00
00EC34  1  F0 F9                    BEQ NEXTCHAR
00EC36  1               
00EC36  1  C9 60                    CMP #$60        ;*Is it Lower case
00EC38  1  30 02                    BMI   CONVERT   ;*Nope, just convert it
00EC3A  1  29 5F                    AND #$5F        ;*If lower case, convert to Upper case
00EC3C  1  09 80        CONVERT:    ORA #$80        ;*Convert it to "ASCII Keyboard" Input
00EC3E  1  99 00 02                 STA IN,Y        ; Add to text buffer.
00EC41  1  20 2E ED                 JSR ECHO        ; Display character.
00EC44  1  C9 8D                    CMP #$8D        ; CR?
00EC46  1  D0 BD                    BNE NOTCR       ; No.
00EC48  1  A0 FF                    LDY #$FF        ; Reset text index.
00EC4A  1  A9 00                    LDA #$00        ; For XAM mode.
00EC4C  1  AA                       TAX             ; 0->X.
00EC4D  1  0A           SETSTOR:    ASL             ; Leaves $7B if setting STOR mode.
00EC4E  1  85 2B        SETMODE:    STA MODE        ; $00 = XAM, $7B = STOR, $AE = BLOK XAM.
00EC50  1  C8           BLSKIP:     INY             ; Advance text index.
00EC51  1  B9 00 02     NEXTITEM:   LDA IN,Y        ; Get charcter.
00EC54  1  C9 8D                    CMP #$8D        ; CR?
00EC56  1  F0 C3                    BEQ GETLINE     ; Yes, done this line.
00EC58  1  C9 AE                    CMP #$AE        ; "."?
00EC5A  1  90 F4                    BCC BLSKIP      ; Skip delimiter.
00EC5C  1  F0 F0                    BEQ SETMODE     ; Set BLOCK XAM mode.
00EC5E  1  C9 BA                    CMP #$BA        ; ":"?
00EC60  1  F0 EB                    BEQ SETSTOR     ; Yes, set STOR mode.
00EC62  1  C9 D2                    CMP #$D2        ; "R"?
00EC64  1  F0 41                    BEQ RUN         ; Yes, run user program.  =================================================menu
00EC66  1  C9 CB                    CMP #'K'+$80   ;
00EC68  1  F0 49                    BEQ ZEBRA_ASS       ;
00EC6A  1  C9 C9                    CMP #'I'+$80   ;
00EC6C  1  F0 4B                    BEQ LOGO
00EC6E  1  C9 CD                    CMP #'M'+$80   ; msbasic
00EC70  1  F0 50                    BEQ MSBASIC
00EC72  1  C9 D0                    CMP #'P'+$80   ; user program
00EC74  1  F0 46                    BEQ USER_FUNC
00EC76  1  C9 D6                    CMP #'V'+$80   ; color
00EC78  1  F0 45                    BEQ MY_COLOR
00EC7A  1               
00EC7A  1               
00EC7A  1               
00EC7A  1  86 28                    STX L           ; $00->L.
00EC7C  1  86 29                    STX H           ; and H.
00EC7E  1  84 2A                    STY YSAV        ; Save Y for comparison.
00EC80  1  B9 00 02     NEXTHEX:     LDA IN,Y       ; Get character for hex test.
00EC83  1  49 B0                    EOR #$B0        ; Map digits to $0-9.                        B0: 1011 0000
00EC85  1  C9 0A                    CMP #$0A        ; Digit?
00EC87  1  90 06                    BCC DIG         ; Yes.
00EC89  1  69 88                    ADC #$88        ; Map letter "A"-"F" to $FA-FF.
00EC8B  1  C9 FA                    CMP #$FA        ; Hex letter?
00EC8D  1  90 11                    BCC NOTHEX      ; No, character not hex.
00EC8F  1  0A           DIG:        ASL
00EC90  1  0A                       ASL             ; Hex digit to MSD of A.
00EC91  1  0A                       ASL
00EC92  1  0A                       ASL
00EC93  1  A2 04                    LDX #$04        ; Shift count.
00EC95  1  0A           HEXSHIFT:   ASL             ; Hex digit left MSB to carry.
00EC96  1  26 28                    ROL L           ; Rotate into LSD.
00EC98  1  26 29                    ROL H           ; Rotate into MSD's.
00EC9A  1  CA                       DEX             ; Done 4 shifts?
00EC9B  1  D0 F8                    BNE HEXSHIFT    ; No, loop.
00EC9D  1  C8                       INY             ; Advance text index.
00EC9E  1  D0 E0                    BNE NEXTHEX     ; Always taken. Check next character for hex.
00ECA0  1  C4 2A        NOTHEX:     CPY YSAV        ; Check if L, H empty (no hex digits).
00ECA2  1  D0 21                    BNE NOESCAPE    ;* Branch out of range, had to improvise...
00ECA4  1  4C 10 EC                 JMP ESCAPE      ; Yes, generate ESC sequence.
00ECA7  1               
00ECA7  1  20 AD EC     RUN:        JSR ACTRUN      ;* JSR to the Address we want to run.
00ECAA  1  4C 03 EC                 JMP   SOFTRESET ;* When returned for the program, reset EWOZ.
00ECAD  1  6C 24 00     ACTRUN:     JMP (XAML)      ; Run at current XAM index.
00ECB0  1               
00ECB0  1               
00ECB0  1               
00ECB0  1  4C 36 ED     ZEBRA_CLS:  JMP ZEBRA_CLS1
00ECB3  1               
00ECB3  1               ZEBRA_ASS:
00ECB3  1  20 B0 EC                 JSR ZEBRA_CLS
00ECB6  1  4C 00 F0                 JMP $F000
00ECB9  1               
00ECB9  1  4C 6B ED     LOGO:       JMP LOGO1
00ECBC  1               
00ECBC  1  4C 3E ED     USER_FUNC:  JMP USER_FUNC1
00ECBF  1  4C 41 ED     MY_COLOR:  JMP MY_COLOR1
00ECC2  1  4C 58 ED     MSBASIC:    JMP MSBASIC1
00ECC5  1               
00ECC5  1  24 2B        NOESCAPE:   BIT MODE        ; Test MODE byte.
00ECC7  1  50 0D                    BVC NOTSTOR     ; B6=0 for STOR, 1 for XAM and BLOCK XAM
00ECC9  1  A5 28                    LDA L           ; LSD's of hex data.
00ECCB  1  81 26                    STA (STL, X)    ; Store at current "store index".
00ECCD  1  E6 26                    INC STL         ; Increment store index.
00ECCF  1  D0 80                    BNE NEXTITEM    ; Get next item. (no carry).
00ECD1  1  E6 27                    INC STH         ; Add carry to 'store index' high order.
00ECD3  1  4C 51 EC     TONEXTITEM: JMP NEXTITEM    ; Get next command item.
00ECD6  1  30 2B        NOTSTOR:    BMI XAMNEXT     ; B7=0 for XAM, 1 for BLOCK XAM.
00ECD8  1  A2 02                    LDX #$02        ; Byte count.
00ECDA  1  B5 27        SETADR:     LDA L-1,X       ; Copy hex data to
00ECDC  1  95 25                    STA STL-1,X     ; "store index".
00ECDE  1  95 23                    STA XAML-1,X    ; And to "XAM index'.
00ECE0  1  CA                       DEX             ; Next of 2 bytes.
00ECE1  1  D0 F7                    BNE SETADR      ; Loop unless X = 0.
00ECE3  1  D0 14        NXTPRNT:    BNE PRDATA      ; NE means no address to print.
00ECE5  1  A9 0A                    LDA #$0A        ; CR.
00ECE7  1  20 2E ED                 JSR ECHO        ; Output it.
00ECEA  1  A5 25                    LDA XAMH        ; 'Examine index' high-order byte.
00ECEC  1  20 1B ED                 JSR PRBYTE      ; Output it in hex format.
00ECEF  1  A5 24                    LDA XAML        ; Low-order "examine index" byte.
00ECF1  1  20 1B ED                 JSR PRBYTE      ; Output it in hex format.
00ECF4  1  A9 BA                    LDA #$BA        ; ":".
00ECF6  1  20 2E ED                 JSR ECHO        ; Output it.
00ECF9  1  A9 A0        PRDATA:     LDA #$A0        ; Blank.
00ECFB  1  20 2E ED                 JSR ECHO        ; Output it.
00ECFE  1  A1 24                    LDA (XAML,X)    ; Get data byte at 'examine index".
00ED00  1  20 1B ED                 JSR PRBYTE      ; Output it in hex format.
00ED03  1  86 2B        XAMNEXT:    STX MODE        ; 0-> MODE (XAM mode).
00ED05  1  A5 24                    LDA XAML
00ED07  1  C5 28                    CMP L           ; Compare 'examine index" to hex data.
00ED09  1  A5 25                    LDA XAMH
00ED0B  1  E5 29                    SBC H
00ED0D  1  B0 C4                    BCS TONEXTITEM  ; Not less, so no more data to output.
00ED0F  1  E6 24                    INC XAML
00ED11  1  D0 02                    BNE MOD8CHK     ; Increment 'examine index".
00ED13  1  E6 25                    INC XAMH
00ED15  1  A5 24        MOD8CHK:    LDA XAML        ; Check low-order 'exainine index' byte
00ED17  1  29 03                    AND #$03        ; For MOD 8=0 ** changed to $0F to get 16 values per row **
00ED19  1  10 C8                    BPL NXTPRNT     ; Always taken.
00ED1B  1  48           PRBYTE:     PHA             ; Save A for LSD.
00ED1C  1  4A                       LSR
00ED1D  1  4A                       LSR
00ED1E  1  4A                       LSR             ; MSD to LSD position.
00ED1F  1  4A                       LSR
00ED20  1  20 24 ED                 JSR PRHEX       ; Output hex digit.
00ED23  1  68                       PLA             ; Restore A.
00ED24  1  29 0F        PRHEX:      AND #$0F        ; Mask LSD for hex print.
00ED26  1  09 B0                    ORA #$B0        ; Add "0".
00ED28  1  C9 BA                    CMP #$BA        ; Digit?
00ED2A  1  90 02                    BCC ECHO        ; Yes, output it.
00ED2C  1  69 06                    ADC #$06        ; Add offset for letter.
00ED2E  1  48           ECHO:       PHA             ;*Save A
00ED2F  1  29 7F                    AND #$7F        ;*Change to "standard ASCII"
00ED31  1               
00ED31  1               
00ED31  1  8D 02 80                 STA DSP         ; Output character. Sets DA.
00ED34  1               
00ED34  1  68                       PLA             ;*Restore A
00ED35  1  60                       RTS             ;*Done, over and out...
00ED36  1               
00ED36  1               ZEBRA_CLS1:
00ED36  1  48                       PHA
00ED37  1  A9 FF                    LDA #$FF        ; clear screen
00ED39  1  8D 20 80                 STA $8020
00ED3C  1  68                       PLA
00ED3D  1  60                       RTS
00ED3E  1               
00ED3E  1               USER_FUNC1:
00ED3E  1               
00ED3E  1  20 FE EE                 JSR  ZUTA
00ED41  1               
00ED41  1               
00ED41  1               MY_COLOR1:
00ED41  1  A9 1F                    LDA  #$1F
00ED43  1  8D 0D 71                 STA  $710D
00ED46  1  A9 90                    LDA  #$90
00ED48  1  8D 0E 71                 STA  $710E
00ED4B  1  A9 0E                    LDA  #$0E
00ED4D  1  8D 0F 71                 STA  $710F
00ED50  1  A9 01                    LDA  #$01
00ED52  1  8D 05 80                 STA  $8005
00ED55  1  4C 03 EC                 JMP  SOFTRESET
00ED58  1               
00ED58  1               MSBASIC1:
00ED58  1  20 B0 EC                 JSR ZEBRA_CLS
00ED5B  1  4C 58 DF                 JMP $DF58
00ED5E  1               
00ED5E  1               
00ED5E  1               
00ED5E  1  A0 00        SHWMSG:     LDY #$0
00ED60  1  B1 2C        PRINT:      LDA (MSGL),Y
00ED62  1  F0 06                    BEQ DONE
00ED64  1  20 2E ED                 JSR ECHO
00ED67  1  C8                       INY
00ED68  1  D0 F6                    BNE PRINT
00ED6A  1  60           DONE:       RTS
00ED6B  1               
00ED6B  1  A9 FF        LOGO1:      LDA #$FF
00ED6D  1  8D 20 80                 STA $8020
00ED70  1  A9 C3                    LDA #<MSG2
00ED72  1  85 2C                    STA MSGL
00ED74  1  A9 ED                    LDA #>MSG2
00ED76  1  85 2D                    STA MSGH
00ED78  1  20 5E ED                 JSR SHWMSG
00ED7B  1  A9 12                    LDA #$12
00ED7D  1  8D 54 73                 STA $7354
00ED80  1  A9 13                    LDA #$13
00ED82  1  8D 56 73                 STA $7356
00ED85  1  A9 14                    LDA #$14
00ED87  1  8D 58 73                 STA $7358
00ED8A  1  AD 01 80     LOGO_LP:    LDA KBD
00ED8D  1  C9 00                    CMP #$00
00ED8F  1  F0 F9                    BEQ LOGO_LP
00ED91  1  4C F1 EB                 JMP RESET
00ED94  1               
00ED94  1               
00ED94  1  52 65 61 64  MSG_READY: .byte "Ready",0
00ED98  1  79 00        
00ED9A  1               
00ED9A  1  2A 2A 20 5A  MSG1:      .byte "** Zebra Monitor **    32K RAM System   ",0
00ED9E  1  65 62 72 61  
00EDA2  1  20 4D 6F 6E  
00EDC3  1                                ;123456789ABCDEFGHIJK123456789ABCDEFGHIJK
00EDC3  1               MSG2:      ;.byte "^^^^^^^^^^^^^^^^^^^^"
00EDC3  1  2A 20 20 20             .byte "*       (>_^)      *"
00EDC7  1  20 20 20 20  
00EDCB  1  28 3E 5F 5E  
00EDD7  1  2A 20 20 20             .byte "*                  *"
00EDDB  1  20 20 20 20  
00EDDF  1  20 20 20 20  
00EDEB  1  2A 20 20 20             .byte "*       Zebra      *"
00EDEF  1  20 20 20 20  
00EDF3  1  5A 65 62 72  
00EDFF  1  2A 20 20 20             .byte "*                  *"
00EE03  1  20 20 20 20  
00EE07  1  20 20 20 20  
00EE13  1  2A 20 20 20             .byte "*       v1.00      *"
00EE17  1  20 20 20 20  
00EE1B  1  76 31 2E 30  
00EE27  1  2A 20 48 6F             .byte "* HomebrewComputer *"
00EE2B  1  6D 65 62 72  
00EE2F  1  65 77 43 6F  
00EE3B  1  2A 20 20 20             .byte "*                  *"
00EE3F  1  20 20 20 20  
00EE43  1  20 20 20 20  
00EE4F  1  2A 20 20 20             .byte "*      Earture     *"
00EE53  1  20 20 20 45  
00EE57  1  61 72 74 75  
00EE63  1  2A 20 20 20             .byte "*                  *",0
00EE67  1  20 20 20 20  
00EE6B  1  20 20 20 20  
00EE78  1                          ;.byte "^^^^^^^^^^^^^^^^^^^",0
00EE78  1               
00EE78  1                                        ; C,  C_S, D, D_S, E, F, F_S,  G,   G_S,  A,  A_S,  B,
00EE78  1  44 15 E8 BF  NOTE_TABLE_C3_R00: .byte 68, 21, 232, 191, 151, 114, 79, 46, 14, 241, 213, 186    ;octave 3
00EE7C  1  97 72 4F 2E  
00EE80  1  0E F1 D5 BA  
00EE84  1  A2 8A 74 5F  NOTE_TABLE_C4_R00: .byte 162, 138, 116, 95, 75, 57, 39, 23, 7, 248, 234, 221     ;octave 4
00EE88  1  4B 39 27 17  
00EE8C  1  07 F8 EA DD  
00EE90  1  D1 C5 BA AF  NOTE_TABLE_C5_R00: .byte 209, 197, 186, 175, 165, 156, 147, 139, 131, 124, 117, 110  ;octave 5
00EE94  1  A5 9C 93 8B  
00EE98  1  83 7C 75 6E  
00EE9C  1  03 03 02 02  NOTE_TABLE_C3_R01: .byte 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1
00EEA0  1  02 02 02 02  
00EEA4  1  02 01 01 01  
00EEA8  1  01 01 01 01  NOTE_TABLE_C4_R01: .byte   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0
00EEAC  1  01 01 01 01  
00EEB0  1  01 00 00 00  
00EEB4  1  00 00 00 00  NOTE_TABLE_C5_R01: .byte   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
00EEB8  1  00 00 00 00  
00EEBC  1  00 00 00 00  
00EEC0  1  41 57 53 45  KEY_PAD_CHAR: .byte 'A','W','S','E','D','F','T','G','Y','H','U','J','C','4'
00EEC4  1  44 46 54 47  
00EEC8  1  59 48 55 4A  
00EECE  1  61 77 73 65  KEY_PAD_CHAR_LOW: .byte 'a','w','s','e','d','f','t','g','y','h','u','j','c','4'
00EED2  1  64 66 74 67  
00EED6  1  79 68 75 6A  
00EEDC  1  64 51 66 53  KEY_PAD_PIXEL: .byte $64,$51,$66,$53,$68,$69,$56,$6B,$58,$6D,$5A,$6F,$B8,$B9
00EEE0  1  68 69 56 6B  
00EEE4  1  58 6D 5A 6F  
00EEEA  1               
00EEEA  1  2A 2A 20 5A  MSG_ZUTA:      .byte "** Zebra   Piano **",0
00EEEE  1  65 62 72 61  
00EEF2  1  20 20 20 50  
00EEFE  1                                    ;123456789ABCDEFGHIJK123456789ABCDEFGHIJK
00EEFE  1               
00EEFE  1               KEY_IS_PRESSED     = $2F
00EEFE  1               VOL = $2E
00EEFE  1               IS_WEAK = $2D
00EEFE  1               IS_WEAK_2 = $2C
00EEFE  1               NOTE_VECTOR_R0 = $10
00EEFE  1               NOTE_VECTOR_R1 = $12
00EEFE  1               
00EEFE  1  A9 FF        ZUTA:       LDA #$FF               ;clear screen
00EF00  1  8D 20 80                 STA $8020
00EF03  1  A9 EA                    LDA #<MSG_ZUTA         ;show welcome screen
00EF05  1  85 2C                    STA MSGL
00EF07  1  A9 EE                    LDA #>MSG_ZUTA
00EF09  1  85 2D                    STA MSGH
00EF0B  1  20 5E ED                 JSR SHWMSG
00EF0E  1               
00EF0E  1  A9 FF                    LDA #$FF               ;set button states
00EF10  1  85 2D                    STA IS_WEAK
00EF12  1  A9 00                    LDA #$00
00EF14  1  85 2E                    STA VOL
00EF16  1  A9 07                    LDA #$07
00EF18  1  85 2C                    STA IS_WEAK_2
00EF1A  1               
00EF1A  1  A9 84                    LDA #<NOTE_TABLE_C4_R00
00EF1C  1  85 10                    STA NOTE_VECTOR_R0
00EF1E  1  A9 EE                    LDA #>NOTE_TABLE_C4_R00
00EF20  1  85 11                    STA NOTE_VECTOR_R0+1
00EF22  1               
00EF22  1  A9 A8                    LDA #<NOTE_TABLE_C4_R01
00EF24  1  85 12                    STA NOTE_VECTOR_R1
00EF26  1  A9 EE                    LDA #>NOTE_TABLE_C4_R01
00EF28  1  85 13                    STA NOTE_VECTOR_R1+1
00EF2A  1               
00EF2A  1               
00EF2A  1  A2 00                    LDX #$00
00EF2C  1  BC DC EE     PRINT_KEY:  LDY KEY_PAD_PIXEL,X
00EF2F  1  BD C0 EE                 LDA KEY_PAD_CHAR,X
00EF32  1  99 00 73                 STA $7300,Y
00EF35  1  E8                       INX
00EF36  1  8A                       TXA
00EF37  1  C9 0E                    CMP #$0E
00EF39  1  D0 F1                    BNE PRINT_KEY
00EF3B  1               
00EF3B  1  A9 0D                    LDA #$0D
00EF3D  1  8D 19 73                 STA $7319
00EF40  1               
00EF40  1  A2 00                    LDX #$00
00EF42  1               
00EF42  1               
00EF42  1               NEXT_CHAR:
00EF42  1  AD 01 80                 LDA $8001
00EF45  1  C9 00                    CMP #$00
00EF47  1  F0 57                    BEQ N_1
00EF49  1  C9 33                    CMP #$33 ; octave 3
00EF4B  1  F0 0B                    BEQ SET_OCTAVE_C3
00EF4D  1  C9 34                    CMP #$34 ; octave 4
00EF4F  1  F0 1F                    BEQ SET_OCTAVE_C4
00EF51  1  C9 35                    CMP #$35 ; octave 5
00EF53  1  F0 33                    BEQ SET_OCTAVE_C5
00EF55  1               
00EF55  1  4C EB EF                 JMP KEY_PRESSED
00EF58  1               
00EF58  1               SET_OCTAVE_C3:
00EF58  1               
00EF58  1               
00EF58  1  A9 78                    LDA #<NOTE_TABLE_C3_R00
00EF5A  1  85 10                    STA NOTE_VECTOR_R0
00EF5C  1  A9 EE                    LDA #>NOTE_TABLE_C3_R00
00EF5E  1  85 11                    STA NOTE_VECTOR_R0+1
00EF60  1               
00EF60  1  A9 9C                    LDA #<NOTE_TABLE_C3_R01
00EF62  1  85 12                    STA NOTE_VECTOR_R1
00EF64  1  A9 EE                    LDA #>NOTE_TABLE_C3_R01
00EF66  1  85 13                    STA NOTE_VECTOR_R1+1
00EF68  1  A9 33                    LDA #$33
00EF6A  1  8D B9 73                 STA $73B9
00EF6D  1  4C 42 EF                 JMP NEXT_CHAR
00EF70  1               SET_OCTAVE_C4:
00EF70  1  A9 84                      LDA #<NOTE_TABLE_C4_R00
00EF72  1  85 10                    STA NOTE_VECTOR_R0
00EF74  1  A9 EE                    LDA #>NOTE_TABLE_C4_R00
00EF76  1  85 11                    STA NOTE_VECTOR_R0+1
00EF78  1               
00EF78  1  A9 A8                    LDA #<NOTE_TABLE_C4_R01
00EF7A  1  85 12                    STA NOTE_VECTOR_R1
00EF7C  1  A9 EE                    LDA #>NOTE_TABLE_C4_R01
00EF7E  1  85 13                    STA NOTE_VECTOR_R1+1
00EF80  1  A9 34                    LDA #$34
00EF82  1  8D B9 73                 STA $73B9
00EF85  1  4C 42 EF                   JMP NEXT_CHAR
00EF88  1               
00EF88  1               SET_OCTAVE_C5:
00EF88  1  A9 90                    LDA #<NOTE_TABLE_C5_R00
00EF8A  1  85 10                    STA NOTE_VECTOR_R0
00EF8C  1  A9 EE                    LDA #>NOTE_TABLE_C5_R00
00EF8E  1  85 11                    STA NOTE_VECTOR_R0+1
00EF90  1               
00EF90  1  A9 B4                    LDA #<NOTE_TABLE_C5_R01
00EF92  1  85 12                    STA NOTE_VECTOR_R1
00EF94  1  A9 EE                    LDA #>NOTE_TABLE_C5_R01
00EF96  1  85 13                    STA NOTE_VECTOR_R1+1
00EF98  1  A9 35                    LDA #$35
00EF9A  1  8D B9 73                 STA $73B9
00EF9D  1  4C 42 EF                   JMP NEXT_CHAR
00EFA0  1               
00EFA0  1  C5 2D         N_1:       CMP IS_WEAK      ;A=0
00EFA2  1  F0 05                    BEQ SET_AY_VOL_DOWN
00EFA4  1  C6 2D                    DEC IS_WEAK
00EFA6  1  4C 42 EF                 JMP NEXT_CHAR
00EFA9  1               
00EFA9  1               SET_AY_VOL_DOWN:
00EFA9  1               
00EFA9  1  C5 2C                    CMP IS_WEAK_2
00EFAB  1  F0 09                    BEQ N_3
00EFAD  1  C6 2C                    DEC IS_WEAK_2
00EFAF  1  A9 FF                    LDA #$FF
00EFB1  1  85 2D                    STA IS_WEAK
00EFB3  1  4C 42 EF                 JMP NEXT_CHAR
00EFB6  1  A5 2E         N_3:       LDA VOL
00EFB8  1  C9 00                    CMP #$00
00EFBA  1  F0 86                    BEQ NEXT_CHAR
00EFBC  1  C6 2E                    DEC VOL
00EFBE  1  A5 2E                    LDA VOL
00EFC0  1  8D 08 A0                 STA $A008
00EFC3  1  4C 42 EF                 JMP NEXT_CHAR
00EFC6  1               
00EFC6  1                SETAY:
00EFC6  1                           ;LDA #$00
00EFC6  1                           ;STA $A008
00EFC6  1               
00EFC6  1               
00EFC6  1  A9 0F                      LDA #$0F
00EFC8  1  85 2E                    STA VOL
00EFCA  1  A9 FF                    LDA #$FF
00EFCC  1  85 2D                    STA IS_WEAK
00EFCE  1  A9 07                    LDA #$07
00EFD0  1  85 2C                    STA IS_WEAK_2
00EFD2  1               
00EFD2  1  8A                       TXA
00EFD3  1  A8                       TAY
00EFD4  1               
00EFD4  1  B1 10                    LDA (NOTE_VECTOR_R0),Y
00EFD6  1  8D 00 A0                 STA $A000
00EFD9  1  B1 12                    LDA (NOTE_VECTOR_R1),Y
00EFDB  1  8D 01 A0                 STA $A001
00EFDE  1               
00EFDE  1  A9 3E                    LDA #$3E
00EFE0  1  8D 07 A0                 STA $A007
00EFE3  1  A5 2E                    LDA VOL
00EFE5  1  8D 08 A0                 STA $A008
00EFE8  1  4C 42 EF                 JMP NEXT_CHAR
00EFEB  1               
00EFEB  1               
00EFEB  1               KEY_PRESSED:
00EFEB  1  A2 00                     LDX #$00
00EFED  1               
00EFED  1               
00EFED  1  DD CE EE     PRESSED_1:   CMP KEY_PAD_CHAR_LOW,X
00EFF0  1  F0 D4                     BEQ SETAY    ; X - the pressed key in C3-C5
00EFF2  1  E8                        INX
00EFF3  1  48                        PHA
00EFF4  1  8A                        TXA
00EFF5  1  C9 0C                     CMP #$0C
00EFF7  1  F0 04                     BEQ NEXT_KEY
00EFF9  1  68                        PLA
00EFFA  1  4C ED EF                  JMP PRESSED_1
00EFFD  1               NEXT_KEY:
00EFFD  1               
00EFFD  1  4C 42 EF                   JMP NEXT_CHAR
00F000  1               
00F000  1               
00F000  1               
00F000  1               
